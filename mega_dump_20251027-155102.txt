MEGA PROJECT DUMP 20251027-155102
Root: C:\Projetos\Pessoas\Importadora Mega\MEGA

== Node/NPM global ==
v22.19.0
10.9.3



== backend : package.json ==
{
  "name": "backend",
  "version": "1.0.0",
  "description": "API MEGA",
  "main": "dist/app.js",
  "type": "commonjs",
  "engines": {
    "node": ">=18.0.0"
  },
  "scripts": {
    "dev": "ts-node-dev --respawn --transpile-only src/app.ts",
    "build": "tsc",
    "start": "node dist/app.js",
    "migrate": "ts-node-dev --respawn --transpile-only src/migrate.ts",
    "seed": "ts-node-dev --respawn --transpile-only src/seed.ts",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^5.1.0",
    "jsonwebtoken": "^9.0.2",
    "morgan": "^1.10.1",
    "mssql": "^11.0.1",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/bcryptjs": "^2.4.6",
    "@types/cors": "^2.8.19",
    "@types/express": "^5.0.3",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/mssql": "^9.1.8",
    "@types/node": "^20.12.12",
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.9.2"
  }
}


== backend : npm ls --depth=0 ==

== frontend : package.json ==
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.11.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.8.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@tailwindcss/vite": "^4.1.13",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^5.0.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.13",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.39.1",
    "vite": "^7.1.2"
  }
}


== frontend : npm ls --depth=0 ==

----- BEGIN backend\src\controllers\auth.controller.ts -----

import { Request, Response } from "express";
import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";
import { z } from "zod";
import { pool } from "../db";
import type { Permissao, AuthenticatedRequest } from "../middleware/auth.middleware";

const loginSchema = z.object({
  email: z.string().email("Email invÃ¡lido"),
  senha: z.string().min(1, "Senha Ã© obrigatÃ³ria"),
});

const registerSchema = z.object({
  nome: z.string().min(1, "Nome Ã© obrigatÃ³rio"),
  email: z.string().email("Email invÃ¡lido"),
  senha: z.string().min(6, "Senha deve ter no mÃ­nimo 6 caracteres"),
  permissao: z.enum(["admin", "financeiro", "vendedor"]).default("vendedor"),
});

function signToken(payload: { id: number; nome: string; permissao: Permissao }) {
  const secret = process.env.JWT_SECRET as string;
  if (!secret) {
    throw new Error("ConfiguraÃ§Ã£o invÃ¡lida do servidor (JWT_SECRET)");
  }
  return jwt.sign(payload, secret, { expiresIn: "1d" });
}

export const login = async (req: Request, res: Response) => {
  try {
    const { email, senha } = loginSchema.parse(req.body);

    const result = await pool
      .request()
      .input("email", email)
      .query(
        "SELECT id, nome, email, senha_hash, permissao FROM usuarios WHERE email = @email AND ativo = 1"
      );

    if (result.recordset.length === 0) {
      return res.status(401).json({ message: "Credenciais invÃ¡lidas" });
    }

    const user = result.recordset[0];
    const ok = await bcrypt.compare(senha, user.senha_hash);
    if (!ok) return res.status(401).json({ message: "Credenciais invÃ¡lidas" });

    const permissao = (user.permissao as string).toLowerCase() as Permissao;
    const token = signToken({ id: user.id, nome: user.nome, permissao });

    res.json({
      token,
      user: {
        id: user.id,
        nome: user.nome,
        email: user.email,
        permissao,
      },
    });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ message: "Erro de validaÃ§Ã£o", errors: error.errors });
    }
    console.error("Erro no login:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const register = async (req: Request, res: Response) => {
  try {
    const data = registerSchema.parse(req.body);
    const email = data.email.toLowerCase();

    // verifica se jÃ¡ existe
    const exists = await pool.request().input("email", email)
      .query("SELECT 1 FROM usuarios WHERE email = @email");
    if (exists.recordset.length > 0) {
      return res.status(409).json({ message: "Email jÃ¡ cadastrado" });
    }

    const senha_hash = await bcrypt.hash(data.senha, 10);
    const permissao = data.permissao.toLowerCase() as Permissao;

    const result = await pool
      .request()
      .input("nome", data.nome)
      .input("email", email)
      .input("senha_hash", senha_hash)
      .input("permissao", permissao)
      .query(
        `INSERT INTO usuarios (nome, email, senha_hash, permissao, ativo)
         OUTPUT INSERTED.id, INSERTED.nome, INSERTED.email, INSERTED.permissao
         VALUES (@nome, @email, @senha_hash, @permissao, 1)`
      );

    res.status(201).json({
      message: "UsuÃ¡rio criado com sucesso!",
      user: result.recordset[0],
    });
  } catch (error: any) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ message: "Erro de validaÃ§Ã£o", errors: error.errors });
    }
    if (error?.number === 2627 || error?.number === 2601) {
      return res.status(409).json({ message: "Email jÃ¡ cadastrado" });
    }
    console.error("Erro no registro:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const me = async (req: AuthenticatedRequest, res: Response) => {
  if (!req.user) return res.status(401).json({ message: "Acesso nÃ£o autorizado" });
  try {
    const result = await pool
      .request()
      .input("id", req.user.id)
      .query("SELECT id, nome, email, permissao, ativo FROM usuarios WHERE id = @id");

    if (result.recordset.length === 0) {
      return res.status(404).json({ message: "UsuÃ¡rio nÃ£o encontrado" });
    }

    const u = result.recordset[0];
    res.json({
      id: u.id,
      nome: u.nome,
      email: u.email,
      permissao: (u.permissao as string).toLowerCase() as Permissao,
      ativo: Boolean(u.ativo),
    });
  } catch (error) {
    console.error("Erro em /auth/me:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};


----- END backend\src\controllers\auth.controller.ts -----


----- BEGIN backend\src\controllers\blocos.controller.ts -----

import { Request, Response } from "express";
import { z } from "zod";
import sql from "mssql";
import { pool } from "../db";
import { AuthenticatedRequest } from "../middleware/auth.middleware";

/* =========================================================
   Helpers
   ========================================================= */

const gerarCodigo = (clienteId: number) =>
  `B${clienteId}-${Date.now().toString(36).toUpperCase()}`;

const TIPOS_SISTEMICOS = [
  "PEDIDO",
  "DEVOLUCAO",
  "BONIFICACAO",
  "DESCONTO A VISTA",
  "TROCA",
] as const;

type TipoSistemico = (typeof TIPOS_SISTEMICOS)[number];

const sentidoBySistemico = (t: TipoSistemico): "ENTRADA" | "SAIDA" => {
  const entradas = new Set<TipoSistemico>(["BONIFICACAO", "DEVOLUCAO"]);
  return entradas.has(t) ? "ENTRADA" : "SAIDA";
};

// aceita ISO, YYYY-MM-DD e DD/MM/YYYY
function toISO(input?: string | null): string | null {
  if (!input) return null;
  const s = String(input).trim();
  if (!s) return null;

  const m1 = s.match(/^(\d{2})\/(\d{2})\/(\d{4})$/); // DD/MM/YYYY
  if (m1) {
    const [, dd, mm, yyyy] = m1;
    const d = new Date(Number(yyyy), Number(mm) - 1, Number(dd));
    return isNaN(d.getTime()) ? null : d.toISOString();
  }

  const m2 = s.match(/^(\d{4})-(\d{2})-(\d{2})$/); // YYYY-MM-DD
  if (m2) {
    const [, yyyy, mm, dd] = m2;
    const d = new Date(Number(yyyy), Number(mm) - 1, Number(dd));
    return isNaN(d.getTime()) ? null : d.toISOString();
  }

  const d = new Date(s);
  return isNaN(d.getTime()) ? null : d.toISOString();
}

function toNumber(val: unknown): number | null {
  if (typeof val === "number") return Number.isFinite(val) ? val : null;
  if (typeof val === "string") {
    const n = Number(val.replace(/\./g, "").replace(",", "."));
    return Number.isFinite(n) ? n : null;
  }
  return null;
}

/* =========================================================
   Schemas
   ========================================================= */

const createBlocoSchema = z.object({
  cliente_id: z.number().int("ID do cliente deve ser um inteiro"),
  codigo: z.string().optional(),
  observacao: z.string().optional(),
});

const LancStatusEnum = z.enum([
  "PENDENTE",
  "LIQUIDADO",
  "DEVOLVIDO",
  "CANCELADO",
  "BAIXADO NO FINANCEIRO",
]);

const addLancamentoSchema = z.object({
  tipo_recebimento: z.string().min(1),
  valor: z.union([z.number(), z.string()]),
  data_lancamento: z.string().min(1),
  bom_para: z.string().optional(),
  tipo_cheque: z.enum(["PROPRIO", "TERCEIRO"]).optional(),
  numero_referencia: z.string().max(60).optional(),
  status: LancStatusEnum.default("PENDENTE"),
  observacao: z.string().optional(),
});

/* =========================================================
   Controllers
   ========================================================= */

export const createBloco = async (req: Request, res: Response) => {
  try {
    const { cliente_id, codigo, observacao } = createBlocoSchema.parse(req.body);
    const finalCodigo = codigo ?? gerarCodigo(cliente_id);

    // garante 1 aberto por cliente
    const aberto = await pool
      .request()
      .input("cliente_id", sql.Int, cliente_id)
      .query(
        `SELECT TOP 1 id FROM blocos WHERE cliente_id=@cliente_id AND status='ABERTO' ORDER BY id DESC;`
      );
    if (aberto.recordset.length) {
      return res.status(409).json({
        message: "JÃ¡ existe um bloco ABERTO para este cliente",
        bloco_aberto_id: aberto.recordset[0].id,
      });
    }

    const tx = pool.transaction();
    await tx.begin();

    try {
      // 1) cria o bloco
      const result = await tx
        .request()
        .input("cliente_id", sql.Int, cliente_id)
        .input("codigo", sql.VarChar(50), finalCodigo)
        .input("observacao", sql.VarChar(sql.MAX), observacao ?? null)
        .query(
          `INSERT INTO blocos (cliente_id, codigo, observacao, status, aberto_em)
           OUTPUT INSERTED.*
           VALUES (@cliente_id, @codigo, @observacao, 'ABERTO', SYSUTCDATETIME())`
        );

      const novoBloco = result.recordset[0] as {
        id: number;
        cliente_id: number;
        status: string;
        codigo: string;
      };

      // 2) Ãºltimo bloco FECHADO do cliente
      const lastClosed = await tx
        .request()
        .input("cliente_id", sql.Int, cliente_id)
        .query(
          `SELECT TOP 1 id
           FROM blocos
           WHERE cliente_id = @cliente_id AND status = 'FECHADO'
           ORDER BY fechado_em DESC, id DESC`
        );

      if (lastClosed.recordset.length) {
        const blocoFechadoId = Number(lastClosed.recordset[0].id);

        // SALDO DO BLOCO (ignora CANCELADO) â†’ SAÃDA + / ENTRADA âˆ’
        const saldoRS = await tx
          .request()
          .input("bid", sql.Int, blocoFechadoId)
          .query(
            `SELECT
               COALESCE(SUM(CASE
                 WHEN status = 'CANCELADO' THEN 0
                 WHEN sentido = 'SAIDA'    THEN  valor
                 WHEN sentido = 'ENTRADA'  THEN -valor
                 ELSE 0
               END), 0) AS saldo
             FROM dbo.bloco_lancamentos
             WHERE bloco_id = @bid`
          );

        const saldoAnterior = Number(saldoRS.recordset[0]?.saldo ?? 0);

        // 3) se houver saldo a carregar, cria "SALDO ANTERIOR" no novo bloco
        if (saldoAnterior !== 0) {
          const sentido = saldoAnterior > 0 ? "SAIDA" : "ENTRADA";
          await tx
            .request()
            .input("bloco_id", sql.Int, novoBloco.id)
            .input("tipo_recebimento", sql.VarChar(30), "SALDO ANTERIOR")
            .input("valor", sql.Decimal(18, 2), Math.abs(saldoAnterior))
            .input("data_lancamento", sql.DateTime2, new Date().toISOString())
            .input("bom_para", sql.DateTime2, null)
            .input("tipo_cheque", sql.VarChar(15), null)
            .input("numero_referencia", sql.VarChar(60), `ANT-${blocoFechadoId}`)
            .input("status", sql.VarChar(30), "PENDENTE")
            .input("observacao", sql.VarChar(sql.MAX), `Saldo anterior do bloco #${blocoFechadoId}`)
            .input("sentido", sql.VarChar(10), sentido)
            .input("criado_por", sql.Int, null)
            .query(
              `INSERT INTO bloco_lancamentos
                 (bloco_id, tipo_recebimento, valor, data_lancamento, bom_para, tipo_cheque,
                  numero_referencia, status, observacao, sentido, criado_por, criado_em)
               VALUES
                 (@bloco_id, @tipo_recebimento, @valor, @data_lancamento, @bom_para, @tipo_cheque,
                  @numero_referencia, @status, @observacao, @sentido, @criado_por, SYSUTCDATETIME())`
            );
        }
      }

      await tx.commit();
      return res.status(201).json(novoBloco);
    } catch (e) {
      await tx.rollback();
      throw e;
    }
  } catch (error: any) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ message: "Erro de validaÃ§Ã£o", errors: error.errors });
    }
    if (error?.number === 2627) {
      return res.status(409).json({ message: "JÃ¡ existe um bloco ABERTO com este cÃ³digo para o cliente" });
    }
    console.error("Erro ao criar bloco:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/** Vincular pedido ao bloco (mantido) */
export const addPedidoToBloco = async (_req: Request, res: Response) => {
  return res.status(501).json({ message: "NÃ£o alterado aqui. Mantenha seu handler original." });
};

/**
 * Adiciona lanÃ§amento no bloco.
 * Se for SAÃDA + bom_para â†’ cria tÃ­tulo em financeiro_titulos.
 */
export const addLancamentoToBloco = async (req: AuthenticatedRequest, res: Response) => {
  const { id: bloco_id } = req.params;

  try {
    const raw = addLancamentoSchema.parse(req.body);

    // 1) bloco
    const bq = await pool
      .request()
      .input("bloco_id", sql.Int, +bloco_id)
      .query("SELECT id, status, cliente_id FROM blocos WHERE id = @bloco_id");
    if (!bq.recordset.length) return res.status(404).json({ message: "Bloco nÃ£o encontrado" });
    if (String(bq.recordset[0].status) !== "ABERTO")
      return res.status(400).json({ message: "NÃ£o Ã© possÃ­vel adicionar lanÃ§amento em bloco FECHADO" });
    const clienteIdDoBloco = Number(bq.recordset[0].cliente_id);

    // 2) normalizaÃ§Ãµes
    const valor = toNumber(raw.valor);
    if (valor === null || valor <= 0) return res.status(400).json({ message: "Informe um valor vÃ¡lido (> 0)." });

    const dataISO = toISO(raw.data_lancamento);
    if (!dataISO) return res.status(400).json({ message: "Data invÃ¡lida." });

    const bomParaISO = raw.bom_para ? toISO(raw.bom_para) : null;

    // 3) resolve tipo/sentido via parÃ¢metros
    const tipoStr = String(raw.tipo_recebimento).trim().toUpperCase();

    let sentido: "ENTRADA" | "SAIDA" | null = null;
    let exigeBomPara = false;
    let exigeTipoCheque = false;

    // 3.1 tenta em pedido_parametros (fonte oficial)
    try {
      const paramRS = await pool
        .request()
        .input("desc", sql.VarChar(120), tipoStr)
        .query(
          `SELECT TOP 1 tipo, exige_bom_para, exige_tipo_cheque
           FROM dbo.pedido_parametros
           WHERE UPPER(descricao) = @desc AND ativo = 1`
        );
      if (paramRS.recordset.length) {
        const row = paramRS.recordset[0] as any;
        sentido = String(row.tipo || "").toUpperCase() === "SAIDA" ? "SAIDA" : "ENTRADA";
        exigeBomPara = !!row.exige_bom_para;
        exigeTipoCheque = !!row.exige_tipo_cheque;
      }
    } catch {}

    // 3.2 Fallback explÃ­cito
    if (!sentido) {
      const tiposSaidaComBomPara = new Set(["CHEQUE", "BOLETO"]);
      if (tiposSaidaComBomPara.has(tipoStr)) {
        sentido = "SAIDA";
        exigeBomPara = true;
        exigeTipoCheque = tipoStr === "CHEQUE";
      }
    }

    // 3.3 Ãšltimo fallback (sistÃªmicos)
    if (!sentido) {
      if ((TIPOS_SISTEMICOS as ReadonlyArray<string>).includes(tipoStr)) {
        sentido = sentidoBySistemico(tipoStr as TipoSistemico);
      } else {
        return res.status(400).json({
          message:
            "Tipo invÃ¡lido. Cadastre em 'ParÃ¢metros do pedido' (com tipo/flags) ou use um tipo padrÃ£o reconhecido (CHEQUE/BOLETO/etc).",
        });
      }
    }

    if (exigeBomPara && !bomParaISO) return res.status(400).json({ message: "Este tipo exige 'bom_para'." });
    if (exigeTipoCheque && !raw.tipo_cheque) return res.status(400).json({ message: "Informe 'tipo_cheque'." });

    const tipoCheque = exigeTipoCheque ? (raw.tipo_cheque ?? null) : null;
    const userId = req.user?.id ?? 0;

    // 4) insere lanÃ§amento no bloco
    const insertLanc = await pool
      .request()
      .input("bloco_id", sql.Int, +bloco_id)
      .input("tipo_recebimento", sql.VarChar(30), tipoStr)
      .input("valor", sql.Decimal(18, 2), valor)
      .input("data_lancamento", sql.DateTime2, dataISO)
      .input("bom_para", sql.DateTime2, bomParaISO)
      .input("tipo_cheque", sql.VarChar(15), tipoCheque)
      .input("numero_referencia", sql.VarChar(60), raw.numero_referencia ?? null)
      .input("status", sql.VarChar(30), raw.status)
      .input("observacao", sql.VarChar(sql.MAX), raw.observacao ?? null)
      .input("sentido", sql.VarChar(10), sentido)
      .input("criado_por", sql.Int, userId)
      .query(
        `INSERT INTO bloco_lancamentos
           (bloco_id, tipo_recebimento, valor, data_lancamento, bom_para, tipo_cheque,
            numero_referencia, status, observacao, sentido, criado_por, criado_em)
         OUTPUT INSERTED.*
         VALUES
           (@bloco_id, @tipo_recebimento, @valor, @data_lancamento, @bom_para, @tipo_cheque,
            @numero_referencia, @status, @observacao, @sentido, @criado_por, SYSUTCDATETIME())`
      );

    const lanc = insertLanc.recordset[0];

    // 5) SAÃDA + bom_para => cria TÃ­tulo no Financeiro
    if (sentido === "SAIDA" && bomParaISO) {
      try {
        // tentativa com bloco_lanc_id (bancos novos)
        try {
          const insTit = await pool
            .request()
            .input("cliente_id", sql.Int, clienteIdDoBloco)
            .input("tipo", sql.VarChar(20), tipoStr)
            .input("forma_id", sql.Int, null)
            .input("numero_doc", sql.VarChar(80), raw.numero_referencia ?? null)
            .input("banco", sql.VarChar(40), null)
            .input("agencia", sql.VarChar(20), null)
            .input("conta", sql.VarChar(30), null)
            .input("bom_para", sql.DateTime2, bomParaISO)
            .input("valor_bruto", sql.Decimal(18, 2), valor)
            .input("valor_baixado", sql.Decimal(18, 2), 0)
            .input("status", sql.VarChar(20), "ABERTO")
            .input("observacao", sql.VarChar(400), raw.observacao ?? null)
            .input("bloco_id", sql.Int, +bloco_id)
            .input("bloco_lanc_id", sql.Int, Number(lanc.id) || null)
            .input("created_by", sql.Int, userId)
            .query(
              `INSERT INTO dbo.financeiro_titulos
                 (cliente_id, tipo, forma_id, numero_doc, banco, agencia, conta, bom_para,
                  valor_bruto, valor_baixado, status, observacao, bloco_id, bloco_lanc_id,
                  created_by, created_at)
               OUTPUT INSERTED.id
               VALUES
                 (@cliente_id, @tipo, @forma_id, @numero_doc, @banco, @agencia, @conta, @bom_para,
                  @valor_bruto, @valor_baixado, @status, @observacao, @bloco_id, @bloco_lanc_id,
                  @created_by, SYSUTCDATETIME());`
            );
          (lanc as any).titulo_id = insTit.recordset[0]?.id ?? null;
        } catch (err: any) {
          // fallback: banco antigo (sem bloco_lanc_id)
          const msg = String(err?.message || "");
          const number = (err?.number ?? err?.originalError?.number) as number | undefined;
          const invalidColumn =
            number === 207 || /Invalid column name/i.test(msg) || /bloco_lanc_id/i.test(msg);

          if (!invalidColumn) throw err;

          const insTit2 = await pool
            .request()
            .input("cliente_id", sql.Int, clienteIdDoBloco)
            .input("tipo", sql.VarChar(20), tipoStr)
            .input("forma_id", sql.Int, null)
            .input("numero_doc", sql.VarChar(80), raw.numero_referencia ?? null)
            .input("banco", sql.VarChar(40), null)
            .input("agencia", sql.VarChar(20), null)
            .input("conta", sql.VarChar(30), null)
            .input("bom_para", sql.DateTime2, bomParaISO)
            .input("valor_bruto", sql.Decimal(18, 2), valor)
            .input("valor_baixado", sql.Decimal(18, 2), 0)
            .input("status", sql.VarChar(20), "ABERTO")
            .input("observacao", sql.VarChar(400), raw.observacao ?? null)
            .input("bloco_id", sql.Int, +bloco_id)
            .input("created_by", sql.Int, userId)
            .query(
              `INSERT INTO dbo.financeiro_titulos
                 (cliente_id, tipo, forma_id, numero_doc, banco, agencia, conta, bom_para,
                  valor_bruto, valor_baixado, status, observacao, bloco_id, created_by, created_at)
               OUTPUT INSERTED.id
               VALUES
                 (@cliente_id, @tipo, @forma_id, @numero_doc, @banco, @agencia, @conta, @bom_para,
                  @valor_bruto, @valor_baixado, @status, @observacao, @bloco_id, @created_by, SYSUTCDATETIME());`
            );
          (lanc as any).titulo_id = insTit2.recordset[0]?.id ?? null;
        }
      } catch (e) {
        console.error("Falha ao criar tÃ­tulo financeiro (financeiro_titulos):", e);
        // nÃ£o falha o endpoint; o lanÃ§amento do bloco foi criado
      }
    }

    return res.status(201).json(lanc);
  } catch (error: any) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ message: "Erro de validaÃ§Ã£o", errors: error.errors });
    }
    console.error("Erro ao adicionar lanÃ§amento ao bloco:", error);
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/** Saldo legado (mantido, agora ignorando CANCELADO) */
export const getBlocoSaldo = async (req: Request, res: Response) => {
  const { id } = req.params;
  try {
    const rs = await pool
      .request()
      .input("bloco_id", sql.Int, +id)
      .query(
        `SELECT
           @bloco_id AS bloco_id,
           COALESCE(SUM(CASE
             WHEN status='CANCELADO' THEN 0
             WHEN sentido='SAIDA'    THEN  valor
             WHEN sentido='ENTRADA'  THEN -valor
             ELSE 0
           END),0) AS saldo
         FROM dbo.bloco_lancamentos
         WHERE bloco_id = @bloco_id`
      );

    const exists = await pool.request()
      .input("bloco_id", sql.Int, +id)
      .query(`SELECT 1 FROM blocos WHERE id = @bloco_id`);
    if (!exists.recordset.length) {
      return res.status(404).json({ message: "Bloco nÃ£o encontrado" });
    }

    res.json(rs.recordset[0]);
  } catch (error) {
    console.error("Erro ao buscar saldo do bloco:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/**
 * Saldos:
 * - saldo_bloco      = TODAS as movimentaÃ§Ãµes (inclui bom_para) â†’ SAÃDA - ENTRADA (ignorando CANCELADO)
 * - saldo_imediato   = SOMENTE movimentaÃ§Ãµes imediatas (bom_para IS NULL, ignorando CANCELADO)
 * - a_receber        = Î£ (valor_bruto - valor_baixado) dos tÃ­tulos ABERTO/PARCIAL do bloco
 * - saldo_financeiro = saldo_imediato + Î£ valor_baixado de tÃ­tulos do bloco
 */
export const getBlocoSaldos = async (req: Request, res: Response) => {
  const { id } = req.params;
  try {
    const exists = await pool.request()
      .input("bloco_id", sql.Int, +id)
      .query(`SELECT TOP 1 id, cliente_id FROM blocos WHERE id = @bloco_id`);
    if (!exists.recordset.length) {
      return res.status(404).json({ message: "Bloco nÃ£o encontrado" });
    }

    // saldo do bloco (todas as movimentaÃ§Ãµes)
    const saldoBlocoRS = await pool
      .request()
      .input("bloco_id", sql.Int, +id)
      .query(
        `SELECT
           COALESCE(SUM(CASE
             WHEN status='CANCELADO' THEN 0
             WHEN sentido='SAIDA'    THEN  valor
             WHEN sentido='ENTRADA'  THEN -valor
             ELSE 0
           END),0) AS saldo_bloco
         FROM dbo.bloco_lancamentos
         WHERE bloco_id = @bloco_id`
      );
    const saldo_bloco = Number(saldoBlocoRS.recordset[0]?.saldo_bloco ?? 0);

    // saldo imediato (ignora bom_para)
    const saldoImediatoRS = await pool
      .request()
      .input("bloco_id", sql.Int, +id)
      .query(
        `SELECT
           COALESCE(SUM(CASE
             WHEN status='CANCELADO' THEN 0
             WHEN bom_para IS NULL AND sentido='SAIDA'   THEN  valor
             WHEN bom_para IS NULL AND sentido='ENTRADA' THEN -valor
             ELSE 0
           END),0) AS saldo_imediato
         FROM dbo.bloco_lancamentos
         WHERE bloco_id = @bloco_id`
      );
    const saldo_imediato = Number(saldoImediatoRS.recordset[0]?.saldo_imediato ?? 0);

    // a receber (tÃ­tulos do bloco)
    const aRecRS = await pool
      .request()
      .input("bloco_id", sql.Int, +id)
      .query(
        `SELECT COALESCE(SUM(valor_bruto - valor_baixado), 0) AS a_receber
         FROM dbo.financeiro_titulos
         WHERE bloco_id = @bloco_id
           AND status IN ('ABERTO','PARCIAL')`
      );
    const a_receber = Number(aRecRS.recordset[0]?.a_receber ?? 0);

    // tÃ­tulos baixados (somatÃ³rio do que entrou via baixa)
    const baixadosRS = await pool
      .request()
      .input("bloco_id", sql.Int, +id)
      .query(
        `SELECT COALESCE(SUM(valor_baixado), 0) AS total_baixado
         FROM dbo.financeiro_titulos
         WHERE bloco_id = @bloco_id
           AND valor_baixado > 0`
      );
    const total_baixado = Number(baixadosRS.recordset[0]?.total_baixado ?? 0);

    const saldo_financeiro = saldo_imediato + total_baixado;

    res.json({ bloco_id: Number(id), saldo_bloco, saldo_imediato, a_receber, saldo_financeiro });
  } catch (error) {
    console.error("Erro em getBlocoSaldos:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const fecharBloco = async (req: Request, res: Response) => {
  const { id } = req.params;
  try {
    // existÃªncia
    const bx = await pool.request().input("bloco_id", sql.Int, +id)
      .query(`SELECT TOP 1 id, cliente_id, status FROM dbo.blocos WHERE id = @bloco_id`);
    if (!bx.recordset.length) return res.status(404).json({ message: "Bloco nÃ£o encontrado" });

    const result = await pool
      .request()
      .input("id", sql.Int, +id)
      .query(
        `UPDATE blocos
         SET status = 'FECHADO', fechado_em = SYSUTCDATETIME()
         OUTPUT INSERTED.*
         WHERE id = @id AND status = 'ABERTO'`
      );

    if (!result.recordset.length) {
      return res.status(404).json({ message: "Bloco nÃ£o encontrado ou jÃ¡ estÃ¡ fechado" });
    }

    // recalcula saldos no momento do fechamento (CANCELADO ignorado)
    const [sb, si, ar, tb] = await Promise.all([
      pool.request().input("bloco_id", sql.Int, +id).query(`
        SELECT COALESCE(SUM(CASE
          WHEN status='CANCELADO' THEN 0
          WHEN sentido='SAIDA'    THEN  valor
          WHEN sentido='ENTRADA'  THEN -valor
          ELSE 0 END),0) AS v
        FROM dbo.bloco_lancamentos WHERE bloco_id=@bloco_id`),
      pool.request().input("bloco_id", sql.Int, +id).query(`
        SELECT COALESCE(SUM(CASE
          WHEN status='CANCELADO' THEN 0
          WHEN bom_para IS NULL AND sentido='SAIDA'   THEN  valor
          WHEN bom_para IS NULL AND sentido='ENTRADA' THEN -valor
          ELSE 0 END),0) AS v
        FROM dbo.bloco_lancamentos WHERE bloco_id=@bloco_id`),
      pool.request().input("bloco_id", sql.Int, +id).query(`
        SELECT COALESCE(SUM(valor_bruto - valor_baixado),0) AS v
        FROM dbo.financeiro_titulos
        WHERE bloco_id=@bloco_id AND status IN ('ABERTO','PARCIAL')`),
      pool.request().input("bloco_id", sql.Int, +id).query(`
        SELECT COALESCE(SUM(valor_baixado),0) AS v
        FROM dbo.financeiro_titulos
        WHERE bloco_id=@bloco_id AND valor_baixado>0`)
    ]);

    const saldo_bloco      = Number(sb.recordset[0]?.v ?? 0);
    const saldo_imediato   = Number(si.recordset[0]?.v ?? 0);
    const a_receber        = Number(ar.recordset[0]?.v ?? 0);
    const total_baixado    = Number(tb.recordset[0]?.v ?? 0);
    const saldo_financeiro = saldo_imediato + total_baixado;

    res.json({
      ...result.recordset[0],
      saldos: { saldo_bloco, saldo_imediato, a_receber, total_baixado, saldo_financeiro },
    });
  } catch (error) {
    console.error("Erro ao fechar bloco:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/* ===== Listagens (mantidas) ===== */

const listBlocosQuerySchema = z.object({
  page: z.coerce.number().int().positive().default(1),
  limit: z.coerce.number().int().positive().max(200).default(20),
  status: z.enum(["ABERTO", "FECHADO"]).optional(),
  cliente_id: z.coerce.number().int().optional(),
  cliente: z.string().trim().optional(),
  search: z.string().trim().optional(),
});

export const listBlocos = async (req: Request, res: Response) => {
  try {
    const { page, limit, status, cliente_id, cliente, search } =
      listBlocosQuerySchema.parse(req.query);
    const offset = (page - 1) * limit;

    const where: string[] = [];
    if (status) where.push("b.status = @status");
    if (cliente_id) where.push("b.cliente_id = @cliente_id");
    if (cliente) where.push("c.nome_fantasia LIKE '%' + @cliente + '%'");
    if (search) where.push("(b.codigo LIKE '%' + @search + '%')");

    const whereSql = where.length ? `WHERE ${where.join(" AND ")}` : "";

    const totalReq = pool.request();
    if (status) totalReq.input("status", status);
    if (cliente_id) totalReq.input("cliente_id", cliente_id);
    if (cliente) totalReq.input("cliente", cliente);
    if (search) totalReq.input("search", search);

    const totalRs = await totalReq.query(
      `SELECT COUNT(*) AS total
       FROM blocos b
       LEFT JOIN clientes c ON c.id = b.cliente_id
       ${whereSql}`
    );
    const total = Number(totalRs.recordset[0]?.total ?? 0);

    const pageReq = pool.request().input("limit", limit).input("offset", offset);
    if (status) pageReq.input("status", status);
    if (cliente_id) pageReq.input("cliente_id", cliente_id);
    if (cliente) pageReq.input("cliente", cliente);
    if (search) pageReq.input("search", search);

    const rs = await pageReq.query(
      `SELECT
         b.id, b.codigo, b.status, b.cliente_id, c.nome_fantasia AS cliente_nome,
         b.aberto_em, b.fechado_em, b.observacao
       FROM blocos b
       LEFT JOIN clientes c ON c.id = b.cliente_id
       ${whereSql}
       ORDER BY b.id DESC
       OFFSET @offset ROWS FETCH NEXT @limit ROWS ONLY;`
    );

    return res.json({ data: rs.recordset, page, limit, total });
  } catch (err) {
    console.error("Erro em listBlocos:", err);
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const getBlocoById = async (req: Request, res: Response) => {
  try {
    const bloco_id = +req.params.id;

    const rs = await pool
      .request()
      .input("id", bloco_id)
      .query(
        `SELECT
           b.id, b.codigo, b.status, b.cliente_id, c.nome_fantasia AS cliente_nome,
           b.aberto_em, b.fechado_em, b.observacao
         FROM blocos b
         LEFT JOIN clientes c ON c.id = b.cliente_id
         WHERE b.id = @id`
      );

    if (!rs.recordset.length) {
      return res.status(404).json({ message: "Bloco nÃ£o encontrado" });
    }
    return res.json(rs.recordset[0]);
  } catch (err) {
    console.error("Erro em getBlocoById:", err);
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
};

const listLancQuerySchema = z.object({
  page: z.coerce.number().int().positive().default(1),
  limit: z.coerce.number().int().positive().max(200).default(50),
  status: z.enum(["PENDENTE","LIQUIDADO","DEVOLVIDO","CANCELADO","BAIXADO NO FINANCEIRO"]).optional(),
  tipo: z.string().optional(),
});

export const listLancamentosDoBloco = async (req: Request, res: Response) => {
  try {
    const bloco_id = +req.params.id;
    const { page, limit, status, tipo } = listLancQuerySchema.parse(req.query);
    const offset = (page - 1) * limit;

    const where: string[] = ["l.bloco_id = @bloco_id"];
    const reqDb = pool.request().input("bloco_id", bloco_id);
    if (status) { where.push("l.status = @status"); reqDb.input("status", status); }
    if (tipo)   { where.push("l.tipo_recebimento = @tipo"); reqDb.input("tipo", tipo.toUpperCase()); }
    const whereSql = `WHERE ${where.join(" AND ")}`;

    const totalRs = await reqDb.query(
      `SELECT COUNT(*) AS total
       FROM bloco_lancamentos l
       ${whereSql}`
    );
    const total = Number(totalRs.recordset[0]?.total ?? 0);

    const pageReq = pool
      .request()
      .input("bloco_id", bloco_id).input("limit", limit).input("offset", offset);
    if (status) pageReq.input("status", status);
    if (tipo) pageReq.input("tipo", tipo.toUpperCase());

    const rs = await pageReq.query(
      `SELECT
         l.id, l.bloco_id, l.tipo_recebimento, l.sentido, l.valor,
         l.data_lancamento, l.bom_para, l.tipo_cheque, l.numero_referencia,
         l.status, l.observacao, l.criado_por, l.criado_em,
         l.referencia_pedido_id, l.referencia_lancamento_id,
         u.nome AS criado_por_nome
       FROM bloco_lancamentos l
       LEFT JOIN dbo.usuarios u ON u.id = l.criado_por
       ${whereSql}
       ORDER BY l.id DESC
       OFFSET @offset ROWS FETCH NEXT @limit ROWS ONLY`
    );

    return res.json({ data: rs.recordset, page, limit, total });
  } catch (err) {
    console.error("Erro em listLancamentosDoBloco:", err);
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/* Excluir lanÃ§amento: ver regras no comentÃ¡rio */
export const deleteLancamento = async (req: Request, res: Response) => {
  const bloco_id = +req.params.id;
  const lanc_id = +req.params.lanc_id;

  if (!Number.isFinite(bloco_id) || !Number.isFinite(lanc_id)) {
    return res.status(400).json({ message: "ParÃ¢metros invÃ¡lidos" });
  }

  try {
    const blocoRS = await pool.request().input("id", sql.Int, bloco_id)
      .query(`SELECT id, status FROM blocos WHERE id = @id`);
    if (!blocoRS.recordset.length) return res.status(404).json({ message: "Bloco nÃ£o encontrado" });
    if (String(blocoRS.recordset[0].status) !== "ABERTO") {
      return res.status(400).json({ message: "NÃ£o Ã© possÃ­vel excluir lanÃ§amento de bloco FECHADO" });
    }

    const lancRS = await pool.request()
      .input("id", sql.Int, lanc_id)
      .input("bloco_id", sql.Int, bloco_id)
      .query(
        `SELECT id, bloco_id, bom_para
         FROM bloco_lancamentos
         WHERE id = @id AND bloco_id = @bloco_id`
      );
    if (!lancRS.recordset.length) return res.status(404).json({ message: "LanÃ§amento nÃ£o encontrado" });

    const bom_para = lancRS.recordset[0].bom_para as Date | null;
    if (bom_para) {
      return res.status(409).json({
        message:
          "Este lanÃ§amento possui 'bom para' (gera/gerou TÃ­tulo a receber). Exclua/ajuste o tÃ­tulo correspondente antes de remover o lanÃ§amento."
      });
    }

    await pool.request()
      .input("id", sql.Int, lanc_id)
      .input("bloco_id", sql.Int, bloco_id)
      .query(`DELETE FROM bloco_lancamentos WHERE id = @id AND bloco_id = @bloco_id`);

    return res.status(204).send();
  } catch (err) {
    console.error("Erro em deleteLancamento:", err);
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const listPedidosDoBloco = async (_req: Request, res: Response) => {
  return res.status(501).json({ message: "NÃ£o alterado aqui. Mantenha seu handler original." });
};

export const unlinkPedido = async (_req: AuthenticatedRequest, res: Response) => {
  return res.status(501).json({ message: "NÃ£o alterado aqui. Mantenha seu handler original." });
};


----- END backend\src\controllers\blocos.controller.ts -----


----- BEGIN backend\src\controllers\cheques.controller.ts -----

import { Request, Response } from "express";
import { z } from "zod";
import { pool } from "../db";
import sql from "mssql";

const dateOnly = z.string().regex(/^\d{4}-\d{2}-\d{2}$/, "Use YYYY-MM-DD");

// filtros de listagem (mantendo status e cliente_id; datas viram DATE)
const listQuerySchema = z.object({
  page: z.coerce.number().int().positive().default(1),
  limit: z.coerce.number().int().positive().max(200).default(50),
  status: z.enum(["PENDENTE", "LIQUIDADO", "DEVOLVIDO", "CANCELADO"]).optional(),
  cliente_id: z.coerce.number().int().optional(),
  bom_para_de: dateOnly.optional(),
  bom_para_ate: dateOnly.optional(),
  q: z.string().trim().optional(), // busca em numero_referencia / observacao
});

export const getCheques = async (req: Request, res: Response) => {
  try {
    const { page, limit, status, cliente_id, bom_para_de, bom_para_ate, q } =
      listQuerySchema.parse(req.query);
    const offset = (page - 1) * limit;

    const where: string[] = ["bl.tipo_recebimento = 'CHEQUE'"];
    const reqCount = pool.request();
    const reqPage = pool.request();

    if (status) {
      where.push("bl.status = @status");
      reqCount.input("status", sql.VarChar(15), status);
      reqPage.input("status", sql.VarChar(15), status);
    }
    if (cliente_id) {
      where.push("b.cliente_id = @cliente_id");
      reqCount.input("cliente_id", sql.Int, cliente_id);
      reqPage.input("cliente_id", sql.Int, cliente_id);
    }
    if (bom_para_de) {
      where.push("bl.bom_para >= @bom_para_de");
      reqCount.input("bom_para_de", sql.Date, bom_para_de);
      reqPage.input("bom_para_de", sql.Date, bom_para_de);
    }
    if (bom_para_ate) {
      where.push("bl.bom_para <= @bom_para_ate");
      reqCount.input("bom_para_ate", sql.Date, bom_para_ate);
      reqPage.input("bom_para_ate", sql.Date, bom_para_ate);
    }
    if (q) {
      where.push("(bl.numero_referencia LIKE '%' + @q + '%' OR bl.observacao LIKE '%' + @q + '%')");
      reqCount.input("q", sql.VarChar(60), q);
      reqPage.input("q", sql.VarChar(60), q);
    }

    const whereSql = where.length ? `WHERE ${where.join(" AND ")}` : "";

    const countSql = `
      SELECT COUNT(*) AS total
        FROM bloco_lancamentos bl
        JOIN blocos b   ON bl.bloco_id = b.id
        JOIN clientes c ON b.cliente_id = c.id
      ${whereSql}
    `;

    const pageSql = `
      SELECT bl.*,
             c.nome_fantasia,
             b.cliente_id,
             b.codigo AS codigo_bloco
        FROM bloco_lancamentos bl
        JOIN blocos b   ON bl.bloco_id = b.id
        JOIN clientes c ON b.cliente_id = c.id
      ${whereSql}
      ORDER BY
        CASE WHEN bl.bom_para IS NULL THEN 1 ELSE 0 END,  -- nulos por Ãºltimo
        bl.bom_para ASC,
        bl.id DESC
      OFFSET @offset ROWS FETCH NEXT @limit ROWS ONLY
    `;

    reqPage.input("offset", sql.Int, offset).input("limit", sql.Int, limit);

    const [countRs, pageRs] = await Promise.all([
      reqCount.query(countSql),
      reqPage.query(pageSql),
    ]);

    res.json({
      data: pageRs.recordset,
      total: Number(countRs.recordset[0]?.total ?? 0),
      page,
      limit,
    });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res
        .status(400)
        .json({ message: "Erro de validaÃ§Ã£o", errors: error.errors });
    }
    console.error("Erro ao buscar cheques:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

const idParamSchema = z.object({ id: z.coerce.number().int().positive() });

async function ensureCheque(id: number) {
  const rs = await pool
    .request()
    .input("id", sql.Int, id)
    .query(
      `SELECT id, status, tipo_recebimento
         FROM bloco_lancamentos
        WHERE id = @id`
    );
  const row = rs.recordset[0];
  if (!row) return { ok: false as const, error: "not_found" as const };
  if (row.tipo_recebimento !== "CHEQUE")
    return { ok: false as const, error: "not_cheque" as const };
  return { ok: true as const, row };
}

export const liquidarCheque = async (req: Request, res: Response) => {
  try {
    const { id } = idParamSchema.parse(req.params);
    const chk = await ensureCheque(id);
    if (!chk.ok) {
      if (chk.error === "not_found")
        return res.status(404).json({ message: "LanÃ§amento nÃ£o encontrado" });
      return res.status(400).json({ message: "LanÃ§amento nÃ£o Ã© um CHEQUE" });
    }
    if (chk.row.status === "LIQUIDADO")
      return res.status(409).json({ message: "Cheque jÃ¡ liquidado" });
    if (chk.row.status === "CANCELADO")
      return res.status(409).json({ message: "Cheque cancelado" });

    const rs = await pool
      .request()
      .input("id", sql.Int, id)
      .query(`
        UPDATE bloco_lancamentos
           SET status = 'LIQUIDADO'
         OUTPUT INSERTED.*
         WHERE id = @id AND tipo_recebimento = 'CHEQUE'
      `);

    res.json(rs.recordset[0]);
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res
        .status(400)
        .json({ message: "Erro de validaÃ§Ã£o", errors: error.errors });
    }
    console.error("Erro ao liquidar cheque:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const devolverCheque = async (req: Request, res: Response) => {
  try {
    const { id } = idParamSchema.parse(req.params);
    const chk = await ensureCheque(id);
    if (!chk.ok) {
      if (chk.error === "not_found")
        return res.status(404).json({ message: "LanÃ§amento nÃ£o encontrado" });
      return res.status(400).json({ message: "LanÃ§amento nÃ£o Ã© um CHEQUE" });
    }
    if (chk.row.status === "DEVOLVIDO")
      return res.status(409).json({ message: "Cheque jÃ¡ devolvido" });
    if (chk.row.status === "CANCELADO")
      return res.status(409).json({ message: "Cheque cancelado" });

    const rs = await pool
      .request()
      .input("id", sql.Int, id)
      .query(`
        UPDATE bloco_lancamentos
           SET status = 'DEVOLVIDO'
         OUTPUT INSERTED.*
         WHERE id = @id AND tipo_recebimento = 'CHEQUE'
      `);

    res.json(rs.recordset[0]);
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res
        .status(400)
        .json({ message: "Erro de validaÃ§Ã£o", errors: error.errors });
    }
    console.error("Erro ao devolver cheque:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};


----- END backend\src\controllers\cheques.controller.ts -----


----- BEGIN backend\src\controllers\clientes.controller.ts -----

import { Request, Response } from "express";
import { z } from "zod";
import sql from "mssql";
import { pool } from "../db";

/* ========================= Utils ========================= */
const onlyDigits = (s: string) => String(s || "").replace(/\D+/g, "");

// map 'tipo_nota' para o que o banco aceita (CHECK: 'MEIA' | 'INTEGRAL')
const mapTipoNotaDb = (v?: string | null): "MEIA" | "INTEGRAL" => {
  const s = String(v ?? "").trim().toUpperCase();
  if (s === "MEIA" || s === "MEIA-ENTRADA" || s === "MEIA ENTRADA") return "MEIA";
  return "INTEGRAL"; // fallback seguro
};

/* ========================= LISTAGEM / BUSCA ========================= */

export const getClientes = async (req: Request, res: Response) => {
  const { page = 1, limit = 10, search = "", q = "", status = "", tabelaPreco = "" } = req.query;

  const pageNumber = Math.max(1, Number(page));
  const limitNumber = Math.min(200, Number(limit));
  const offset = (pageNumber - 1) * limitNumber;

  try {
    const where: string[] = [];
    const request = pool.request();
    const countRequest = pool.request();

    const term =
      typeof q === "string" && q.trim() !== "" ? q : typeof search === "string" ? search : "";
    if (term && term.trim() !== "") {
      where.push("(nome_fantasia LIKE '%' + @search + '%')");
      request.input("search", term);
      countRequest.input("search", term);
    }

    if (typeof status === "string" && (status === "ATIVO" || status === "INATIVO")) {
      where.push("status = @status");
      request.input("status", status);
      countRequest.input("status", status);
    }

    if (typeof tabelaPreco === "string" && tabelaPreco.trim() !== "") {
      where.push("tabela_preco = @tabelaPreco");
      request.input("tabelaPreco", tabelaPreco.trim());
      countRequest.input("tabelaPreco", tabelaPreco.trim());
    }

    const whereSql = where.length ? `WHERE ${where.join(" AND ")}` : "";

    const query = `
      SELECT id, nome_fantasia, grupo_empresa, tabela_preco, status, whatsapp, anotacoes, links_json
      FROM clientes
      ${whereSql}
      ORDER BY nome_fantasia
      OFFSET @offset ROWS FETCH NEXT @limit ROWS ONLY
    `;
    const countQuery = `SELECT COUNT(*) as total FROM clientes ${whereSql}`;

    request.input("offset", offset).input("limit", limitNumber);

    const [list, total] = await Promise.all([request.query(query), countRequest.query(countQuery)]);

    res.json({
      data: list.recordset,
      total: Number(total.recordset[0]?.total ?? 0),
      page: pageNumber,
      limit: limitNumber,
    });
  } catch (error) {
    console.error("Erro ao buscar clientes:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/* ============= Helper de saldos (AGORA consolidado por cliente) ============= */
/**
 * DefiniÃ§Ãµes:
 * - saldo_bloco (cliente): soma SAÃDA(+) / ENTRADA(âˆ’) de TODOS os blocos ABERTOS do cliente.
 * - financeiro (cliente): IMEDIATOS (bom_para IS NULL) dos blocos ABERTOS + TODOS os tÃ­tulos BAIXADOS do cliente (qualquer bloco).
 * - a_receber (cliente): TODOS os tÃ­tulos em ABERTO/PARCIAL do cliente (qualquer bloco).
 */
/* ============= Helper de saldos (ajustado) ============= */
async function calcularSaldosCliente(clienteId: number) {
  // 1) Saldo do(s) bloco(s) ABERTO(s): SAÃDA + / ENTRADA âˆ’
  const sb = await pool
    .request()
    .input("id", sql.Int, clienteId)
    .query(`
      ;WITH open_bloco AS (
        SELECT id FROM dbo.blocos WHERE cliente_id = @id AND status = 'ABERTO'
      )
      SELECT COALESCE(SUM(
        CASE
          WHEN l.status = 'CANCELADO' THEN 0
          WHEN l.sentido = 'SAIDA'    THEN l.valor
          WHEN l.sentido = 'ENTRADA'  THEN -l.valor
          ELSE 0
        END
      ),0) AS saldo_bloco
      FROM open_bloco b
      LEFT JOIN dbo.bloco_lancamentos l ON l.bloco_id = b.id
    `);

  const saldo_bloco = Number(sb.recordset[0]?.saldo_bloco ?? 0);

  // 2) Financeiro = (imediatos do(s) bloco(s) ABERTO(s), exceto "SALDO ANTERIOR") + (baixas do(s) bloco(s) ABERTO(s))
  const fi = await pool
    .request()
    .input("id", sql.Int, clienteId)
    .query(`
      ;WITH open_bloco AS (
        SELECT id FROM dbo.blocos WHERE cliente_id = @id AND status = 'ABERTO'
      )
      SELECT
        -- imediatos (bom_para IS NULL), EXCLUINDO "SALDO ANTERIOR" (nome ou ref ANT-*)
        COALESCE((
          SELECT SUM(CASE
            WHEN l.status='CANCELADO' THEN 0
            WHEN l.bom_para IS NULL AND l.sentido='SAIDA'   THEN l.valor
            WHEN l.bom_para IS NULL AND l.sentido='ENTRADA' THEN -l.valor
            ELSE 0
          END)
          FROM open_bloco b
          JOIN dbo.bloco_lancamentos l ON l.bloco_id = b.id
          WHERE l.bom_para IS NULL
            AND UPPER(LTRIM(RTRIM(l.tipo_recebimento))) <> 'SALDO ANTERIOR'
            AND (l.numero_referencia IS NULL OR l.numero_referencia NOT LIKE 'ANT-%')
        ),0) AS imediatos,
        -- tÃ­tulos baixados do(s) bloco(s) ABERTO(s)
        COALESCE((
          SELECT SUM(t.valor_baixado)
          FROM open_bloco b
          JOIN dbo.financeiro_titulos t ON t.bloco_id = b.id
          WHERE t.status = 'BAIXADO'
        ),0) AS tit_baixados
    `);

  const financeiro = Number(fi.recordset[0]?.imediatos ?? 0) + Number(fi.recordset[0]?.tit_baixados ?? 0);

  // 3) A receber = tÃ­tulos ABERTOS/PARCIAIS de TODOS os blocos do cliente
  const ar = await pool
    .request()
    .input("id", sql.Int, clienteId)
    .query(`
      SELECT COALESCE(SUM(t.valor_bruto - t.valor_baixado), 0) AS a_receber
      FROM dbo.financeiro_titulos t
      JOIN dbo.blocos b ON b.id = t.bloco_id
      WHERE b.cliente_id = @id
        AND t.status IN ('ABERTO','PARCIAL')
    `);

  const a_receber = Number(ar.recordset[0]?.a_receber ?? 0);

  return {
    saldo_bloco,           // viaja entre blocos (ABERTO)
    financeiro,            // sÃ³ o que â€œbate no caixaâ€ do bloco ABERTO (sem SALDO ANTERIOR)
    a_receber,             // tudo que ainda vai entrar (qualquer bloco do cliente)
    saldo: saldo_bloco + financeiro, // compatibilidade
  };
}



/* ========================= GET by ID ========================= */

export const getClienteById = async (req: Request, res: Response) => {
  const { id } = req.params;

  try {
    const clienteRs = await pool
      .request()
      .input("id", +id)
      .query(
        `SELECT id, nome_fantasia, grupo_empresa, tabela_preco, status, whatsapp, links_json, anotacoes, criado_em, atualizado_em, recebe_whatsapp
         FROM clientes WHERE id = @id`
      );

    if (clienteRs.recordset.length === 0) {
      return res.status(404).json({ message: "Cliente nÃ£o encontrado" });
    }

    const saldos = await calcularSaldosCliente(+id);

    return res.json({
      ...clienteRs.recordset[0],
      ...saldos, // saldo_bloco, financeiro, a_receber, saldo
      transportadoras: [],
      documentos: [],
    });
  } catch (error) {
    console.error("Erro ao buscar cliente:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/* ========================= Saldo isolado ========================= */

export const getClienteSaldo = async (req: Request, res: Response) => {
  const { id } = req.params;

  try {
    const saldos = await calcularSaldosCliente(+id);
    return res.json(saldos); // { saldo_bloco, financeiro, a_receber, saldo }
  } catch (error) {
    console.error("Erro em getClienteSaldo:", error);
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/* ========================= CREATE / UPDATE / DELETE ========================= */

const clienteSchema = z.object({
  nome_fantasia: z.string().min(1, "Nome fantasia Ã© obrigatÃ³rio"),
  grupo_empresa: z.string().nullish(),
  tabela_preco: z.string().min(1, "Tabela de preÃ§o Ã© obrigatÃ³ria"),
  status: z.enum(["ATIVO", "INATIVO"]).default("ATIVO"),
  whatsapp: z.string().nullish(),
  anotacoes: z.string().nullish(),
  links_json: z.string().nullish(),
});

export const createCliente = async (req: Request, res: Response) => {
  try {
    const data = clienteSchema.parse(req.body);
    const statusDb = (data.status || "ATIVO").toUpperCase() === "INATIVO" ? "INATIVO" : "ATIVO";
    const allowDuplicate = String(req.query.allowDuplicate ?? "").trim() === "1";

    if (!allowDuplicate) {
      const exists = await pool
        .request()
        .input("nome", data.nome_fantasia.trim())
        .query(`SELECT TOP 1 id, status FROM clientes WHERE nome_fantasia = @nome`);
      if (exists.recordset.length) {
        return res.status(409).json({
          message: "JÃ¡ existe um cliente com este nome.",
          existing_id: exists.recordset[0].id,
          existing_status: exists.recordset[0].status,
        });
      }
    }

    const result = await pool
      .request()
      .input("nome_fantasia", data.nome_fantasia)
      .input("grupo_empresa", (data.grupo_empresa ?? null) as any)
      .input("tabela_preco", data.tabela_preco)
      .input("status", statusDb)
      .input("whatsapp", (data.whatsapp ?? null) as any)
      .input("anotacoes", (data.anotacoes ?? null) as any)
      .input("links_json", (data.links_json ?? null) as any)
      .query(
        `INSERT INTO clientes (nome_fantasia, grupo_empresa, tabela_preco, status, whatsapp, anotacoes, links_json, criado_em)
         OUTPUT INSERTED.*
         VALUES (@nome_fantasia, @grupo_empresa, @tabela_preco, @status, @whatsapp, @anotacoes, @links_json, SYSUTCDATETIME())`
      );

    res.status(201).json({ message: "Cliente criado com sucesso!", data: result.recordset[0] });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({
        message: "Erro de validaÃ§Ã£o",
        errors: error.errors.map((e) => ({ path: e.path.join("."), message: e.message })),
      });
    }
    console.error("Erro ao criar cliente:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const updateCliente = async (req: Request, res: Response) => {
  const { id } = req.params;

  try {
    const body = z
      .object({
        nome_fantasia: z.string().min(1).optional(),
        grupo_empresa: z.string().trim().nullish().optional(),
        tabela_preco: z.string().min(1).optional(),
        status: z.enum(["ATIVO", "INATIVO"]).optional(),
        whatsapp: z.string().trim().nullish().optional(),
        anotacoes: z.string().nullish().optional(),
        links_json: z.union([z.string(), z.record(z.any())]).nullish().optional(),
        recebe_whatsapp: z.boolean().optional(), // BIT no banco
      })
      .partial()
      .parse(req.body ?? {});

    // Checagem de duplicidade do nome_fantasia
    if (body.nome_fantasia && body.nome_fantasia.trim()) {
      const dup = await pool
        .request()
        .input("id", +id)
        .input("nome", body.nome_fantasia.trim())
        .query(`SELECT TOP 1 id FROM clientes WHERE nome_fantasia = @nome AND id <> @id`);
      if (dup.recordset.length) {
        return res.status(409).json({ message: "JÃ¡ existe outro cliente com este nome." });
      }
    }

    // Monta objeto sanitizado apenas com campos enviados
    const sanitized: Record<string, any> = {};

    if (body.nome_fantasia !== undefined) {
      sanitized.nome_fantasia = body.nome_fantasia.trim();
    }

    if (body.grupo_empresa !== undefined) {
      sanitized.grupo_empresa =
        body.grupo_empresa == null || body.grupo_empresa.trim() === ""
          ? null
          : body.grupo_empresa.trim();
    }

    if (body.tabela_preco !== undefined) {
      sanitized.tabela_preco = body.tabela_preco;
    }

    if (body.status !== undefined) {
      sanitized.status = body.status; // "ATIVO" | "INATIVO"
    }

    if (body.whatsapp !== undefined) {
      sanitized.whatsapp =
        body.whatsapp == null || body.whatsapp.trim() === ""
          ? null
          : body.whatsapp.replace(/\D+/g, "");
    }

    if (body.anotacoes !== undefined) {
      sanitized.anotacoes = body.anotacoes ?? null;
    }

    if (body.links_json !== undefined) {
      sanitized.links_json =
        body.links_json == null
          ? null
          : typeof body.links_json === "string"
          ? body.links_json
          : JSON.stringify(body.links_json);
    }

    if ((req.body as any).recebe_whatsapp !== undefined) {
      sanitized.recebe_whatsapp = (req.body as any).recebe_whatsapp ? 1 : 0;
    }

    if (Object.keys(sanitized).length === 0) {
      return res.status(400).json({ message: "Nenhum campo para atualizar" });
    }

    // Monta UPDATE dinÃ¢mico
    const setSql = Object.keys(sanitized)
      .map((k) => `${k} = @${k}`)
      .join(", ");

    const dbReq = pool.request().input("id", +id);
    Object.entries(sanitized).forEach(([k, v]) => dbReq.input(k, v));

    const result = await dbReq.query(
      `UPDATE clientes
         SET ${setSql}, atualizado_em = SYSUTCDATETIME()
       OUTPUT INSERTED.*
       WHERE id = @id`
    );

    if (!result.recordset.length) {
      return res.status(404).json({ message: "Cliente nÃ£o encontrado" });
    }

    return res.json({
      message: "Cliente atualizado com sucesso!",
      data: result.recordset[0],
    });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({
        message: "Erro de validaÃ§Ã£o",
        errors: error.errors.map((e) => ({
          path: e.path.join("."),
          message: e.message,
        })),
      });
    }
    console.error("Erro ao atualizar cliente:", error);
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const deleteCliente = async (req: Request, res: Response) => {
  const { id } = req.params;
  try {
    const result = await pool
      .request()
      .input("id", +id)
      .query(
        `UPDATE clientes
         SET status = 'INATIVO', atualizado_em = SYSUTCDATETIME()
         WHERE id = @id`
      );

    if ((result.rowsAffected?.[0] ?? 0) === 0) {
      return res.status(404).json({ message: "Cliente nÃ£o encontrado" });
    }

    res.status(204).send();
  } catch (error) {
    console.error("Erro ao inativar cliente:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/* ========================= DOCUMENTOS / LINKS ========================= */

export const listClienteDocumentos = async (req: Request, res: Response) => {
  const { cliente_id } = req.params;
  try {
    const [docs, cli] = await Promise.all([
      pool
        .request()
        .input("cliente_id", +cliente_id)
        .query(
          `SELECT id, cliente_id, doc_tipo, doc_numero, principal, modelo_nota, nome, tipo_nota, percentual_nf
           FROM cliente_documentos
           WHERE cliente_id = @cliente_id
           ORDER BY principal DESC, id DESC`
        ),
      pool.request().input("id", +cliente_id).query("SELECT links_json FROM clientes WHERE id = @id"),
    ]);

    let links: Array<{ descricao: string; url: string }> = [];
    const raw = cli.recordset?.[0]?.links_json as string | null | undefined;
    if (raw) {
      try {
        const parsed = JSON.parse(raw);
        if (Array.isArray(parsed)) {
          links = parsed.filter(
            (x) => x && typeof x.descricao === "string" && typeof x.url === "string"
          );
        }
      } catch {}
    }

    res.json({ documentos: docs.recordset, links });
  } catch (error) {
    console.error("Erro ao listar documentos/links do cliente:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const createClienteDocumento = async (req: Request, res: Response) => {
  const { cliente_id } = req.params;

  // atalho: anexar link
  const linkSchema = z.object({ descricao: z.string().min(1), url: z.string().url() });
  const _linkParse = linkSchema.safeParse(req.body);
  if (_linkParse.success) {
    try {
      const cli = await pool.request().input("id", +cliente_id)
        .query("SELECT links_json FROM clientes WHERE id = @id");
      if (cli.recordset.length === 0)
        return res.status(404).json({ message: "Cliente nÃ£o encontrado" });

      let links: Array<{ descricao: string; url: string }> = [];
      const raw = cli.recordset[0].links_json as string | null;
      if (raw) { try { const p = JSON.parse(raw); if (Array.isArray(p)) links = p; } catch {} }
      links.unshift(_linkParse.data);

      await pool.request()
        .input("id", +cliente_id)
        .input("links_json", JSON.stringify(links))
        .query("UPDATE clientes SET links_json=@links_json, atualizado_em=SYSUTCDATETIME() WHERE id=@id");

      return res.status(201).json({ message: "Link anexado", link: _linkParse.data });
    } catch (error) {
      console.error("Erro ao anexar link ao cliente:", error);
      return res.status(500).json({ message: "Erro interno no servidor" });
    }
  }

  try {
    const clienteDocumentoSchema = z.object({
      doc_tipo: z.enum(["CNPJ", "CPF"]),
      doc_numero: z.string().min(1),
      principal: z.boolean().default(false),
      modelo_nota: z.string().nullish(),
      nome: z.string().nullish(),
      tipo_nota: z.string().nullish(),
      percentual_nf: z.number().min(0).max(100).nullish(),
    });

    const data = clienteDocumentoSchema.parse(req.body);

    // valida doc e normaliza
    const numero = onlyDigits(data.doc_numero);
    const isValidCPF = (cpf: string) => {
      const s = onlyDigits(cpf);
      if (s.length !== 11 || /^(\d)\1+$/.test(s)) return false;
      let sum = 0, rest = 0;
      for (let i = 1; i <= 9; i++) sum += parseInt(s.substring(i - 1, i)) * (11 - i);
      rest = (sum * 10) % 11; if (rest >= 10) rest = 0;
      if (rest !== parseInt(s.substring(9, 10))) return false;
      sum = 0;
      for (let i = 1; i <= 10; i++) sum += parseInt(s.substring(i - 1, i)) * (12 - i);
      rest = (sum * 10) % 11; if (rest >= 10) rest = 0;
      return rest === parseInt(s.substring(10, 11));
    };
    const isValidCNPJ = (cnpj: string) => {
      const s = onlyDigits(cnpj);
      if (s.length !== 14 || /^(\d)\1+$/.test(s)) return false;
      const calc = (arr: number[]) => {
        let sum = 0;
        const w = arr.length === 12 ? [5,4,3,2,9,8,7,6,5,4,3,2] : [6,5,4,3,2,9,8,7,6,5,4,3,2];
        arr.forEach((v, i) => (sum += v * w[i]));
        const mod = sum % 11;
        return mod < 2 ? 0 : 11 - mod;
      };
      const n = s.split("").map(Number);
      const d1 = calc(n.slice(0, 12));
      const d2 = calc(n.slice(0, 12).concat(d1));
      return d1 === n[12] && d2 === n[13];
    };

    if (data.doc_tipo === "CPF" && !isValidCPF(numero))
      return res.status(400).json({ message: "CPF invÃ¡lido" });
    if (data.doc_tipo === "CNPJ" && !isValidCNPJ(numero))
      return res.status(400).json({ message: "CNPJ invÃ¡lido" });

    const tx = pool.transaction();
    await tx.begin();

    try {
      if (data.principal) {
        await tx.request()
          .input("cliente_id", sql.Int, +cliente_id)
          .query("UPDATE cliente_documentos SET principal = 0 WHERE cliente_id = @cliente_id");
      }

      const reqDb = tx.request()
        .input("cliente_id", sql.Int, +cliente_id)
        .input("doc_tipo", sql.VarChar(10), data.doc_tipo)
        .input("doc_numero", sql.VarChar(32), numero)
        .input("principal", sql.Bit, !!data.principal)
        .input("modelo_nota", sql.VarChar(50), String(data.modelo_nota ?? "").trim()) // nunca null
        .input("nome", sql.VarChar(120), String(data.nome ?? "").trim())               // nunca null
        .input("tipo_nota", sql.VarChar(10), mapTipoNotaDb(data.tipo_nota))            // MEIA|INTEGRAL
        .input("percentual_nf", sql.Decimal(5, 2), data.percentual_nf == null ? null : Number(data.percentual_nf));

      const result = await reqDb.query(
        `INSERT INTO cliente_documentos
           (cliente_id, doc_tipo, doc_numero, principal, modelo_nota, nome, tipo_nota, percentual_nf)
         OUTPUT INSERTED.*
         VALUES (@cliente_id, @doc_tipo, @doc_numero, @principal, @modelo_nota, @nome, @tipo_nota, @percentual_nf)`
      );

      await tx.commit();
      return res.status(201).json(result.recordset[0]);
    } catch (e: any) {
      await tx.rollback();
      if (e?.number === 2627 || e?.number === 2601) {
        return res.status(409).json({ message: "Documento jÃ¡ cadastrado para este cliente" });
      }
      console.error("Erro ao criar documento do cliente:", e);
      return res.status(500).json({ message: "Erro interno no servidor" });
    }
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({
        message: "Erro de validaÃ§Ã£o",
        errors: error.errors.map((e) => ({ path: e.path.join("."), message: e.message })),
      });
    }
    console.error("Erro ao criar documento do cliente:", error);
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const updateClienteDocumento = async (req: Request, res: Response) => {
  const { cliente_id, id } = req.params;
  try {
    const clienteDocumentoSchema = z.object({
      doc_tipo: z.enum(["CNPJ", "CPF"]).optional(),
      doc_numero: z.string().min(1).optional(),
      principal: z.boolean().optional(),
      modelo_nota: z.string().nullish().optional(),
      nome: z.string().nullish().optional(),
      tipo_nota: z.string().nullish().optional(),
      percentual_nf: z.number().min(0).max(100).nullish().optional(),
    });

    const data = clienteDocumentoSchema.parse(req.body);

    const sanitized: Record<string, any> = { ...data };
    if ("doc_numero" in sanitized) sanitized.doc_numero = onlyDigits(String(sanitized.doc_numero ?? ""));
    if ("modelo_nota" in sanitized) sanitized.modelo_nota = String(sanitized.modelo_nota ?? "").trim();
    if ("nome" in sanitized) sanitized.nome = String(sanitized.nome ?? "").trim();
    if ("tipo_nota" in sanitized) sanitized.tipo_nota = mapTipoNotaDb(sanitized.tipo_nota);

    const fields = Object.keys(sanitized).map((k) => `${k} = @${k}`).join(", ");
    if (!fields) return res.status(400).json({ message: "Nenhum campo para atualizar" });

    const tx = pool.transaction();
    await tx.begin();

    try {
      if (sanitized.principal === true) {
        await tx.request()
          .input("cliente_id", sql.Int, +cliente_id)
          .query("UPDATE cliente_documentos SET principal = 0 WHERE cliente_id = @cliente_id");
      }

      const reqDb = tx.request()
        .input("id", sql.Int, +id)
        .input("cliente_id", sql.Int, +cliente_id);

      for (const [k, v] of Object.entries(sanitized)) {
        if (k === "percentual_nf") reqDb.input(k, sql.Decimal(5, 2), v == null ? null : Number(v));
        else if (k === "principal") reqDb.input(k, sql.Bit, !!v);
        else if (k === "doc_tipo") reqDb.input(k, sql.VarChar(10), v as string);
        else if (k === "doc_numero") reqDb.input(k, sql.VarChar(32), v as string);
        else if (k === "modelo_nota") reqDb.input(k, sql.VarChar(50), v as string);
        else if (k === "nome") reqDb.input(k, sql.VarChar(120), v as string);
        else if (k === "tipo_nota") reqDb.input(k, sql.VarChar(10), v as "MEIA" | "INTEGRAL");
        else reqDb.input(k, v as any);
      }

      const result = await reqDb.query(
        `UPDATE cliente_documentos
         SET ${fields}
         OUTPUT INSERTED.*
         WHERE id = @id AND cliente_id = @cliente_id`
      );

      await tx.commit();

      if (result.recordset.length === 0) {
        return res.status(404).json({ message: "Documento do cliente nÃ£o encontrado" });
      }

      res.json(result.recordset[0]);
    } catch (e) {
      await tx.rollback();
      throw e;
    }
  } catch (error: any) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({
        message: "Erro de validaÃ§Ã£o",
        errors: error.errors.map((e) => ({ path: e.path.join("."), message: e.message })),
      });
    }
    if (error?.number === 2627 || error?.number === 2601) {
      return res.status(409).json({ message: "Documento jÃ¡ cadastrado para este cliente" });
    }
    console.error("Erro ao atualizar documento do cliente:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const deleteClienteDocumento = async (req: Request, res: Response) => {
  const { cliente_id, id } = req.params;
  try {
    const result = await pool
      .request()
      .input("id", +id)
      .input("cliente_id", +cliente_id)
      .query(`DELETE FROM cliente_documentos WHERE id = @id AND cliente_id = @cliente_id`);

    if ((result.rowsAffected?.[0] ?? 0) === 0) {
      return res.status(404).json({ message: "Documento do cliente nÃ£o encontrado" });
    }

    res.status(204).send();
  } catch (error) {
    console.error("Erro ao deletar documento do cliente:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/* ========================= TRANSPORTADORAS x CLIENTE ========================= */

export const setClienteTransportadoras = async (req: Request, res: Response) => {
  const { id } = req.params;
  const schema = z.object({ transportadoraIds: z.array(z.number().int().positive()).default([]) });

  try {
    const { transportadoraIds } = schema.parse(req.body);

    const cli = await pool.request().input("id", +id).query(`SELECT TOP 1 id FROM clientes WHERE id = @id`);
    if (!cli.recordset.length) {
      return res.status(404).json({ message: "Cliente nÃ£o encontrado" });
    }

    const tx = pool.transaction();
    await tx.begin();

    try {
      await tx.request().input("id", +id).query(`DELETE FROM cliente_transportadoras WHERE cliente_id = @id`);

      if (transportadoraIds.length) {
        const values = transportadoraIds.map((_, i) => `(@id, @t${i})`).join(", ");
        const reqDb = tx.request().input("id", +id);
        transportadoraIds.forEach((tid, i) => reqDb.input(`t${i}`, tid));
        await reqDb.query(`INSERT INTO cliente_transportadoras (cliente_id, transportadora_id) VALUES ${values}`);
      }

      await tx.commit();
    } catch (e) {
      await tx.rollback();
      throw e;
    }

    const vinculos = await pool
      .request()
      .input("id", +id)
      .query(
        `SELECT t.id, t.razao_social, t.cnpj, t.telefone, t.forma_envio, t.ativo
         FROM cliente_transportadoras ct
         JOIN transportadoras t ON t.id = ct.transportadora_id
         WHERE ct.cliente_id = @id
         ORDER BY t.razao_social`
      );

    return res.json({ message: "Transportadoras atualizadas", transportadoras: vinculos.recordset });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ message: "Erro de validaÃ§Ã£o", errors: error.errors });
    }
    console.error("Erro ao setar transportadoras do cliente:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export default {
  getClientes,
  getClienteById,
  getClienteSaldo,
  createCliente,
  updateCliente,
  deleteCliente,
  listClienteDocumentos,
  createClienteDocumento,
  updateClienteDocumento,
  deleteClienteDocumento,
  setClienteTransportadoras,
};


----- END backend\src\controllers\clientes.controller.ts -----


----- BEGIN backend\src\controllers\clientesTransportadoras.controller.ts -----

import { Request, Response } from "express";
import { pool } from "../db";

/**
 * GET /clientes/:id/transportadoras
 * Lista transportadoras vinculadas ao cliente
 */
export async function listarDoCliente(req: Request, res: Response) {
  const clienteId = Number(req.params.id);
  if (!Number.isFinite(clienteId)) {
    return res.status(400).json({ message: "id invÃ¡lido" });
  }

  // IMPORTANTE: nada de nome_fantasia nem observacao, pois nÃ£o existem no seu schema atual
  const sql = `
    SELECT
      ct.cliente_id,
      t.id                AS transportadora_id,
      ct.principal,
      t.razao_social,
      t.cnpj,
      t.telefone
    FROM dbo.cliente_transportadoras ct
    JOIN dbo.transportadoras t ON t.id = ct.transportadora_id
    WHERE ct.cliente_id = @clienteId
    ORDER BY ct.principal DESC, t.razao_social
  `;

  const result = await pool.request().input("clienteId", clienteId).query(sql);
  return res.json({ data: result.recordset ?? [] });
}

/**
 * POST /clientes/:id/transportadoras
 * body: { transportadora_id, principal? }
 */
export async function vincular(req: Request, res: Response) {
  const clienteId = Number(req.params.id);
  const { transportadora_id, principal, observacao } = req.body ?? {};
  const tid = Number(transportadora_id);

  if (!Number.isFinite(clienteId) || !Number.isFinite(tid)) {
    return res.status(400).json({ message: "ParÃ¢metros invÃ¡lidos." });
  }

  const tx = pool.transaction();
  await tx.begin();

  try {
    // se marcar como principal, zera as demais primeiro
    if (principal === true) {
      await tx
        .request()
        .input("clienteId", clienteId)
        .query(`
          UPDATE dbo.cliente_transportadoras
             SET principal = 0,
                 updated_at = SYSUTCDATETIME()
           WHERE cliente_id = @clienteId
        `);
    }

    // 1) tenta atualizar o vÃ­nculo
    const upd = await tx
      .request()
      .input("clienteId", clienteId)
      .input("tid", tid)
      .input("principal", principal == null ? null : (principal ? 1 : 0))
      .input("observacao", observacao ?? null)
      .query(`
        UPDATE dbo.cliente_transportadoras
           SET principal  = COALESCE(@principal, principal),
               observacao = COALESCE(@observacao, observacao),
               updated_at = SYSUTCDATETIME()
         WHERE cliente_id = @clienteId
           AND transportadora_id = @tid
      `);

    // 2) se nÃ£o atualizou ninguÃ©m, insere
    if ((upd.rowsAffected?.[0] ?? 0) === 0) {
      await tx
        .request()
        .input("clienteId", clienteId)
        .input("tid", tid)
        .input("principal", principal ? 1 : 0)
        .input("observacao", observacao ?? null)
        .query(`
          INSERT INTO dbo.cliente_transportadoras
            (cliente_id, transportadora_id, principal, observacao, created_at, updated_at)
          VALUES
            (@clienteId, @tid, @principal, @observacao, SYSUTCDATETIME(), SYSUTCDATETIME())
        `);
    }

    // 3) retorna o vÃ­nculo (e jÃ¡ pode trazer dados da transportadora se quiser)
    const sel = await tx
      .request()
      .input("clienteId", clienteId)
      .input("tid", tid)
      .query(`
        SELECT TOP 1
          ct.cliente_id,
          ct.transportadora_id,
          ct.principal,
          ct.observacao
        FROM dbo.cliente_transportadoras ct
        WHERE ct.cliente_id = @clienteId
          AND ct.transportadora_id = @tid
      `);

    await tx.commit();
    return res.status(201).json({ ok: true, data: sel.recordset?.[0] ?? null });
  } catch (err) {
    await tx.rollback();
    console.error("Erro em vincular transportadora:", err);
    return res.status(500).json({ message: (err as any)?.message || "Erro interno" });
  }
}

/**
 * PATCH /clientes/:id/transportadoras/:tid
 * body: { principal? }
 */
export async function atualizar(req: Request, res: Response) {
  const clienteId = Number(req.params.id);
  const tid = Number(req.params.tid);
  const { principal } = req.body ?? {};

  if (!Number.isFinite(clienteId) || !Number.isFinite(tid)) {
    return res.status(400).json({ message: "ParÃ¢metros invÃ¡lidos." });
  }

  if (principal === true) {
    await pool
      .request()
      .input("clienteId", clienteId)
      .query(
        `UPDATE dbo.cliente_transportadoras
           SET principal = 0, updated_at = SYSUTCDATETIME()
         WHERE cliente_id = @clienteId`
      );
  }

  const sql = `
    UPDATE dbo.cliente_transportadoras
       SET principal  = COALESCE(@principal, principal),
           updated_at = SYSUTCDATETIME()
     WHERE cliente_id = @clienteId AND transportadora_id = @tid
  `;

  await pool
    .request()
    .input("clienteId", clienteId)
    .input("tid", tid)
    .input("principal", principal == null ? null : principal ? 1 : 0)
    .query(sql);

  return res.json({ ok: true });
}

/**
 * DELETE /clientes/:id/transportadoras/:tid
 */
export async function remover(req: Request, res: Response) {
  const clienteId = Number(req.params.id);
  const tid = Number(req.params.tid);

  if (!Number.isFinite(clienteId) || !Number.isFinite(tid)) {
    return res.status(400).json({ message: "ParÃ¢metros invÃ¡lidos." });
  }

  await pool
    .request()
    .input("clienteId", clienteId)
    .input("tid", tid)
    .query(
      `DELETE FROM dbo.cliente_transportadoras
        WHERE cliente_id = @clienteId AND transportadora_id = @tid`
    );

  return res.json({ ok: true });
}


----- END backend\src\controllers\clientesTransportadoras.controller.ts -----


----- BEGIN backend\src\controllers\dominios.controller.ts -----

import { Request, Response } from "express";
import { z } from "zod";
import { pool } from "../db";

const dominioSchema = z.object({
  chave: z.string().min(1, "Chave é obrigatória"),
  nome: z.string().min(1, "Nome é obrigatório"),
  descricao: z.string().optional().nullable(),
  ativo: z.boolean().default(true),
});

const dominioItemSchema = z.object({
  valor: z.string().min(1, "Valor é obrigatório"),
  codigo: z.string().optional().nullable(),
  ordem: z.number().int().default(0),
  descricao: z.string().optional().nullable(),
  ativo: z.boolean().default(true),
});

export const getDominios = async (_req: Request, res: Response) => {
  try {
    const result = await pool
      .request()
      .query(
        "SELECT id, chave, nome, descricao, ativo FROM dominios ORDER BY nome"
      );
    res.json(result.recordset);
  } catch (error) {
    console.error("Erro ao buscar domínios:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const getDominioById = async (req: Request, res: Response) => {
  const { id } = req.params;
  try {
    const result = await pool
      .request()
      .input("id", +id)
      .query(
        "SELECT id, chave, nome, descricao, ativo FROM dominios WHERE id = @id"
      );
    if (!result.recordset.length)
      return res.status(404).json({ message: "Domínio não encontrado" });
    res.json(result.recordset[0]);
  } catch (error) {
    console.error("Erro ao buscar domínio:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const createDominio = async (req: Request, res: Response) => {
  try {
    const data = dominioSchema.parse(req.body);
    const r = await pool
      .request()
      .input("chave", data.chave)
      .input("nome", data.nome)
      .input("descricao", data.descricao ?? null)
      .input("ativo", data.ativo)
      .query(`
        INSERT INTO dominios (chave, nome, descricao, ativo)
        OUTPUT INSERTED.id, INSERTED.chave, INSERTED.nome, INSERTED.descricao, INSERTED.ativo
        VALUES (@chave, @nome, @descricao, @ativo)
      `);
    res.status(201).json(r.recordset[0]);
  } catch (error: any) {
    if (error instanceof z.ZodError)
      return res
        .status(400)
        .json({ message: "Erro de validação", errors: error.errors });
    if (error?.number === 2627 || error?.number === 2601)
      return res.status(409).json({ message: "Chave já cadastrada" });
    console.error("Erro ao criar domínio:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const updateDominio = async (req: Request, res: Response) => {
  const { id } = req.params;
  try {
    const data = dominioSchema.partial().parse(req.body);

    const fields = Object.keys(data)
      .map((k) => `${k} = @${k}`)
      .join(", ");
    if (!fields)
      return res.status(400).json({ message: "Nenhum campo para atualizar" });

    const q = await pool.request().input("id", +id);
    Object.entries(data).forEach(([k, v]) => q.input(k, v ?? null));

    const r = await q.query(`
      UPDATE dominios SET ${fields}
      OUTPUT INSERTED.id, INSERTED.chave, INSERTED.nome, INSERTED.descricao, INSERTED.ativo
      WHERE id = @id
    `);
    if (!r.recordset.length)
      return res.status(404).json({ message: "Domínio não encontrado" });
    res.json(r.recordset[0]);
  } catch (error) {
    if (error instanceof z.ZodError)
      return res
        .status(400)
        .json({ message: "Erro de validação", errors: error.errors });
    console.error("Erro ao atualizar domínio:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const deleteDominio = async (req: Request, res: Response) => {
  const { id } = req.params;
  try {
    const r = await pool
      .request()
      .input("id", +id)
      .query("DELETE FROM dominios WHERE id = @id");
    if ((r.rowsAffected?.[0] ?? 0) === 0)
      return res.status(404).json({ message: "Domínio não encontrado" });
    res.status(204).send();
  } catch (error) {
    console.error("Erro ao deletar domínio:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const getDominioItens = async (req: Request, res: Response) => {
  const { dominio_id } = req.params;
  try {
    const r = await pool
      .request()
      .input("dominio_id", +dominio_id)
      .query(`
        SELECT id, dominio_id, valor, codigo, ordem, descricao, ativo
        FROM dominio_itens
        WHERE dominio_id = @dominio_id
        ORDER BY ordem, valor
      `);
    res.json(r.recordset);
  } catch (error) {
    console.error("Erro ao buscar itens do domínio:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const getDominioItemById = async (req: Request, res: Response) => {
  const { id } = req.params;
  try {
    const r = await pool
      .request()
      .input("id", +id)
      .query(
        "SELECT id, dominio_id, valor, codigo, ordem, descricao, ativo FROM dominio_itens WHERE id = @id"
      );
    if (!r.recordset.length)
      return res
        .status(404)
        .json({ message: "Item do domínio não encontrado" });
    res.json(r.recordset[0]);
  } catch (error) {
    console.error("Erro ao buscar item do domínio:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const createDominioItem = async (req: Request, res: Response) => {
  const { dominio_id } = req.params;
  try {
    const data = dominioItemSchema.parse(req.body);
    const r = await pool
      .request()
      .input("dominio_id", +dominio_id)
      .input("valor", data.valor)
      .input("codigo", data.codigo ?? null)
      .input("ordem", data.ordem ?? 0)
      .input("descricao", data.descricao ?? null)
      .input("ativo", data.ativo ?? true)
      .query(`
        INSERT INTO dominio_itens (dominio_id, valor, codigo, ordem, descricao, ativo)
        OUTPUT INSERTED.id, INSERTED.dominio_id, INSERTED.valor, INSERTED.codigo, INSERTED.ordem, INSERTED.descricao, INSERTED.ativo
        VALUES (@dominio_id, @valor, @codigo, @ordem, @descricao, @ativo)
      `);
    res.status(201).json(r.recordset[0]);
  } catch (error: any) {
    if (error instanceof z.ZodError)
      return res
        .status(400)
        .json({ message: "Erro de validação", errors: error.errors });
    if (error?.number === 2627 || error?.number === 2601)
      return res
        .status(409)
        .json({ message: "Já existe um item com este valor no domínio" });
    console.error("Erro ao criar item do domínio:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const updateDominioItem = async (req: Request, res: Response) => {
  const { dominio_id, id } = req.params;
  try {
    const data = dominioItemSchema.partial().parse(req.body);
    const fields = Object.keys(data)
      .map((k) => `${k} = @${k}`)
      .join(", ");
    if (!fields)
      return res.status(400).json({ message: "Nenhum campo para atualizar" });

    const q = pool.request().input("id", +id).input("dominio_id", +dominio_id);
    Object.entries(data).forEach(([k, v]) => q.input(k, v ?? null));

    const r = await q.query(`
      UPDATE dominio_itens
      SET ${fields}
      OUTPUT INSERTED.id, INSERTED.dominio_id, INSERTED.valor, INSERTED.codigo, INSERTED.ordem, INSERTED.descricao, INSERTED.ativo
      WHERE id = @id AND dominio_id = @dominio_id
    `);
    if (!r.recordset.length)
      return res
        .status(404)
        .json({ message: "Item do domínio não encontrado" });
    res.json(r.recordset[0]);
  } catch (error) {
    if (error instanceof z.ZodError)
      return res
        .status(400)
        .json({ message: "Erro de validação", errors: error.errors });
    console.error("Erro ao atualizar item do domínio:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const deleteDominioItem = async (req: Request, res: Response) => {
  const { dominio_id, id } = req.params;
  try {
    const r = await pool
      .request()
      .input("id", +id)
      .input("dominio_id", +dominio_id)
      .query(
        "DELETE FROM dominio_itens WHERE id = @id AND dominio_id = @dominio_id"
      );
    if ((r.rowsAffected?.[0] ?? 0) === 0)
      return res
        .status(404)
        .json({ message: "Item do domínio não encontrado" });
    res.status(204).send();
  } catch (error) {
    console.error("Erro ao deletar item do domínio:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};


----- END backend\src\controllers\dominios.controller.ts -----


----- BEGIN backend\src\controllers\fechamentos.controller.ts -----

import { Response } from "express";
import { z } from "zod";
import { pool } from "../db";
import sql from "mssql";
import { AuthenticatedRequest } from "../middleware/auth.middleware";

const dateSchema = z
  .string()
  .regex(/^\d{4}-\d{2}-\d{2}$/, "Formato de data invÃ¡lido. Use YYYY-MM-DD");

export const createFechamento = async (req: AuthenticatedRequest, res: Response) => {
  const { data_ref } = req.params;
  const userId = req.user!.id;

  try {
    const validatedDate = dateSchema.parse(data_ref);

    const tx = new sql.Transaction(pool);
    await tx.begin(sql.ISOLATION_LEVEL.SERIALIZABLE);

    try {
      // trava linha do dia para evitar criaÃ§Ã£o concorrente
      const existe = await new sql.Request(tx)
        .input("data_ref", sql.Date, validatedDate)
        .query(`
          SELECT 1
            FROM fechamento_dia WITH (UPDLOCK, HOLDLOCK)
           WHERE data_ref = @data_ref
        `);

      if (existe.recordset.length) {
        await tx.rollback();
        return res
          .status(409)
          .json({ message: `O fechamento para o dia ${validatedDate} jÃ¡ existe.` });
      }

      // cria cabeÃ§alho
      await new sql.Request(tx)
        .input("data_ref", sql.Date, validatedDate)
        .input("criado_por", sql.Int, userId)
        .input("observacao", sql.NVarChar(sql.MAX), null)
        .query(`
          INSERT INTO fechamento_dia (data_ref, criado_por, criado_em, observacao)
          VALUES (@data_ref, @criado_por, SYSUTCDATETIME(), @observacao)
        `);

      // snapshot dos lanÃ§amentos do dia
      await new sql.Request(tx)
        .input("data_ref", sql.Date, validatedDate)
        .query(`
          INSERT INTO fechamento_itens (data_ref, lancamento_id, status_no_dia)
          SELECT @data_ref, bl.id, bl.status
            FROM bloco_lancamentos bl
           WHERE CAST(bl.data_lancamento AS date) = @data_ref
        `);

      await tx.commit();
      return res
        .status(201)
        .json({ message: `Fechamento para o dia ${validatedDate} criado com sucesso.` });
    } catch (err) {
      await tx.rollback();
      throw err;
    }
  } catch (error: any) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ message: "Erro de validaÃ§Ã£o", errors: error.errors });
    }
    console.error("Erro ao criar fechamento:", error);
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/**
 * Reprocessa o fechamento do dia: remove itens e recaptura o snapshot.
 * MantÃ©m o cabeÃ§alho.
 */
export const reprocessFechamento = async (req: AuthenticatedRequest, res: Response) => {
  const { data_ref } = req.params;
  try {
    const validatedDate = dateSchema.parse(data_ref);

    const tx = new sql.Transaction(pool);
    await tx.begin(sql.ISOLATION_LEVEL.SERIALIZABLE);

    try {
      // garante que existe
      const cab = await new sql.Request(tx)
        .input("data_ref", sql.Date, validatedDate)
        .query(`SELECT 1 FROM fechamento_dia WHERE data_ref = @data_ref`);

      if (!cab.recordset.length) {
        await tx.rollback();
        return res
          .status(404)
          .json({ message: `Fechamento para o dia ${validatedDate} nÃ£o encontrado.` });
      }

      // apaga itens e recarrega snapshot
      await new sql.Request(tx)
        .input("data_ref", sql.Date, validatedDate)
        .query(`DELETE FROM fechamento_itens WHERE data_ref = @data_ref`);

      await new sql.Request(tx)
        .input("data_ref", sql.Date, validatedDate)
        .query(`
          INSERT INTO fechamento_itens (data_ref, lancamento_id, status_no_dia)
          SELECT @data_ref, bl.id, bl.status
            FROM bloco_lancamentos bl
           WHERE CAST(bl.data_lancamento AS date) = @data_ref
        `);

      await tx.commit();
      return res.json({
        message: `Fechamento do dia ${validatedDate} reprocessado com sucesso.`,
      });
    } catch (e) {
      await tx.rollback();
      throw e;
    }
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ message: "Erro de validaÃ§Ã£o", errors: error.errors });
    }
    console.error("Erro ao reprocessar fechamento:", error);
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const getFechamento = async (req: AuthenticatedRequest, res: Response) => {
  const { data_ref } = req.params;
  try {
    const validatedDate = dateSchema.parse(data_ref);

    // cabeÃ§alho
    const cab = await pool
      .request()
      .input("data_ref", sql.Date, validatedDate)
      .query(`SELECT * FROM fechamento_dia WHERE data_ref = @data_ref`);

    if (!cab.recordset.length) {
      return res
        .status(404)
        .json({ message: `Fechamento para o dia ${validatedDate} nÃ£o encontrado.` });
    }

    // itens detalhados
    const itens = await pool
      .request()
      .input("data_ref", sql.Date, validatedDate)
      .query(`
        SELECT
          fi.*,
          bl.tipo_recebimento,
          bl.tipo_cheque,
          bl.sentido,
          bl.valor,
          bl.bom_para,
          c.nome_fantasia,
          b.codigo AS codigo_bloco
        FROM fechamento_itens fi
        JOIN bloco_lancamentos bl ON fi.lancamento_id = bl.id
        JOIN blocos b            ON bl.bloco_id = b.id
        JOIN clientes c          ON b.cliente_id = c.id
        WHERE fi.data_ref = @data_ref
        ORDER BY bl.tipo_recebimento, bl.bom_para, fi.lancamento_id
      `);

    // agregados
    const geraisRs = await pool
      .request()
      .input("data_ref", sql.Date, validatedDate)
      .query(`
        SELECT
          COUNT(*) AS qtde_itens,
          SUM(CASE WHEN bl.sentido='ENTRADA' THEN bl.valor ELSE 0 END) AS total_entradas,
          SUM(CASE WHEN bl.sentido='SAIDA'   THEN bl.valor ELSE 0 END) AS total_saidas
        FROM fechamento_itens fi
        JOIN bloco_lancamentos bl ON fi.lancamento_id = bl.id
        WHERE fi.data_ref = @data_ref
      `);

    const porStatusRs = await pool
      .request()
      .input("data_ref", sql.Date, validatedDate)
      .query(`
        SELECT bl.status, COUNT(*) AS qtd, SUM(bl.valor) AS total
        FROM fechamento_itens fi
        JOIN bloco_lancamentos bl ON fi.lancamento_id = bl.id
        WHERE fi.data_ref = @data_ref
        GROUP BY bl.status
      `);

    const porFormaRs = await pool
      .request()
      .input("data_ref", sql.Date, validatedDate)
      .query(`
        SELECT bl.tipo_recebimento, COUNT(*) AS qtd, SUM(bl.valor) AS total
        FROM fechamento_itens fi
        JOIN bloco_lancamentos bl ON fi.lancamento_id = bl.id
        WHERE fi.data_ref = @data_ref
        GROUP BY bl.tipo_recebimento
        ORDER BY bl.tipo_recebimento
      `);

    return res.json({
      ...cab.recordset[0],
      itens: itens.recordset,
      resumo: {
        gerais: geraisRs.recordset[0] ?? null,
        por_status: porStatusRs.recordset,
        por_forma: porFormaRs.recordset,
      },
    });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ message: "Erro de validaÃ§Ã£o", errors: error.errors });
    }
    console.error("Erro ao buscar fechamento:", error);
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
};


----- END backend\src\controllers\fechamentos.controller.ts -----


----- BEGIN backend\src\controllers\financeiro.controller.ts -----

import { Request, Response } from "express";
import { z } from "zod";
import sql from "mssql";
import { pool } from "../db";
import { AuthenticatedRequest } from "../middleware/auth.middleware";

/* ======================================================================
   HELPERS
   ====================================================================== */

function toISO(input?: string | null): string | null {
  if (!input) return null;
  const s = String(input).trim();
  if (!s) return null;
  const d = new Date(s);
  return isNaN(d.getTime()) ? null : d.toISOString();
}

/** Aceita YYYY-MM-DD e retorna a mesma string validada (Date-only) */
function toISODateOnly(s?: string | null): string | null {
  if (!s) return null;
  const m = /^(\d{4})-(\d{2})-(\d{2})$/.exec(s.trim());
  if (!m) return null;
  const [, yyyy, mm, dd] = m;
  const d = new Date(Number(yyyy), Number(mm) - 1, Number(dd));
  if (isNaN(d.getTime())) return null;
  return `${yyyy}-${mm}-${dd}`;
}

type TituloRow = {
  id: number;
  cliente_id: number;
  bloco_id: number | null;
  bloco_lanc_id: number | null;
  tipo: string | null;
  bom_para: Date | null;
  valor_bruto: number;
  valor_baixado: number;
  status: string;
};

/** Busca tÃ­tulo com fallback para schema antigo (sem bloco_lanc_id) */
async function fetchTituloById(tituloId: number): Promise<TituloRow> {
  try {
    const r = await pool
      .request()
      .input("id", sql.Int, tituloId)
      .query(`
        SELECT id, cliente_id, bloco_id, bloco_lanc_id, tipo, bom_para, valor_bruto, valor_baixado, status
        FROM dbo.financeiro_titulos
        WHERE id = @id
      `);
    if (!r.recordset.length) throw new Error("TÃ­tulo nÃ£o encontrado");
    return r.recordset[0] as TituloRow;
  } catch (e: any) {
    const num = e?.number ?? e?.originalError?.number;
    const msg = String(e?.message || "");
    if (num !== 207 && !/Invalid column name 'bloco_lanc_id'/i.test(msg)) throw e;
    const r2 = await pool
      .request()
      .input("id", sql.Int, tituloId)
      .query(`
        SELECT id, cliente_id, bloco_id,
               CAST(NULL AS int) AS bloco_lanc_id,
               tipo, bom_para, valor_bruto, valor_baixado, status
        FROM dbo.financeiro_titulos
        WHERE id = @id
      `);
    if (!r2.recordset.length) throw new Error("TÃ­tulo nÃ£o encontrado");
    return r2.recordset[0] as TituloRow;
  }
}

/** Resolve o id do lanÃ§amento no bloco para atualizar status */
async function resolveLancId(
  tx: sql.Transaction,
  titulo: TituloRow
): Promise<number | null> {
  if (!titulo.bloco_id) return null;
  if (titulo.bloco_lanc_id) return titulo.bloco_lanc_id;

  const r = await new sql.Request(tx)
    .input("bloco_id", sql.Int, titulo.bloco_id)
    .input("tipo", sql.VarChar(30), String(titulo.tipo || "").toUpperCase())
    .input("valor", sql.Decimal(18, 2), Number(titulo.valor_bruto || 0))
    .input("bom_para", sql.Date, titulo.bom_para ? new Date(titulo.bom_para) : null)
    .query(`
      SELECT TOP 1 id
      FROM dbo.bloco_lancamentos
      WHERE bloco_id = @bloco_id
        AND sentido = 'SAIDA'
        AND UPPER(tipo_recebimento) = @tipo
        AND ABS(valor - @valor) < 0.01
        AND (
              (@bom_para IS NULL AND bom_para IS NULL)
           OR ( @bom_para IS NOT NULL AND bom_para IS NOT NULL AND CAST(bom_para AS date) = CAST(@bom_para AS date) )
        )
      ORDER BY id DESC
    `);

  return r.recordset.length ? Number(r.recordset[0].id) : null;
}

/* ======================================================================
   1) REGISTRAR BAIXA DE TÃTULO
   ====================================================================== */

const baixaSchema = z.object({
  valor: z.coerce.number().positive().optional(),
  valor_baixa: z.coerce.number().positive().optional(),
  data_baixa: z.string().optional(),
  forma: z.string().optional(),
  forma_pagto: z.string().optional(),
  observacao: z.string().optional(),
  obs: z.string().optional(),
});

export const registrarBaixaTitulo = async (req: AuthenticatedRequest, res: Response) => {
  const tituloId = Number(req.params.id);
  if (!Number.isFinite(tituloId)) return res.status(400).json({ message: "ID invÃ¡lido" });

  try {
    const raw = baixaSchema.parse(req.body);
    const valor = (raw.valor_baixa ?? raw.valor)!;
    if (!valor) return res.status(400).json({ message: "Informe um valor de baixa" });

    const forma = raw.forma_pagto ?? raw.forma ?? undefined;
    const observacao = raw.obs ?? raw.observacao ?? undefined;
    const userId = req.user?.id ?? null;

    const titulo = await fetchTituloById(tituloId);

    const novoBaixado = Number(titulo.valor_baixado ?? 0) + valor;
    const statusNovo = novoBaixado >= Number(titulo.valor_bruto ?? 0) ? "BAIXADO" : "PARCIAL";

    const tx = new sql.Transaction(pool);
    await tx.begin();
    try {
      // 1) Atualiza o tÃ­tulo
      await new sql.Request(tx)
        .input("id", sql.Int, titulo.id)
        .input("valor_baixado", sql.Decimal(18, 2), novoBaixado)
        .input("status", sql.VarChar(20), statusNovo)
        .query(`
          UPDATE dbo.financeiro_titulos
             SET valor_baixado = @valor_baixado,
                 status = @status
           WHERE id = @id
        `);

      // 2) Se virou BAIXADO, marca o lanÃ§amento do bloco
      if (statusNovo === "BAIXADO" && titulo.bloco_id) {
        const lancIdToUpdate = await resolveLancId(tx, titulo);
        if (lancIdToUpdate) {
          try {
            await new sql.Request(tx)
              .input("id", sql.Int, lancIdToUpdate)
              .input("obsExtra", sql.VarChar(sql.MAX), (observacao ? ` â€¢ ${observacao}` : ""))
              .query(`
                UPDATE dbo.bloco_lancamentos
                   SET status = 'BAIXADO NO FINANCEIRO',
                       observacao = LEFT(CONCAT(COALESCE(observacao,''), ' (baixa ${forma ?? ''}', @obsExtra, ')'), 300),
                       atualizado_em = SYSUTCDATETIME()
                 WHERE id = @id
              `);
          } catch (e: any) {
            // fallback sem atualizado_em
            await new sql.Request(tx)
              .input("id", sql.Int, lancIdToUpdate)
              .input("obsExtra", sql.VarChar(sql.MAX), (observacao ? ` â€¢ ${observacao}` : ""))
              .query(`
                UPDATE dbo.bloco_lancamentos
                   SET status = 'BAIXADO NO FINANCEIRO',
                       observacao = CONCAT(COALESCE(observacao,''), ' (baixa ${forma ?? ''}', @obsExtra, ')')
                 WHERE id = @id
              `);
          }
        }
      }

      await tx.commit();
      return res.json({ message: "Baixa registrada", status: statusNovo, valor_baixado: novoBaixado });
    } catch (e) {
      await tx.rollback();
      throw e;
    }
  } catch (e: any) {
    if (e instanceof z.ZodError) return res.status(400).json({ message: "Erro de validaÃ§Ã£o", errors: e.errors });
    console.error("Erro ao registrar baixa:", e);
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/* ======================================================================
   1.1) ESTORNAR BAIXA (volta o tÃ­tulo para ABERTO e o lanÃ§amento do bloco para EM ABERTO)
   ====================================================================== */

// === ESTORNO DE BAIXA DE TÃTULO (corrigido para usar PENDENTE no bloco) ===
export const estornarBaixaTitulo = async (req: AuthenticatedRequest, res: Response) => {
  const tituloId = Number(req.params.id);
  if (!Number.isFinite(tituloId)) return res.status(400).json({ message: "ID invÃ¡lido" });

  try {
    const titulo = await fetchTituloById(tituloId);

    if (Number(titulo.valor_baixado || 0) <= 0 && titulo.status !== "BAIXADO") {
      return res.status(400).json({ message: "TÃ­tulo nÃ£o estÃ¡ baixado." });
    }

    const tx = new sql.Transaction(pool);
    await tx.begin();
    try {
      // 1) TÃ­tulo volta a ABERTO (tabela: financeiro_titulos)
      await new sql.Request(tx)
        .input("id", sql.Int, titulo.id)
        .query(`
          UPDATE dbo.financeiro_titulos
             SET valor_baixado = 0,
                 status = 'ABERTO'
           WHERE id = @id
        `);

      // 2) LanÃ§amento do bloco volta para PENDENTE (tabela: bloco_lancamentos)
      if (titulo.bloco_id) {
        const lancIdToUpdate = await resolveLancId(tx, titulo);
        if (lancIdToUpdate) {
          try {
            await new sql.Request(tx)
              .input("id", sql.Int, lancIdToUpdate)
              .query(`
                UPDATE dbo.bloco_lancamentos
                   SET status = 'PENDENTE',
                       observacao = LEFT(CONCAT(COALESCE(observacao,''), ' (estorno de baixa)'), 300),
                       atualizado_em = SYSUTCDATETIME()
                 WHERE id = @id
              `);
          } catch {
            // fallback sem coluna atualizado_em
            await new sql.Request(tx)
              .input("id", sql.Int, lancIdToUpdate)
              .query(`
                UPDATE dbo.bloco_lancamentos
                   SET status = 'PENDENTE',
                       observacao = CONCAT(COALESCE(observacao,''), ' (estorno de baixa)')
                 WHERE id = @id
              `);
          }
        }
      }

      await tx.commit();
      return res.json({ message: "Estorno realizado", status: "ABERTO", valor_baixado: 0 });
    } catch (e) {
      await tx.rollback();
      throw e;
    }
  } catch (e) {
    console.error("Erro ao estornar baixa:", e);
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
};



/* ======================================================================
   2) LISTAGEM DE TÃTULOS (usada pelo /financeiro/receber)
   ====================================================================== */

const listTitulosQuery = z.object({
  status: z.string().optional(),  // "ABERTO,PARCIAL" | "BAIXADO" | "ABERTO,PARCIAL,BAIXADO"
  tipo: z.string().optional(),
  de: z.string().optional(),
  ate: z.string().optional(),
  from: z.string().optional(),
  to: z.string().optional(),
  q: z.string().optional(),
  page: z.coerce.number().int().positive().default(1),
  pageSize: z.coerce.number().int().positive().max(500).default(50),
});

export const listTitulos = async (req: Request, res: Response) => {
  try {
    const { status, tipo, de, ate, from, to, q, page, pageSize } = listTitulosQuery.parse(req.query);
    const offset = (page - 1) * pageSize;

    const where: string[] = [];
    const baseReq = pool.request().input("limit", sql.Int, pageSize).input("offset", sql.Int, offset);

    if (status) {
      const parts = status.split(",").map((s) => s.trim().toUpperCase()).filter(Boolean);
      if (parts.length) {
        const inParams: string[] = [];
        parts.forEach((st, idx) => {
          const name = `st${idx}`;
          inParams.push(`@${name}`);
          baseReq.input(name, sql.VarChar(20), st);
        });
        where.push(`t.status IN (${inParams.join(",")})`);
      }
    }

    if (tipo) {
      where.push(`UPPER(t.tipo) = @tipo`);
      baseReq.input("tipo", sql.VarChar(30), tipo.toUpperCase());
    }

    const deStr = de ?? from ?? undefined;
    const ateStr = ate ?? to ?? undefined;
    const deISO = toISODateOnly(deStr);
    const ateISO = toISODateOnly(ateStr);

    if (deISO) {
      where.push(`CAST(t.bom_para AS date) >= @de`);
      baseReq.input("de", sql.Date, new Date(deISO));
    }
    if (ateISO) {
      where.push(`CAST(t.bom_para AS date) <= @ate`);
      baseReq.input("ate", sql.Date, new Date(ateISO));
    }

    if (q) {
      where.push(`(t.numero_doc LIKE '%' + @q + '%' OR t.observacao LIKE '%' + @q + '%')`);
      baseReq.input("q", sql.VarChar(200), q);
    }

    const whereSql = where.length ? `WHERE ${where.join(" AND ")}` : "";

    const totalRs = await baseReq.query(`
      SELECT COUNT(*) AS total
      FROM dbo.financeiro_titulos t
      LEFT JOIN dbo.clientes c ON c.id = t.cliente_id
      ${whereSql}
    `);
    const total = Number(totalRs.recordset[0]?.total ?? 0);

    const pageReq = pool.request().input("limit", sql.Int, pageSize).input("offset", sql.Int, offset);
    if (status) {
      const parts = status.split(",").map((s) => s.trim().toUpperCase()).filter(Boolean);
      parts.forEach((st, idx) => pageReq.input(`st${idx}`, sql.VarChar(20), st));
    }
    if (tipo) pageReq.input("tipo", sql.VarChar(30), tipo.toUpperCase());
    if (deISO) pageReq.input("de", sql.Date, new Date(deISO));
    if (ateISO) pageReq.input("ate", sql.Date, new Date(ateISO));
    if (q) pageReq.input("q", sql.VarChar(200), q);

    const rs = await pageReq.query(`
      SELECT
        t.id,
        t.cliente_id,
        c.nome_fantasia AS cliente_nome,
        t.tipo,
        t.numero_doc,
        t.bom_para,
        t.valor_bruto,
        t.valor_baixado,
        t.status,
        t.observacao,
        t.bloco_id
      FROM dbo.financeiro_titulos t
      LEFT JOIN dbo.clientes c ON c.id = t.cliente_id
      ${whereSql}
      ORDER BY t.id DESC
      OFFSET @offset ROWS FETCH NEXT @limit ROWS ONLY
    `);

    return res.json({ data: rs.recordset, page, pageSize, total });
  } catch (err) {
    console.error("Erro em listTitulos:", err);
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/* ======================================================================
   3) CONFERÃŠNCIA DIÃRIA e 4) ATUALIZAR CONFERÃŠNCIA
   (inalterados em relaÃ§Ã£o ao teu Ãºltimo envio, mantidos)
   ====================================================================== */

const conferenciaQuery = z.object({
  data: z.string().optional(),
  operador_id: z.coerce.number().optional(),
  cliente_id: z.coerce.number().optional(),
});

export const conferenciaDiaria = async (req: Request, res: Response) => {
  try {
    const { data, cliente_id } = conferenciaQuery.parse(req.query);
    const dia = toISODateOnly(data ?? new Date().toISOString().slice(0, 10));
    if (!dia) return res.status(400).json({ message: "Data invÃ¡lida" });

    const r = await pool
      .request()
      .input("dia", sql.Date, new Date(dia))
      .input("cliente_id", cliente_id ?? null)
      .query(`
        WITH lanc AS (
          SELECT
            bl.id                           AS origem_id,
            'BLOCO_LANC'                    AS origem,
            CAST(bl.data_lancamento AS date) AS data_evento,
            b.cliente_id,
            c.nome_fantasia                 AS cliente_nome,
            bl.tipo_recebimento             AS tipo,
            bl.numero_referencia            AS numero_doc,
            CAST(NULL AS date)              AS bom_para,
            bl.valor                        AS valor,
            bl.status                       AS status_negocio,
            bl.bloco_id                     AS bloco_id,
            CAST(NULL AS int)               AS titulo_id
          FROM dbo.bloco_lancamentos bl
          JOIN dbo.blocos b ON b.id = bl.bloco_id
          LEFT JOIN dbo.clientes c ON c.id = b.cliente_id
          WHERE CAST(bl.data_lancamento AS date) = @dia
            AND bl.bom_para IS NULL
            AND (@cliente_id IS NULL OR b.cliente_id = @cliente_id)
        ),
        tit AS (
          SELECT
            t.id                             AS origem_id,
            'TITULO'                         AS origem,
            COALESCE(CAST(t.bom_para AS date), CAST(t.created_at AS date)) AS data_evento,
            t.cliente_id,
            c.nome_fantasia                  AS cliente_nome,
            t.tipo                           AS tipo,
            t.numero_doc                     AS numero_doc,
            CAST(t.bom_para AS date)         AS bom_para,
            t.valor_bruto                    AS valor,
            t.status                         AS status_negocio,
            t.bloco_id                       AS bloco_id,
            t.id                             AS titulo_id
          FROM dbo.financeiro_titulos t
          LEFT JOIN dbo.clientes c ON c.id = t.cliente_id
          WHERE (
                  CAST(t.bom_para AS date) = @dia
               OR CAST(t.created_at AS date) = @dia
                )
            AND (@cliente_id IS NULL OR t.cliente_id = @cliente_id)
        )
        SELECT
          ROW_NUMBER() OVER (ORDER BY x.data_evento, x.origem, x.origem_id) AS id,
          x.*,
          fc.status       AS status_conferencia,
          fc.obs          AS comentario,
          fc.conferido_em,
          fc.conferido_por
        FROM (
          SELECT * FROM lanc
          UNION ALL
          SELECT * FROM tit
        ) x
        LEFT JOIN dbo.financeiro_conferencia fc
          ON fc.ref_tipo = x.origem AND fc.ref_id = x.origem_id
        ORDER BY x.data_evento, x.origem, x.origem_id
      `);

    const itens = r.recordset as Array<any>;

    const resumo: Record<string, number> = {};
    for (const it of itens) {
      const k = String(it.tipo || "-");
      resumo[k] = (resumo[k] ?? 0) + Number(it.valor || 0);
    }

    return res.json({ data: dia, total: itens.length, resumo, itens });
  } catch (err) {
    console.error("Erro em conferenciaDiaria:", err);
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
};

const conferenciaAtualizarSchema = z.object({
  data: z.string().optional(),
  status: z.enum(["PENDENTE", "CONFIRMADO", "DIVERGENTE"]),
  comentario: z.string().optional(),
  itens: z
    .array(
      z.object({
        origem: z.enum(["BLOCO_LANC", "TITULO", "BAIXA"]),
        origem_id: z.number().int().positive(),
      })
    )
    .min(1),
});

export const conferenciaAtualizar = async (req: AuthenticatedRequest, res: Response) => {
  try {
    const { status, comentario, itens } = conferenciaAtualizarSchema.parse(req.body);
    const userId = req.user?.id ?? null;

    const tx = new sql.Transaction(pool);
    await tx.begin();

    try {
      for (const row of itens) {
        const ref_tipo = row.origem === "BAIXA" ? "BLOCO_LANC" : row.origem;
        const ref_id = row.origem_id;

        let data_ref: Date | null = null;

        if (ref_tipo === "TITULO") {
          const r = await new sql.Request(tx)
            .input("id", sql.Int, ref_id)
            .query(
              `SELECT TOP 1 CAST(COALESCE(bom_para, created_at) AS date) AS data_ref FROM dbo.financeiro_titulos WHERE id = @id`
            );
          if (r.recordset.length) data_ref = r.recordset[0].data_ref;
        } else {
          const r = await new sql.Request(tx)
            .input("id", sql.Int, ref_id)
            .query(
              `SELECT TOP 1 CAST(data_lancamento AS date) AS data_ref FROM dbo.bloco_lancamentos WHERE id = @id`
            );
          if (r.recordset.length) data_ref = r.recordset[0].data_ref;
        }

        const exists = await new sql.Request(tx)
          .input("ref_tipo", sql.VarChar(20), ref_tipo)
          .input("ref_id", sql.Int, ref_id)
          .query(
            `SELECT TOP 1 id FROM dbo.financeiro_conferencia WHERE ref_tipo=@ref_tipo AND ref_id=@ref_id`
          );

        const obs = status === "DIVERGENTE" ? (comentario ?? null) : null;

        if (exists.recordset.length) {
          try {
            await new sql.Request(tx)
              .input("ref_tipo", sql.VarChar(20), ref_tipo)
              .input("ref_id", sql.Int, ref_id)
              .input("status", sql.VarChar(15), status)
              .input("obs", sql.VarChar(400), obs)
              .input("conferido_por", userId)
              .input("conferido_em", status === "PENDENTE" ? null : new Date())
              .input("data_ref", data_ref)
              .query(`
                UPDATE dbo.financeiro_conferencia
                   SET status = @status,
                       obs = @obs,
                       conferido_por = @conferido_por,
                       conferido_em = @conferido_em,
                       data_ref = COALESCE(@data_ref, data_ref),
                       atualizado_em = SYSUTCDATETIME()
                 WHERE ref_tipo = @ref_tipo AND ref_id = @ref_id
              `);
          } catch (e: any) {
            await new sql.Request(tx)
              .input("ref_tipo", sql.VarChar(20), ref_tipo)
              .input("ref_id", sql.Int, ref_id)
              .input("status", sql.VarChar(15), status)
              .input("obs", sql.VarChar(400), obs)
              .input("conferido_por", userId)
              .input("conferido_em", status === "PENDENTE" ? null : new Date())
              .input("data_ref", data_ref)
              .query(`
                UPDATE dbo.financeiro_conferencia
                   SET status = @status,
                       obs = @obs,
                       conferido_por = @conferido_por,
                       conferido_em = @conferido_em,
                       data_ref = COALESCE(@data_ref, data_ref)
                 WHERE ref_tipo = @ref_tipo AND ref_id = @ref_id
              `);
          }
        } else {
          try {
            await new sql.Request(tx)
              .input("ref_tipo", sql.VarChar(20), ref_tipo)
              .input("ref_id", sql.Int, ref_id)
              .input("status", sql.VarChar(15), status)
              .input("obs", sql.VarChar(400), obs)
              .input("conferido_por", userId)
              .input("conferido_em", status === "PENDENTE" ? null : new Date())
              .input("data_ref", data_ref)
              .query(`
                INSERT INTO dbo.financeiro_conferencia
                  (ref_tipo, ref_id, status, obs, conferido_por, conferido_em, data_ref, criado_em, atualizado_em)
                VALUES
                  (@ref_tipo, @ref_id, @status, @obs, @conferido_por, @conferido_em, @data_ref, SYSUTCDATETIME(), SYSUTCDATETIME())
              `);
          } catch (e: any) {
            await new sql.Request(tx)
              .input("ref_tipo", sql.VarChar(20), ref_tipo)
              .input("ref_id", sql.Int, ref_id)
              .input("status", sql.VarChar(15), status)
              .input("obs", sql.VarChar(400), obs)
              .input("conferido_por", userId)
              .input("conferido_em", status === "PENDENTE" ? null : new Date())
              .input("data_ref", data_ref)
              .query(`
                INSERT INTO dbo.financeiro_conferencia
                  (ref_tipo, ref_id, status, obs, conferido_por, conferido_em, data_ref, criado_em)
                VALUES
                  (@ref_tipo, @ref_id, @status, @obs, @conferido_por, @conferido_em, @data_ref, SYSUTCDATETIME())
              `);
          }
        }
      }

      await tx.commit();
      return res.json({ ok: true, message: "ConferÃªncia atualizada" });
    } catch (e) {
      await tx.rollback();
      throw e;
    }
  } catch (err) {
    console.error("Erro em conferenciaAtualizar:", err);
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
};


----- END backend\src\controllers\financeiro.controller.ts -----


----- BEGIN backend\src\controllers\formasPagamento.controller.ts -----

import { Request, Response } from "express";
import { z } from "zod";
import { pool } from "../db";

/**
 * Agora este controller Ã© genÃ©rico:
 *   ?tipo=saida   -> domÃ­nio FORMA_PAGAMENTO_SAIDA (DEFAULT)
 *   ?tipo=entrada -> domÃ­nio TIPO_ENTRADA
 */

type TipoDominio = "entrada" | "saida";

const formaPagamentoSchema = z.object({
  nome: z.string().min(1, "Nome Ã© obrigatÃ³rio"),
  ativo: z.boolean().default(true),
  codigo: z.string().optional().nullable(),
  ordem: z.number().int().default(0),
  descricao: z.string().optional().nullable(),
});

const formaPagamentoUpdateSchema = formaPagamentoSchema.partial();

function getDominioConfig(req: Request): { chave: string; nome: string } {
  const tipo = String(req.query.tipo ?? "saida").toLowerCase() as TipoDominio;
  if (tipo === "entrada") {
    return { chave: "TIPO_ENTRADA", nome: "Tipos de Entrada" };
  }
  return { chave: "FORMA_PAGAMENTO_SAIDA", nome: "Formas de Pagamento (SaÃ­da)" };
}

// Garante que o domÃ­nio exista e retorna seu id
async function ensureDominioId(chave: string, nome: string): Promise<number> {
  let r = await pool
    .request()
    .input("chave", chave)
    .query("SELECT id FROM dominios WHERE chave = @chave");

  if (r.recordset.length > 0) return r.recordset[0].id as number;

  try {
    r = await pool
      .request()
      .input("chave", chave)
      .input("nome", nome)
      .input("ativo", true)
      .query(
        `INSERT INTO dominios (chave, nome, ativo)
         OUTPUT INSERTED.id
         VALUES (@chave, @nome, @ativo)`
      );
    return r.recordset[0].id as number;
  } catch (err: any) {
    if (err?.number === 2627 || err?.number === 2601) {
      const again = await pool
        .request()
        .input("chave", chave)
        .query("SELECT id FROM dominios WHERE chave = @chave");
      if (again.recordset.length > 0) return again.recordset[0].id as number;
    }
    throw err;
  }
}

// LISTAR
export const getFormasPagamento = async (req: Request, res: Response) => {
  try {
    const { chave, nome } = getDominioConfig(req);
    const dominioId = await ensureDominioId(chave, nome);

    const result = await pool
      .request()
      .input("dominio_id", dominioId)
      .query(
        `SELECT id,
                valor       AS nome,
                ativo,
                codigo,
                ordem,
                descricao
           FROM dominio_itens
          WHERE dominio_id = @dominio_id
          ORDER BY ordem, valor`
      );

    res.json(result.recordset);
  } catch (error) {
    console.error("Erro ao buscar itens do domÃ­nio de pagamento/entrada:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

// OBTÃ‰M POR ID
export const getFormaPagamentoById = async (req: Request, res: Response) => {
  const { id } = req.params;

  try {
    const { chave, nome } = getDominioConfig(req);
    const dominioId = await ensureDominioId(chave, nome);

    const result = await pool
      .request()
      .input("id", id)
      .input("dominio_id", dominioId)
      .query(
        `SELECT id,
                valor AS nome,
                ativo,
                codigo,
                ordem,
                descricao
           FROM dominio_itens
          WHERE id = @id AND dominio_id = @dominio_id`
      );

    if (result.recordset.length === 0) {
      return res.status(404).json({ message: "Registro nÃ£o encontrado" });
    }

    res.json(result.recordset[0]);
  } catch (error) {
    console.error("Erro ao buscar registro:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

// CRIAR
export const createFormaPagamento = async (req: Request, res: Response) => {
  try {
    const data = formaPagamentoSchema.parse(req.body);
    const { chave, nome } = getDominioConfig(req);
    const dominioId = await ensureDominioId(chave, nome);

    const result = await pool
      .request()
      .input("dominio_id", dominioId)
      .input("valor", data.nome) // mapeia nome -> valor
      .input("ativo", data.ativo)
      .input("codigo", data.codigo ?? null)
      .input("ordem", data.ordem ?? 0)
      .input("descricao", data.descricao ?? null)
      .query(
        `INSERT INTO dominio_itens (dominio_id, valor, codigo, ordem, descricao, ativo)
         OUTPUT INSERTED.id, INSERTED.valor AS nome, INSERTED.ativo, INSERTED.codigo, INSERTED.ordem, INSERTED.descricao
         VALUES (@dominio_id, @valor, @codigo, @ordem, @descricao, @ativo)`
      );

    res.status(201).json(result.recordset[0]);
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res
        .status(400)
        .json({ message: "Erro de validaÃ§Ã£o", errors: error.errors });
    }
    if ((error as any)?.number === 2627 || (error as any)?.number === 2601) {
      return res
        .status(409)
        .json({ message: "JÃ¡ existe um item com esse nome." });
    }
    console.error("Erro ao criar registro:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

// ATUALIZAR
export const updateFormaPagamento = async (req: Request, res: Response) => {
  const { id } = req.params;

  try {
    const data = formaPagamentoUpdateSchema.parse(req.body);
    if (Object.keys(data).length === 0) {
      return res.status(400).json({ message: "Nenhum campo para atualizar" });
    }

    const { chave, nome } = getDominioConfig(req);
    const dominioId = await ensureDominioId(chave, nome);

    // Monta SET com mapeamento nome->valor
    const mapKey = (k: string) => (k === "nome" ? "valor" : k);
    const fields = Object.keys(data)
      .map((k) => `${mapKey(k)} = @${k}`)
      .join(", ");

    const request = pool.request().input("id", id).input("dominio_id", dominioId);
    Object.entries(data).forEach(([k, v]) => request.input(k, v as any));

    const result = await request.query(
      `UPDATE dominio_itens
          SET ${fields}
        OUTPUT INSERTED.id, INSERTED.valor AS nome, INSERTED.ativo, INSERTED.codigo, INSERTED.ordem, INSERTED.descricao
        WHERE id = @id AND dominio_id = @dominio_id`
    );

    if (result.recordset.length === 0) {
      return res.status(404).json({ message: "Registro nÃ£o encontrado" });
    }

    res.json(result.recordset[0]);
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res
        .status(400)
        .json({ message: "Erro de validaÃ§Ã£o", errors: error.errors });
    }
    if ((error as any)?.number === 2627 || (error as any)?.number === 2601) {
      return res
        .status(409)
        .json({ message: "JÃ¡ existe um item com esse nome." });
    }
    console.error("Erro ao atualizar registro:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

// DELETAR
export const deleteFormaPagamento = async (req: Request, res: Response) => {
  const { id } = req.params;

  try {
    const { chave, nome } = getDominioConfig(req);
    const dominioId = await ensureDominioId(chave, nome);

    const result = await pool
      .request()
      .input("id", id)
      .input("dominio_id", dominioId)
      .query("DELETE FROM dominio_itens WHERE id = @id AND dominio_id = @dominio_id");

    if (result.rowsAffected[0] === 0) {
      return res.status(404).json({ message: "Registro nÃ£o encontrado" });
    }

    res.status(204).send();
  } catch (error) {
    console.error("Erro ao deletar registro:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};


----- END backend\src\controllers\formasPagamento.controller.ts -----


----- BEGIN backend\src\controllers\pagamentos.controller.ts -----

import { Request, Response } from "express";
import { z } from "zod";
import { pool } from "../db";
import sql from "mssql";

/** mapeia sentido pelo tipo (alinhado aos blocos) */
const entradas = new Set(["CHEQUE", "DINHEIRO", "BOLETO", "DEPOSITO", "PIX", "BONIFICACAO", "DEVOLUCAO"]);
const mapRecebimentoToSentido = (t: string) => (entradas.has(t.toUpperCase()) ? "ENTRADA" : "SAIDA");

const allowedRecebimentos = [
  "CHEQUE",
  "DINHEIRO",
  "BOLETO",
  "DEPOSITO",
  "PIX",
  "TROCA",
  "BONIFICACAO",
  "DESCONTO A VISTA",
  "DEVOLUCAO",
  "PEDIDO",
] as const;

const dateTimeISO = z.string().datetime().optional();

/** payload que o front envia ao criar */
const createSchema = z.object({
  cliente_id: z.number().int(),
  valor: z.number().positive(),
  forma_pagamento: z.enum(allowedRecebimentos),
  observacao: z.string().optional().nullable(),
  /** opcionais â€œescondidosâ€ (nÃ£o usados no seu front, mas ok manter) */
  bloco_id: z.number().int().optional(),
  data_lancamento: dateTimeISO,
  data_vencimento: dateTimeISO,                // mapeia para bom_para
  tipo_cheque: z.enum(["PROPRIO", "TERCEIRO"]).optional(),
  numero_referencia: z.string().max(60).optional(), // <= varchar(60)
});

/* ======= helpers de crÃ©dito via auditoria_logs (sem mudar schema) ======= */

async function findPendingCreditoTx(tx: sql.Transaction, clienteId: number): Promise<{ log_id: number; valor: number } | null> {
  const rs = await new sql.Request(tx)
    .input("entidade", sql.VarChar(50), "credito_cliente")
    .input("entidade_id", sql.VarChar(50), String(clienteId))
    .query(`
      ;WITH gerados AS (
        SELECT l.id, l.payload_json
        FROM auditoria_logs l
        WHERE l.entidade = @entidade
          AND l.entidade_id = @entidade_id
          AND l.acao = 'GERADO'
      ),
      consumidos AS (
        SELECT JSON_VALUE(c.payload_json, '$.orig_log_id') AS orig_id_str
        FROM auditoria_logs c
        WHERE c.entidade = @entidade
          AND c.entidade_id = @entidade_id
          AND c.acao = 'CONSUMIDO'
      )
      SELECT TOP 1 g.id AS log_id,
             TRY_CONVERT(decimal(18,2), JSON_VALUE(g.payload_json, '$.valor')) AS valor
      FROM gerados g
      WHERE NOT EXISTS (
        SELECT 1
        FROM consumidos c
        WHERE c.orig_id_str = CONVERT(varchar(20), g.id)
      )
      ORDER BY g.id DESC;
    `);

  const row = rs.recordset[0];
  if (!row) return null;
  const valor = Number(row.valor ?? 0);
  if (!Number.isFinite(valor) || valor <= 0) return null;
  return { log_id: Number(row.log_id), valor };
}

async function logCreditoConsumidoTx(tx: sql.Transaction, clienteId: number, origLogId: number, blocoId: number, valor: number) {
  await new sql.Request(tx)
    .input("usuario_id", sql.Int, null)
    .input("entidade", sql.VarChar(50), "credito_cliente")
    .input("entidade_id", sql.VarChar(50), String(clienteId))
    .input("acao", sql.VarChar(20), "CONSUMIDO")
    .input("payload_json", sql.NVarChar(sql.MAX), JSON.stringify({
      orig_log_id: String(origLogId),
      bloco_id: blocoId,
      valor,
      consumido_em_utc: new Date().toISOString()
    }))
    .query(`
      INSERT INTO auditoria_logs (usuario_id, entidade, entidade_id, acao, payload_json, criado_em)
      VALUES (@usuario_id, @entidade, @entidade_id, @acao, @payload_json, SYSUTCDATETIME());
    `);
}

/** lista genÃ©rica (opcional) */
export const getPagamentos = async (req: Request, res: Response) => {
  try {
    const { cliente_id, status, tipo_recebimento } = req.query as {
      cliente_id?: string;
      status?: "PENDENTE" | "LIQUIDADO" | "DEVOLVIDO" | "CANCELADO";
      tipo_recebimento?: string;
    };

    let query = `
      SELECT bl.*, b.cliente_id, c.nome_fantasia, b.status AS status_bloco
      FROM bloco_lancamentos bl
      JOIN blocos b ON bl.bloco_id = b.id
      JOIN clientes c ON b.cliente_id = c.id
      WHERE 1=1
    `;
    const reqDb = pool.request();

    if (cliente_id) { query += " AND b.cliente_id = @cliente_id"; reqDb.input("cliente_id", sql.Int, Number(cliente_id)); }
    if (status)      { query += " AND bl.status = @status";        reqDb.input("status", sql.VarChar(15), status); }
    if (tipo_recebimento) { query += " AND bl.tipo_recebimento = @tipo"; reqDb.input("tipo", sql.VarChar(30), tipo_recebimento); }

    query += " ORDER BY bl.data_lancamento DESC, bl.id DESC";
    const rs = await reqDb.query(query);
    res.json(rs.recordset);
  } catch (e) {
    console.error("Erro ao buscar pagamentos:", e);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/** obter 1 lanÃ§amento */
export const getPagamentoById = async (req: Request, res: Response) => {
  const { id } = req.params;
  try {
    const rs = await pool.request()
      .input("id", sql.Int, Number(id))
      .query(`
        SELECT bl.*, b.cliente_id, c.nome_fantasia
          FROM bloco_lancamentos bl
          JOIN blocos b ON bl.bloco_id = b.id
          JOIN clientes c ON b.cliente_id = c.id
         WHERE bl.id = @id
      `);
    if (!rs.recordset.length) return res.status(404).json({ message: "LanÃ§amento nÃ£o encontrado" });
    res.json(rs.recordset[0]);
  } catch (e) {
    console.error("Erro ao buscar lanÃ§amento:", e);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/** criar lanÃ§amento â€“ compatÃ­vel com PagamentoForm do front */
export const createPagamento = async (req: Request, res: Response) => {
  try {
    const data = createSchema.parse(req.body);

    if (data.forma_pagamento === "CHEQUE") {
      if (!data.tipo_cheque) {
        return res.status(400).json({ message: "tipo_cheque Ã© obrigatÃ³rio para CHEQUE." });
      }
      if (!data.data_vencimento) {
        return res.status(400).json({ message: "data_vencimento (bom_para) Ã© obrigatÃ³ria para CHEQUE." });
      }
    }

    const tx = new sql.Transaction(pool);
    await tx.begin();

    try {
      // estreita tipo explicitamente
      let blocoId: number;

      const providedBlocoId = data.bloco_id; // number | undefined
      if (typeof providedBlocoId !== "number") {
        // nÃ£o veio bloco -> busca ou cria
        const q = await new sql.Request(tx)
          .input("cliente_id", sql.Int, data.cliente_id)
          .query(`
            SELECT TOP 1 id FROM blocos
            WHERE cliente_id=@cliente_id AND status='ABERTO'
            ORDER BY aberto_em DESC
          `);

        if (q.recordset.length) {
          blocoId = q.recordset[0].id as number;
        } else {
          const codigo = `AUTO-${new Date().toISOString().replace(/[-:T.Z]/g, "").slice(0,12)}`;
          const novo = await new sql.Request(tx)
            .input("cliente_id", sql.Int, data.cliente_id)
            .input("codigo", sql.VarChar(50), codigo)
            .input("obs", sql.VarChar(sql.MAX), "Criado automaticamente ao inserir lanÃ§amento")
            .query(`
              INSERT INTO blocos (cliente_id, codigo, status, aberto_em, observacao)
              OUTPUT INSERTED.id
              VALUES (@cliente_id, @codigo, 'ABERTO', SYSUTCDATETIME(), @obs)
            `);
          blocoId = novo.recordset[0].id as number;

          // crÃ©dito pendente?
          const pend = await findPendingCreditoTx(tx, data.cliente_id);
          if (pend) {
            await new sql.Request(tx)
              .input("bloco_id", sql.Int, blocoId) // <- agora Ã© number
              .input("tipo_recebimento", sql.VarChar(30), "BONIFICACAO")
              .input("valor", sql.Decimal(18, 2), pend.valor)
              .input("data_lancamento", sql.DateTime2, new Date().toISOString())
              .input("bom_para", sql.DateTime2, null)
              .input("tipo_cheque", sql.VarChar(15), null)
              .input("numero_referencia", sql.VarChar(60), `CRED-ANT-${pend.log_id}`)
              .input("status", sql.VarChar(15), "PENDENTE")
              .input("observacao", sql.VarChar(sql.MAX), "CrÃ©dito bloco anterior (consumido)")
              .input("sentido", sql.VarChar(10), "ENTRADA")
              .query(`
                INSERT INTO bloco_lancamentos
                  (bloco_id, tipo_recebimento, valor, data_lancamento, bom_para, tipo_cheque,
                   numero_referencia, status, observacao, sentido, criado_em)
                VALUES
                  (@bloco_id, @tipo_recebimento, @valor, @data_lancamento, @bom_para, @tipo_cheque,
                   @numero_referencia, @status, @observacao, @sentido, SYSUTCDATETIME())
              `);

            await logCreditoConsumidoTx(tx, data.cliente_id, pend.log_id, blocoId, pend.valor);
          }
        }
      } else {
        // veio bloco -> valida e fixa como number
        const ok = await new sql.Request(tx)
          .input("bloco_id", sql.Int, providedBlocoId)
          .input("cliente_id", sql.Int, data.cliente_id)
          .query(`
            SELECT 1 FROM blocos
            WHERE id=@bloco_id AND cliente_id=@cliente_id AND status='ABERTO'
          `);
        if (!ok.recordset.length) {
          await tx.rollback();
          return res.status(400).json({ message: "Bloco invÃ¡lido (inexistente/fechado ou de outro cliente)." });
        }
        blocoId = providedBlocoId; // agora 100% number
      }

      const tipo = data.forma_pagamento.toUpperCase();
      const sentido = mapRecebimentoToSentido(tipo);
      const isCheque = tipo === "CHEQUE";
      const tipoCheque = isCheque ? data.tipo_cheque ?? null : null;
      const bomPara = data.data_vencimento ?? null;

      const inserted = await new sql.Request(tx)
        .input("bloco_id", sql.Int, blocoId) // <- number garantido
        .input("tipo_recebimento", sql.VarChar(30), tipo)
        .input("valor", sql.Decimal(18,2), data.valor)
        .input("data_lancamento", sql.DateTime2, data.data_lancamento ?? new Date().toISOString())
        .input("bom_para", sql.DateTime2, bomPara)
        .input("tipo_cheque", sql.VarChar(15), tipoCheque)
        .input("numero_referencia", sql.VarChar(60), data.numero_referencia ?? null)
        .input("status", sql.VarChar(15), "PENDENTE")
        .input("observacao", sql.VarChar(sql.MAX), data.observacao ?? null)
        .input("sentido", sql.VarChar(10), sentido)
        .query(`
          INSERT INTO bloco_lancamentos
            (bloco_id, tipo_recebimento, sentido, valor, data_lancamento, bom_para, tipo_cheque,
             numero_referencia, status, observacao, criado_em)
          OUTPUT INSERTED.*
          VALUES
            (@bloco_id, @tipo_recebimento, @sentido, @valor, @data_lancamento, @bom_para,
             @tipo_cheque, @numero_referencia, @status, @observacao, SYSUTCDATETIME())
        `);

      await tx.commit();
      return res.status(201).json(inserted.recordset[0]);
    } catch (e) {
      await tx.rollback();
      throw e;
    }
  } catch (e) {
    if (e instanceof z.ZodError) {
      return res.status(400).json({ message: "Erro de validaÃ§Ã£o", errors: e.errors });
    }
    console.error("Erro ao criar lanÃ§amento:", e);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/** atualizar â€“ nÃ£o Ã© usado no seu front, mas mantive compatÃ­vel */
export const updatePagamento = async (req: Request, res: Response) => {
  const { id } = req.params;

  // pode atualizar forma_pagamento; se mudar, atualizamos sentido tambÃ©m
  const updateSchema = z.object({
    valor: z.number().positive().optional(),
    forma_pagamento: z.enum(allowedRecebimentos).optional(),
    observacao: z.string().optional().nullable(),
    data_lancamento: z.string().datetime().optional(),
    data_vencimento: z.string().datetime().optional(),
    tipo_cheque: z.enum(["PROPRIO", "TERCEIRO"]).optional(),
    numero_referencia: z.string().max(60).optional(),
    status: z.enum(["PENDENTE", "LIQUIDADO", "DEVOLVIDO", "CANCELADO"]).optional(),
  });

  try {
    const data = updateSchema.parse(req.body);

    const pairs: string[] = [];
    const reqDb = pool.request().input("id", sql.Int, Number(id));

    if (data.forma_pagamento) {
      const tipo = data.forma_pagamento.toUpperCase();
      const sentido = mapRecebimentoToSentido(tipo);
      pairs.push("tipo_recebimento=@forma_pagamento", "sentido=@sentido");
      reqDb.input("forma_pagamento", sql.VarChar(30), tipo);
      reqDb.input("sentido", sql.VarChar(10), sentido);

      // se nÃ£o for cheque, limpamos tipo_cheque (consistÃªncia)
      if (tipo !== "CHEQUE") {
        pairs.push("tipo_cheque=NULL");
      }
    }

    if (data.valor !== undefined) { pairs.push("valor=@valor"); reqDb.input("valor", sql.Decimal(18,2), data.valor); }
    if (data.observacao !== undefined) { pairs.push("observacao=@observacao"); reqDb.input("observacao", sql.VarChar(sql.MAX), data.observacao); }
    if (data.data_lancamento !== undefined) { pairs.push("data_lancamento=@data_lancamento"); reqDb.input("data_lancamento", sql.DateTime2, data.data_lancamento); }
    if (data.data_vencimento !== undefined) { pairs.push("bom_para=@data_vencimento"); reqDb.input("data_vencimento", sql.DateTime2, data.data_vencimento); }
    if (data.tipo_cheque !== undefined) { pairs.push("tipo_cheque=@tipo_cheque"); reqDb.input("tipo_cheque", sql.VarChar(15), data.tipo_cheque); }
    if (data.numero_referencia !== undefined) { pairs.push("numero_referencia=@numero_referencia"); reqDb.input("numero_referencia", sql.VarChar(60), data.numero_referencia ?? null); }
    if (data.status !== undefined) { pairs.push("status=@status"); reqDb.input("status", sql.VarChar(15), data.status); }

    if (!pairs.length) return res.status(400).json({ message: "Nenhum campo para atualizar" });

    const rs = await reqDb.query(`
      UPDATE bloco_lancamentos
         SET ${pairs.join(", ")}
       OUTPUT INSERTED.*
       WHERE id=@id
    `);
    if (!rs.recordset.length) return res.status(404).json({ message: "LanÃ§amento nÃ£o encontrado" });
    res.json(rs.recordset[0]);
  } catch (e) {
    if (e instanceof z.ZodError) {
      return res.status(400).json({ message: "Erro de validaÃ§Ã£o", errors: e.errors });
    }
    console.error("Erro ao atualizar lanÃ§amento:", e);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const deletePagamento = async (req: Request, res: Response) => {
  const { id } = req.params;
  try {
    const rs = await pool.request().input("id", sql.Int, Number(id))
      .query("DELETE FROM bloco_lancamentos WHERE id=@id");
    if ((rs.rowsAffected?.[0] ?? 0) === 0) {
      return res.status(404).json({ message: "LanÃ§amento nÃ£o encontrado" });
    }
    res.status(204).send();
  } catch (e: any) {
    if (e?.number === 547) {
      return res.status(409).json({ message: "NÃ£o Ã© possÃ­vel excluir: lanÃ§amento vinculado a fechamento." });
    }
    console.error("Erro ao deletar lanÃ§amento:", e);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/** saldo consolidado em blocos ABERTOS (mantido) */
export const getSaldo = async (req: Request, res: Response) => {
  const { cliente_id } = req.params;
  try {
    const rs = await pool.request()
      .input("cliente_id", sql.Int, Number(cliente_id))
      .query(`
        SELECT COALESCE(SUM(v.saldo),0) AS saldo
        FROM vw_blocos_saldo v
        JOIN blocos b ON b.id = v.bloco_id
        WHERE b.cliente_id=@cliente_id AND b.status='ABERTO'
      `);
    res.json({ saldo: rs.recordset[0].saldo });
  } catch (e) {
    console.error("Erro ao buscar saldo:", e);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

/** histÃ³rico â€“ compatÃ­vel com HistoricoPagamentos do front */
export const getHistorico = async (req: Request, res: Response) => {
  // aceita: GET /pagamentos/historico?cliente_id=123 (se nÃ£o vier, lista todos)
  const { cliente_id } = req.query as { cliente_id?: string };
  try {
    const reqDb = pool.request();
    let where = "1=1";
    if (cliente_id && cliente_id !== "") {
      where += " AND b.cliente_id=@cliente_id";
      reqDb.input("cliente_id", sql.Int, Number(cliente_id));
    }

    const rs = await reqDb.query(`
      SELECT
        bl.id,
        b.cliente_id,
        bl.valor,
        bl.tipo_recebimento AS forma_pagamento,
        bl.criado_em,
        bl.observacao
      FROM bloco_lancamentos bl
      JOIN blocos b ON b.id = bl.bloco_id
      WHERE ${where}
      ORDER BY bl.criado_em DESC, bl.id DESC
    `);

    res.json(rs.recordset);
  } catch (e) {
    console.error("Erro ao buscar histÃ³rico:", e);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};


----- END backend\src\controllers\pagamentos.controller.ts -----


----- BEGIN backend\src\controllers\pedidoParametros.controller.ts -----

import { Request, Response } from "express";
import { pool, sql } from "../db";

/** GET /pedido-parametros?tipo=ENTRADA|SAIDA&ativo=true|false|all&q=... */
export async function list(req: Request, res: Response) {
  const { tipo, ativo = "all", q } = req.query as any;

  const where: string[] = [];
  const r = new sql.Request(pool);

  if (tipo) {
    where.push("tipo = @tipo");
    r.input("tipo", sql.VarChar(10), String(tipo).toUpperCase());
  }
  if (ativo !== "all") {
    where.push("ativo = @ativo");
    r.input("ativo", sql.Bit, String(ativo) === "true");
  }
  if (q) {
    where.push("(descricao LIKE @q)");
    r.input("q", sql.VarChar, `%${String(q)}%`);
  }

  const query = `
    SELECT id, tipo, descricao, ativo, created_at,
           ISNULL(exige_bom_para, 0)     AS exige_bom_para,
           ISNULL(exige_tipo_cheque, 0)  AS exige_tipo_cheque
    FROM dbo.pedido_parametros
    ${where.length ? "WHERE " + where.join(" AND ") : ""}
    ORDER BY tipo, descricao
  `;

  const { recordset } = await r.query(query);
  res.json(recordset);
}

/** POST /pedido-parametros { tipo, descricao, exige_bom_para?, exige_tipo_cheque? } */
export async function create(req: Request, res: Response) {
  const { tipo, descricao, exige_bom_para, exige_tipo_cheque } = req.body || {};
  if (!tipo || !descricao) {
    return res.status(400).json({ message: "tipo e descricao sÃ£o obrigatÃ³rios." });
  }

  const r = new sql.Request(pool)
    .input("tipo", sql.VarChar(10), String(tipo).toUpperCase())
    .input("descricao", sql.VarChar(200), String(descricao).trim())
    .input("exige_bom_para", sql.Bit, !!exige_bom_para)
    .input("exige_tipo_cheque", sql.Bit, !!exige_tipo_cheque);

  const query = `
    INSERT INTO dbo.pedido_parametros (tipo, descricao, exige_bom_para, exige_tipo_cheque)
    OUTPUT INSERTED.*
    VALUES (@tipo, @descricao, @exige_bom_para, @exige_tipo_cheque)
  `;

  const { recordset } = await r.query(query);
  res.status(201).json(recordset[0]);
}

/** PATCH /pedido-parametros/:id { descricao?, ativo?, tipo?, exige_bom_para?, exige_tipo_cheque? } */
export async function update(req: Request, res: Response) {
  const id = Number(req.params.id);
  const { descricao, ativo, tipo, exige_bom_para, exige_tipo_cheque } = req.body || {};
  if (!id) return res.status(400).json({ message: "id invÃ¡lido" });

  const sets: string[] = [];
  const r = new sql.Request(pool).input("id", sql.Int, id);

  if (descricao !== undefined) {
    sets.push("descricao = @descricao");
    r.input("descricao", sql.VarChar(200), String(descricao).trim());
  }
  if (ativo !== undefined) {
    sets.push("ativo = @ativo");
    r.input("ativo", sql.Bit, !!ativo);
  }
  if (tipo !== undefined) {
    sets.push("tipo = @tipo");
    r.input("tipo", sql.VarChar(10), String(tipo).toUpperCase());
  }
  if (exige_bom_para !== undefined) {
    sets.push("exige_bom_para = @exige_bom_para");
    r.input("exige_bom_para", sql.Bit, !!exige_bom_para);
  }
  if (exige_tipo_cheque !== undefined) {
    sets.push("exige_tipo_cheque = @exige_tipo_cheque");
    r.input("exige_tipo_cheque", sql.Bit, !!exige_tipo_cheque);
  }

  if (!sets.length) return res.status(400).json({ message: "Nada para atualizar." });

  const query = `
    UPDATE dbo.pedido_parametros
      SET ${sets.join(", ")}
    OUTPUT INSERTED.*
    WHERE id = @id
  `;

  const { recordset } = await r.query(query);
  res.json(recordset[0]);
}

/** PATCH /pedido-parametros/:id/toggle  â†’ alterna ativo/inativo */
export async function toggle(req: Request, res: Response) {
  const id = Number(req.params.id);
  if (!id) return res.status(400).json({ message: "id invÃ¡lido" });

  const r = new sql.Request(pool).input("id", sql.Int, id);
  const query = `
    UPDATE dbo.pedido_parametros
      SET ativo = IIF(ativo = 1, 0, 1)
    OUTPUT INSERTED.*
    WHERE id = @id
  `;

  const { recordset } = await r.query(query);
  res.json(recordset[0]);
}

/** DELETE /pedido-parametros/:id  â†’ exclusÃ£o definitiva */
export async function remove(req: Request, res: Response) {
  const id = Number(req.params.id);
  if (!id) return res.status(400).json({ message: "id invÃ¡lido" });

  const r = new sql.Request(pool).input("id", sql.Int, id);

  // opcional: verificaÃ§Ã£o de existÃªncia
  const chk = await r.query("SELECT TOP 1 id FROM dbo.pedido_parametros WHERE id = @id");
  if (chk.recordset.length === 0) return res.status(404).json({ message: "ParÃ¢metro nÃ£o encontrado" });

  const del = await r.query("DELETE FROM dbo.pedido_parametros WHERE id = @id");
  if ((del.rowsAffected?.[0] ?? 0) === 0) {
    return res.status(500).json({ message: "NÃ£o foi possÃ­vel excluir o parÃ¢metro" });
  }

  return res.status(204).send();
}


----- END backend\src\controllers\pedidoParametros.controller.ts -----


----- BEGIN backend\src\controllers\transportadoras.controller.ts -----

import { Request, Response } from "express";
import { z } from "zod";
import { pool } from "../db";

/* ---------- utils ---------- */
const toDbNull = (v?: string | null) =>
  v === undefined || v === null || (typeof v === "string" && v.trim() === "") ? null : v;

const onlyDigits = (s?: string | null) =>
  s == null ? null : s.replace(/\D+/g, "") || null;

/* ---------- schemas ---------- */
const transportadoraSchema = z.object({
  razao_social: z.string().min(1, "RazÃ£o Social Ã© obrigatÃ³ria"),
  cnpj: z.string().nullish(),
  forma_envio: z.string().nullish(),
  telefone: z.string().nullish(),
  endereco: z.string().nullish(),
  referencia: z.string().nullish(),
  ativo: z.boolean().default(true),
});

/* ---------- listagem com busca/paginaÃ§Ã£o ---------- */
export const getTransportadoras = async (req: Request, res: Response) => {
  try {
    const page = Math.max(1, Number(req.query.page ?? 1));
    const limit = Math.min(Math.max(1, Number(req.query.limit ?? 20)), 200);
    const search = String(req.query.search ?? "").trim();
    const ativo = typeof req.query.ativo === "string" ? req.query.ativo.trim() : "";
    const offset = (page - 1) * limit;

    const where: string[] = [];
    const reqList = pool.request();
    const reqCount = pool.request();

    if (search) {
      // usa IX_transportadoras_busca (razao_social) e IX_transportadoras_cnpj
      where.push("(razao_social LIKE @s OR cnpj LIKE @s OR telefone LIKE @s)");
      reqList.input("s", `%${search}%`);
      reqCount.input("s", `%${search}%`);
    }

    if (ativo === "1" || ativo.toUpperCase() === "TRUE") {
      where.push("ativo = 1");
    } else if (ativo === "0" || ativo.toUpperCase() === "FALSE") {
      where.push("ativo = 0");
    }

    const whereSql = where.length ? `WHERE ${where.join(" AND ")}` : "";

    const countSql = `SELECT COUNT(*) AS total FROM transportadoras ${whereSql}`;
    const listSql = `
      SELECT id, razao_social, cnpj, forma_envio, telefone, endereco, referencia, ativo
      FROM transportadoras
      ${whereSql}
      ORDER BY razao_social
      OFFSET @offset ROWS FETCH NEXT @limit ROWS ONLY
    `;

    reqList.input("offset", offset).input("limit", limit);
    const [countRs, listRs] = await Promise.all([reqCount.query(countSql), reqList.query(listSql)]);

    res.json({
      data: listRs.recordset,
      total: Number(countRs.recordset[0]?.total ?? 0),
      page,
      limit,
    });
  } catch (error) {
    console.error("Erro ao buscar transportadoras:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const getTransportadoraById = async (req: Request, res: Response) => {
  const { id } = req.params;
  try {
    const rs = await pool
      .request()
      .input("id", +id)
      .query(
        "SELECT id, razao_social, cnpj, forma_envio, telefone, endereco, referencia, ativo FROM transportadoras WHERE id = @id"
      );
    if (!rs.recordset.length) return res.status(404).json({ message: "Transportadora nÃ£o encontrada" });
    res.json(rs.recordset[0]);
  } catch (error) {
    console.error("Erro ao buscar transportadora:", error);
    res.status(500).json({ message: "Erro interno no servidor" });
  }
};

export const createTransportadora = async (req: Request, res: Response) => {
  try {
    const d = transportadoraSchema.parse(req.body);

    // normalizaÃ§Ãµes leves (aderente ao que vÃ­nhamos fazendo)
    const cnpj = onlyDigits(d.cnpj ?? null);
    const telefone = onlyDigits(d.telefone ?? null);

    // como o Ã­ndice de CNPJ nÃ£o Ã© Ãºnico no DB, garantimos no app
    if (cnpj) {
      const dup = await pool
        .request()
        .input("cnpj", cnpj)
        .query("SELECT TOP 1 id FROM transportadoras WHERE cnpj = @cnpj");
      if (dup.recordset.length) {
        return res.status(409).json({ message: "CNPJ jÃ¡ cadastrado." });
      }
    }

    const rs = await pool
      .request()
      .input("razao_social", d.razao_social)
      .input("cnpj", toDbNull(cnpj))
      .input("forma_envio", toDbNull(d.forma_envio ?? null))
      .input("telefone", toDbNull(telefone))
      .input("endereco", toDbNull(d.endereco ?? null))
      .input("referencia", toDbNull(d.referencia ?? null))
      .input("ativo", d.ativo ?? true)
      .query(`
        INSERT INTO transportadoras
          (razao_social, cnpj, forma_envio, telefone, endereco, referencia, ativo)
        OUTPUT INSERTED.id, INSERTED.razao_social, INSERTED.cnpj, INSERTED.forma_envio, INSERTED.telefone,
               INSERTED.endereco, INSERTED.referencia, INSERTED.ativo
        VALUES
          (@razao_social, @cnpj, @forma_envio, @telefone, @endereco, @referencia, @ativo)
      `);

    res.status(201).json(rs.recordset[0]);
  } catch (error: any) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ message: "Erro de validaÃ§Ã£o", errors: error.errors });
    }
    console.error("Erro ao criar transportadora:", error);
    res.status(500).json({
      message: "Erro interno no servidor",
      detail: error?.message ?? undefined,
      code: error?.number ?? undefined,
    });
  }
};

export const updateTransportadora = async (req: Request, res: Response) => {
  const { id } = req.params;
  try {
    const d = transportadoraSchema.partial().parse(req.body);

    const sanitized: Record<string, any> = {};
    for (const [k, v] of Object.entries(d)) {
      if (k === "cnpj") sanitized.cnpj = toDbNull(onlyDigits(v as string | null));
      else if (k === "telefone") sanitized.telefone = toDbNull(onlyDigits(v as string | null));
      else if (["forma_envio", "endereco", "referencia"].includes(k)) sanitized[k] = toDbNull(v as any);
      else sanitized[k] = v;
    }

    // checagem de duplicidade de CNPJ quando alterado
    if (sanitized.cnpj) {
      const dup = await pool
        .request()
        .input("cnpj", sanitized.cnpj)
        .input("id", +id)
        .query("SELECT TOP 1 id FROM transportadoras WHERE cnpj = @cnpj AND id <> @id");
      if (dup.recordset.length) {
        return res.status(409).json({ message: "CNPJ jÃ¡ cadastrado." });
      }
    }

    const fields = Object.keys(sanitized)
      .map((k) => `${k} = @${k}`)
      .join(", ");
    if (!fields) return res.status(400).json({ message: "Nenhum campo para atualizar" });

    const reqDb = pool.request().input("id", +id);
    Object.entries(sanitized).forEach(([k, v]) => reqDb.input(k, v as any));

    const rs = await reqDb.query(`
      UPDATE transportadoras
         SET ${fields}
       OUTPUT INSERTED.id, INSERTED.razao_social, INSERTED.cnpj, INSERTED.forma_envio, INSERTED.telefone,
              INSERTED.endereco, INSERTED.referencia, INSERTED.ativo
       WHERE id = @id
    `);

    if (!rs.recordset.length) return res.status(404).json({ message: "Transportadora nÃ£o encontrada" });
    res.json(rs.recordset[0]);
  } catch (error: any) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ message: "Erro de validaÃ§Ã£o", errors: error.errors });
    }
    console.error("Erro ao atualizar transportadora:", error);
    res.status(500).json({
      message: "Erro interno no servidor",
      detail: error?.message ?? undefined,
      code: error?.number ?? undefined,
    });
  }
};


export const deleteTransportadora = async (req: Request, res: Response) => {
  const id = Number(req.params.id);
  if (!Number.isFinite(id)) {
    return res.status(400).json({ message: "id invÃ¡lido" });
  }

  const tx = pool.transaction();
  await tx.begin();

  try {
    // 1) Remove todos os vÃ­nculos de clientes com essa transportadora
    await tx
      .request()
      .input("id", id)
      .query(
        `DELETE FROM dbo.cliente_transportadoras
          WHERE transportadora_id = @id`
      );

    // 2) Agora pode apagar a transportadora
    const del = await tx
      .request()
      .input("id", id)
      .query(`DELETE FROM dbo.transportadoras WHERE id = @id`);

    if ((del.rowsAffected?.[0] ?? 0) === 0) {
      await tx.rollback();
      return res.status(404).json({ message: "Transportadora nÃ£o encontrada" });
    }

    await tx.commit();
    return res.status(204).send();
  } catch (error: any) {
    await tx.rollback();
    console.error("Erro ao deletar transportadora:", error);
    // se por algum motivo ainda sobrar referÃªncia em outra tabela:
    if (error?.number === 547) {
      return res
        .status(409)
        .json({ message: "NÃ£o Ã© possÃ­vel excluir: existem referÃªncias relacionadas." });
    }
    return res.status(500).json({ message: "Erro interno no servidor" });
  }
};


----- END backend\src\controllers\transportadoras.controller.ts -----


----- BEGIN backend\src\middleware\auth.middleware.ts -----

import { Request, Response, NextFunction } from "express";
import jwt, { JwtPayload } from "jsonwebtoken";

export type Permissao = "admin" | "administrador" | "financeiro" | "vendedor";

export interface AuthenticatedUser {
  id: number;
  nome: string;
  permissao: Permissao;
}

export interface AuthenticatedRequest extends Request {
  user?: AuthenticatedUser;
}

export const protect = (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
  const bearer = req.headers.authorization;
  if (!bearer || !bearer.startsWith("Bearer ")) {
    return res.status(401).json({ message: "Acesso nÃ£o autorizado" });
  }

  const token = bearer.slice(7);
  try {
    const secret = process.env.JWT_SECRET as string;
    if (!secret) {
      return res.status(500).json({ message: "ConfiguraÃ§Ã£o invÃ¡lida do servidor (JWT_SECRET)" });
    }

    const decoded = jwt.verify(token, secret) as JwtPayload & {
      id: number;
      nome: string;
      permissao: string;
    };

    const permissao = (decoded.permissao || "vendedor").toLowerCase() as Permissao;

    req.user = {
      id: decoded.id,
      nome: decoded.nome,
      permissao,
    };

    next();
  } catch (error) {
    console.error("Erro de autenticaÃ§Ã£o:", error);
    return res.status(401).json({ message: "Token invÃ¡lido ou expirado" });
  }
};

/**
 * authorize() - middleware de permissÃ£o
 * Aceita mÃºltiplos papÃ©is (ex: authorize("admin", "financeiro"))
 * Diferencia 401 (sem token) e 403 (sem permissÃ£o).
 */
export const authorize =
  (...roles: Permissao[]) =>
  (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
    if (!req.user) return res.status(401).json({ message: "Acesso nÃ£o autorizado" });

    // Se nenhum papel foi especificado â†’ qualquer usuÃ¡rio autenticado passa
    if (roles.length === 0) return next();

    const userRole = req.user.permissao.toLowerCase();
    const allowed = roles.map((r) => r.toLowerCase());
    if (!allowed.includes(userRole)) {
      return res.status(403).json({ message: "VocÃª nÃ£o tem permissÃ£o para esta aÃ§Ã£o" });
    }

    next();
  };


----- END backend\src\middleware\auth.middleware.ts -----


----- BEGIN backend\src\routes\auth.routes.ts -----

import { Router } from "express";
import { login, register, me } from "../controllers/auth.controller";
import { protect, authorize } from "../middleware/auth.middleware";

const router = Router();

// pÃºblicas
router.post("/login", login);

// protegidas
router.get("/me", protect, me);
router.post("/register", protect, authorize("admin", "administrador"), register);

export default router;


----- END backend\src\routes\auth.routes.ts -----


----- BEGIN backend\src\routes\blocos.routes.ts -----

import { Router } from "express";
import { protect, authorize } from "../middleware/auth.middleware";
import {
  createBloco,
  addPedidoToBloco,
  addLancamentoToBloco,
  getBlocoSaldo,
  getBlocoSaldos,
  fecharBloco,
  unlinkPedido,
  listBlocos,
  getBlocoById,
  listPedidosDoBloco,
  listLancamentosDoBloco,
  deleteLancamento,
} from "../controllers/blocos.controller";

const router = Router();

router.use(protect);

// Blocos
router.get("/", authorize("admin", "financeiro", "vendedor"), listBlocos);
router.post("/", authorize("admin", "financeiro"), createBloco);
router.get("/:id", authorize("admin", "financeiro", "vendedor"), getBlocoById);

// Saldos
router.get("/:id/saldo", authorize("admin", "financeiro", "vendedor"), getBlocoSaldo);
router.get("/:id/saldos", authorize("admin", "financeiro", "vendedor"), getBlocoSaldos);

// Fechamento
router.post("/:id/fechar", authorize("admin", "financeiro"), fecharBloco);

// Pedidos
router.get("/:id/pedidos", authorize("admin", "financeiro", "vendedor"), listPedidosDoBloco);
router.post("/:id/pedidos", authorize("admin", "financeiro", "vendedor"), addPedidoToBloco);
router.delete("/:id/pedidos/:pedido_id", authorize("admin", "financeiro"), unlinkPedido);

// LanÃ§amentos
router.get("/:id/lancamentos", authorize("admin", "financeiro", "vendedor"), listLancamentosDoBloco);
router.post("/:id/lancamentos", authorize("admin", "financeiro"), addLancamentoToBloco);
router.delete("/:id/lancamentos/:lanc_id", authorize("admin", "financeiro"), deleteLancamento);

export default router;


----- END backend\src\routes\blocos.routes.ts -----


----- BEGIN backend\src\routes\cheques.routes.ts -----

import { Router } from "express";
import { protect, authorize } from "../middleware/auth.middleware";
import { getCheques, liquidarCheque, devolverCheque } from "../controllers/cheques.controller";

const router = Router();

router.use(protect);

// GET /cheques?status=&cliente_id=&bom_para_de=&bom_para_ate=&q=&page=&limit=
router.get("/", authorize("admin", "financeiro"), getCheques);

router.post("/:id/liquidar", authorize("admin", "financeiro"), liquidarCheque);
router.post("/:id/devolver", authorize("admin", "financeiro"), devolverCheque);

export default router;


----- END backend\src\routes\cheques.routes.ts -----


----- BEGIN backend\src\routes\clientes.routes.ts -----

import { Router } from "express";
import { protect, authorize } from "../middleware/auth.middleware";

// controller principal
import * as clientesCtrl from "../controllers/clientes.controller";
// handlers granulares de transportadoras<->clientes
import {
  listarDoCliente as listarTransportadorasDoCliente,
  vincular as vincularTransportadora,
  atualizar as atualizarVinculo,
  remover as removerVinculo,
} from "../controllers/clientesTransportadoras.controller";

const router = Router();
router.use(protect);

/** CRUD + busca */
router
  .route("/")
  .get(authorize("admin", "financeiro", "vendedor"), clientesCtrl.getClientes)
  .post(authorize("admin", "financeiro"), clientesCtrl.createCliente);

router
  .route("/:id")
  .get(authorize("admin", "financeiro", "vendedor"), clientesCtrl.getClienteById)
  .put(authorize("admin", "financeiro"), clientesCtrl.updateCliente)
  .delete(authorize("admin"), clientesCtrl.deleteCliente);

/** Saldo isolado */
router.get(
  "/:id/saldo",
  authorize("admin", "financeiro", "vendedor"),
  clientesCtrl.getClienteSaldo
);

/** Transportadoras (granular) */
router
  .route("/:id/transportadoras")
  .get(authorize("admin", "financeiro", "vendedor"), listarTransportadorasDoCliente)
  .post(authorize("admin", "financeiro"), vincularTransportadora);

router
  .route("/:id/transportadoras/:tid")
  .patch(authorize("admin", "financeiro"), atualizarVinculo)
  .delete(authorize("admin", "financeiro"), removerVinculo);

/** Documentos & links do cliente */
router
  .route("/:cliente_id/documentos")
  .get(authorize("admin", "financeiro", "vendedor"), clientesCtrl.listClienteDocumentos)
  .post(authorize("admin", "financeiro"), clientesCtrl.createClienteDocumento);

router
  .route("/:cliente_id/documentos/:id")
  .put(authorize("admin", "financeiro"), clientesCtrl.updateClienteDocumento)
  .delete(authorize("admin", "financeiro"), clientesCtrl.deleteClienteDocumento);

export default router;


----- END backend\src\routes\clientes.routes.ts -----


----- BEGIN backend\src\routes\dominios.routes.ts -----

import { Router } from "express";
import { protect, authorize } from "../middleware/auth.middleware";
import {
  getDominios,
  getDominioById,
  createDominio,
  updateDominio,
  deleteDominio,
  getDominioItens,
  getDominioItemById,
  createDominioItem,
  updateDominioItem,
  deleteDominioItem,
} from "../controllers/dominios.controller";

const router = Router();

router.use(protect);

// Domínios
router
  .route("/")
  .get(authorize("admin", "financeiro", "vendedor"), getDominios)
  .post(authorize("admin", "financeiro"), createDominio);

router
  .route("/:id")
  .get(authorize("admin", "financeiro", "vendedor"), getDominioById)
  .put(authorize("admin", "financeiro"), updateDominio)
  .delete(authorize("admin"), deleteDominio);

// Itens do Domínio
router
  .route("/:dominio_id/itens")
  .get(authorize("admin", "financeiro", "vendedor"), getDominioItens)
  .post(authorize("admin", "financeiro"), createDominioItem);

router
  .route("/:dominio_id/itens/:id")
  .get(authorize("admin", "financeiro", "vendedor"), getDominioItemById)
  .put(authorize("admin", "financeiro"), updateDominioItem)
  .delete(authorize("admin"), deleteDominioItem);

export default router;


----- END backend\src\routes\dominios.routes.ts -----


----- BEGIN backend\src\routes\fechamentos.routes.ts -----

import { Router } from "express";
import { protect, authorize } from "../middleware/auth.middleware";
import {
  getFechamento,
  createFechamento,
  reprocessFechamento,
} from "../controllers/fechamentos.controller";

const router = Router();

router.use(protect);

/**
 * GET  /fechamentos/:data_ref        -> retorna o fechamento do dia (YYYY-MM-DD)
 * POST /fechamentos/:data_ref        -> cria o fechamento do dia (snapshot)
 */
router
  .route("/:data_ref")
  .get(authorize("admin", "financeiro"), getFechamento)
  .post(authorize("admin", "financeiro"), createFechamento);

/**
 * POST /fechamentos/:data_ref/reprocess
 */
router.post(
  "/:data_ref/reprocess",
  authorize("admin", "financeiro"),
  reprocessFechamento
);

export default router;


----- END backend\src\routes\fechamentos.routes.ts -----


----- BEGIN backend\src\routes\financeiro.routes.ts -----

import { Router } from "express";
import { protect, authorize } from "../middleware/auth.middleware";
import {
  registrarBaixaTitulo,
  estornarBaixaTitulo,
  listTitulos,
  conferenciaDiaria,
  conferenciaAtualizar,
} from "../controllers/financeiro.controller";

const router = Router();

router.use(protect);

// listar tÃ­tulos (usado no /financeiro/receber)
router.get("/titulos", authorize("admin", "financeiro", "vendedor"), listTitulos);

// registrar baixa
router.post(
  "/titulos/:id/baixas",
  authorize("admin", "financeiro"),
  registrarBaixaTitulo
);

// estornar baixa
router.post(
  "/titulos/:id/estornos",
  authorize("admin", "financeiro"),
  estornarBaixaTitulo
);

/** ConferÃªncia diÃ¡ria */
router.get(
  "/conferencia",
  authorize("admin", "financeiro", "vendedor"),
  conferenciaDiaria
);

router.patch(
  "/conferencia",
  authorize("admin", "financeiro"),
  conferenciaAtualizar
);

export default router;


----- END backend\src\routes\financeiro.routes.ts -----


----- BEGIN backend\src\routes\formasPagamento.routes.ts -----

import { Router } from "express";
import { protect, authorize } from "../middleware/auth.middleware";
import {
  getFormasPagamento,
  getFormaPagamentoById,
  createFormaPagamento,
  updateFormaPagamento,
  deleteFormaPagamento,
} from "../controllers/formasPagamento.controller";

const router = Router();

// exige autenticaÃ§Ã£o
router.use(protect);

// LISTAR (qualquer perfil) e CRIAR (admin/financeiro)
// use ?tipo=entrada|saida para alternar o domÃ­nio
router
  .route("/")
  .get(authorize("admin", "financeiro", "vendedor"), getFormasPagamento)
  .post(authorize("admin", "financeiro"), createFormaPagamento);

// DETALHE / ATUALIZAR / EXCLUIR (admin/financeiro para mutaÃ§Ãµes)
// tambÃ©m aceita ?tipo=entrada|saida
router
  .route("/:id")
  .get(authorize("admin", "financeiro", "vendedor"), getFormaPagamentoById)
  .put(authorize("admin", "financeiro"), updateFormaPagamento)
  .delete(authorize("admin"), deleteFormaPagamento);

// Alternativas em POST se necessÃ¡rio
router.post("/:id/update", authorize("admin", "financeiro"), updateFormaPagamento);
router.post("/:id/delete", authorize("admin"), deleteFormaPagamento);

export default router;


----- END backend\src\routes\formasPagamento.routes.ts -----


----- BEGIN backend\src\routes\pagamentos.routes.ts -----

import { Router } from "express";
import { protect, authorize } from "../middleware/auth.middleware";
import {
  getPagamentos,
  getPagamentoById,
  createPagamento,
  updatePagamento,
  deletePagamento,
  getSaldo,
  getHistorico,
} from "../controllers/pagamentos.controller";

const router = Router();

router.use(protect);

// histÃ³rico e saldo â€“ leitura para todos perfis operacionais
router.get("/historico", authorize("admin", "financeiro", "vendedor"), getHistorico);
router.get("/:cliente_id/saldo", authorize("admin", "financeiro", "vendedor"), getSaldo);

// lista genÃ©rica / cria
router
  .route("/")
  .get(authorize("admin", "financeiro", "vendedor"), getPagamentos)
  .post(authorize("admin", "financeiro"), createPagamento);

// detalhe / update / delete
router
  .route("/:id")
  .get(authorize("admin", "financeiro", "vendedor"), getPagamentoById)
  .put(authorize("admin", "financeiro"), updatePagamento)
  .delete(authorize("admin", "financeiro"), deletePagamento);

export default router;


----- END backend\src\routes\pagamentos.routes.ts -----


----- BEGIN backend\src\routes\pedidoParametros.routes.ts -----

import { Router } from "express";
import * as ctrl from "../controllers/pedidoParametros.controller";
import { protect, authorize } from "../middleware/auth.middleware";

const router = Router();

router.use(protect);

// GET /pedido-parametros?tipo=&ativo=&q=
router.get("/", ctrl.list);

// POST /pedido-parametros { tipo, descricao, exige_bom_para?, exige_tipo_cheque? }
router.post("/", ctrl.create);

// PATCH /pedido-parametros/:id { descricao?, ativo?, tipo?, exige_bom_para?, exige_tipo_cheque? }
router.patch("/:id", ctrl.update);

// PATCH /pedido-parametros/:id/toggle
router.patch("/:id/toggle", ctrl.toggle);

// DELETE /pedido-parametros/:id
router.delete("/:id", ctrl.remove);

export default router;


----- END backend\src\routes\pedidoParametros.routes.ts -----


----- BEGIN backend\src\routes\transportadoras.routes.ts -----

import { Router } from "express";
import { protect, authorize } from "../middleware/auth.middleware";
import {
  getTransportadoras,
  getTransportadoraById,
  createTransportadora,
  updateTransportadora,
  deleteTransportadora,
} from "../controllers/transportadoras.controller";

const router = Router();

router.use(protect);

router
  .route("/")
  .get(authorize("admin", "financeiro", "vendedor"), getTransportadoras) // ?search=&page=&limit=&ativo=
  .post(authorize("admin", "financeiro"), createTransportadora);

router
  .route("/:id")
  .get(authorize("admin", "financeiro", "vendedor"), getTransportadoraById)
  .put(authorize("admin", "financeiro"), updateTransportadora)
  .delete(authorize("admin", "financeiro"), deleteTransportadora);

export default router;


----- END backend\src\routes\transportadoras.routes.ts -----


----- BEGIN backend\src\app.ts -----

import express, { NextFunction, Request, Response } from "express";
import cors from "cors";
// import morgan from "morgan";

import authRoutes from "./routes/auth.routes";
import clientesRoutes from "./routes/clientes.routes";
import blocosRoutes from "./routes/blocos.routes";
import dominiosRoutes from "./routes/dominios.routes";
import transportadorasRoutes from "./routes/transportadoras.routes";
import fechamentosRoutes from "./routes/fechamentos.routes";
import chequesRoutes from "./routes/cheques.routes";
import formasPagamentoRoutes from "./routes/formasPagamento.routes";
import pagamentosRoutes from "./routes/pagamentos.routes";
import pedidoParametrosRoutes from "./routes/pedidoParametros.routes";
import financeiroRoutes from "./routes/financeiro.routes";
import { connectDB } from "./db";

const app = express();

/* ---------- middlewares básicos ---------- */
app.use(cors());
// app.use(morgan("dev"));
app.use(express.json({ limit: "10mb" }));
app.use(express.urlencoded({ extended: false }));

/* ---------- rotas públicas simples ---------- */
app.get("/", (_req, res) => res.send("API is running"));
app.get("/healthz", (_req, res) => res.status(200).json({ status: "ok" }));
app.get("/ready", (_req, res) => res.status(200).json({ ready: true }));
/* ---------- rotas da aplicação ---------- */
app.use("/auth", authRoutes);
app.use("/clientes", clientesRoutes);
app.use("/blocos", blocosRoutes);
app.use("/dominios", dominiosRoutes);
app.use("/transportadoras", transportadorasRoutes);
app.use("/fechamentos", fechamentosRoutes);
app.use("/cheques", chequesRoutes);
app.use("/pagamentos/formas", formasPagamentoRoutes);
app.use("/pagamentos", pagamentosRoutes);
app.use("/pedido-parametros", pedidoParametrosRoutes);
app.use("/financeiro", financeiroRoutes);


/* ---------- 404 ---------- */
app.use((req, res) => {
  res.status(404).json({
    message: "Rota não encontrada",
    path: req.originalUrl,
    method: req.method,
  });
});

/* ---------- error handler ---------- */
app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
  const status = err?.status || err?.statusCode || 500;
  if (err?.name === "ZodError") {
    return res.status(400).json({ message: "Erro de validação", errors: err.errors });
  }
  console.error("Unhandled error:", err);
  res.status(status).json({ message: err?.message || "Erro interno no servidor" });
});

/* ---------- bootstrap ---------- */
const port = Number(process.env.PORT || 3333);

async function start() {
  try {
    await connectDB();
    app.listen(port, () => {
      console.log(`API on :${port}`);
    });
  } catch (e) {
    console.error("Falha ao iniciar a API:", e);
    process.exit(1);
  }
}

void start();

export default app;


----- END backend\src\app.ts -----


----- BEGIN backend\src\db.ts -----

import "dotenv/config";
import sql from "mssql";

/**
 * Configuração do SQL Server (alinhada ao MSSQL 2016+).
 * Mantém opções via .env e adiciona timeouts razoáveis.
 */
export const dbConfig: sql.config = {
  server: process.env.MSSQL_SERVER!,
  database: process.env.MSSQL_DB!,
  user: process.env.MSSQL_USER!,
  password: process.env.MSSQL_PASSWORD!,
  options: {
    trustServerCertificate: (process.env.MSSQL_TRUST_CERT ?? "true") === "true",
    encrypt: (process.env.MSSQL_ENCRYPT ?? "false") === "true",
    enableArithAbort: true,
  },
  pool: {
    max: Number(process.env.MSSQL_POOL_MAX ?? 10),
    min: Number(process.env.MSSQL_POOL_MIN ?? 1),
    idleTimeoutMillis: Number(process.env.MSSQL_POOL_IDLE ?? 30000),
  },
  requestTimeout: Number(process.env.MSSQL_REQUEST_TIMEOUT ?? 30000),
  connectionTimeout: Number(process.env.MSSQL_CONN_TIMEOUT ?? 15000),
};

export const pool = new sql.ConnectionPool(dbConfig);

export const connectDB = async () => {
  try {
    await pool.connect();
    console.log("Conectado ao banco de dados com sucesso!");
  } catch (err) {
    console.error("Falha na conexão com o banco de dados:", err);
    process.exit(1);
  }
};

// log básico de erros no pool (evita processo “silencioso”)
pool.on("error", (err) => {
  console.error("[MSSQL pool error]", err);
});

export type MSSql = typeof sql;
export { sql };


----- END backend\src\db.ts -----


----- BEGIN backend\src\migrate.ts -----

import "dotenv/config";
import fs from "fs";
import path from "path";
import { pool, connectDB } from "./db";

const runMigrations = async () => {
  try {
    await connectDB();
    console.log("Conectado ao banco de dados para migraÃ§Ã£o.");

    const migrationsDir = path.join(__dirname, "../../db/migrations");
    const migrationFiles = fs.readdirSync(migrationsDir).sort();

    for (const file of migrationFiles) {
      if (file.endsWith(".sql")) {
        console.log(`Executando migraÃ§Ã£o: ${file}`);
        const script = fs.readFileSync(path.join(migrationsDir, file), "utf-8");
        
        // Separa o script em lotes usando "GO"
        const batches = script.split(/^\s*GO\s*$/im);

        for (const batch of batches) {
          if (batch.trim() !== "") {
            await pool.request().batch(batch);
          }
        }
        console.log(`MigraÃ§Ã£o ${file} executada com sucesso.`);
      }
    }

    console.log("Todas as migraÃ§Ãµes foram executadas.");
  } catch (error) {
    console.error("Erro ao executar migraÃ§Ãµes:", error);
  } finally {
    await pool.close();
    console.log("ConexÃ£o com o banco de dados fechada.");
  }
};

runMigrations();


----- END backend\src\migrate.ts -----


----- BEGIN backend\src\seed.ts -----

// src/seed.ts
import "dotenv/config";
import bcrypt from "bcryptjs";
import { pool, connectDB } from "./db";

const seedAdminUser = async () => {
  try {
    await connectDB();

    const adminEmail = process.env.SEED_ADMIN_EMAIL || "admin@megasistemas.com";
    const adminPassword = process.env.SEED_ADMIN_PASSWORD || "admin";
    const adminPermissao: "admin" = "admin"; // precisa ser minÃºsculo por causa do CHECK no banco

    // Verifica se jÃ¡ existe
    const userExists = await pool
      .request()
      .input("email", adminEmail)
      .query("SELECT id FROM usuarios WHERE email = @email");

    if (userExists.recordset.length > 0) {
      console.log("UsuÃ¡rio admin jÃ¡ existe. Seed nÃ£o executado.");
      return;
    }

    // Cria o admin
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(adminPassword, salt);

    await pool
      .request()
      .input("nome", "Administrador")
      .input("email", adminEmail)
      .input("senha_hash", hashedPassword)
      .input("permissao", adminPermissao) // <- minÃºsculo
      .query(
        `INSERT INTO usuarios (nome, email, senha_hash, permissao, ativo)
         VALUES (@nome, @email, @senha_hash, @permissao, 1)`
      );

    console.log(`UsuÃ¡rio admin criado com sucesso! Email: ${adminEmail}`);
  } catch (error) {
    console.error("Erro ao executar o seed do usuÃ¡rio admin:", error);
  } finally {
    // como Ã© um script isolado, pode fechar o pool
    await pool.close();
    console.log("ConexÃ£o com o banco de dados fechada.");
  }
};

seedAdminUser();


----- END backend\src\seed.ts -----


----- BEGIN backend\.env -----

# MSSQL_SERVER=DESKTOP-A9FSDLJ           # ou DESKTOP-A9FSDLJ\SQLEXPRESS
# MSSQL_DB=mega_financeiro_novo
# MSSQL_USER=mega_user
# MSSQL_PASSWORD=Mega123456!             # mesma do script
# MSSQL_ENCRYPT=false
# MSSQL_TRUST_CERT=true
# PORT=3333
# JWT_SECRET=uma-chave-bem-forte

PORT=4010
NODE_ENV=development
JWT_SECRET=uma-chave-bem-forte
CORS_ORIGIN=http://localhost:5173,http://127.0.0.1:5173

MSSQL_SERVER=72.60.24.120
MSSQL_DB=mega_financeiro
MSSQL_USER=novo_admin
MSSQL_PASSWORD=NovaSenha@123
MSSQL_ENCRYPT=false
MSSQL_TRUST_CERT=true


----- END backend\.env -----


----- BEGIN backend\dump_backend_package.json -----

{
  "name": "backend",
  "version": "1.0.0",
  "description": "API MEGA",
  "main": "dist/app.js",
  "type": "commonjs",
  "engines": {
    "node": ">=18.0.0"
  },
  "scripts": {
    "dev": "ts-node-dev --respawn --transpile-only src/app.ts",
    "build": "tsc",
    "start": "node dist/app.js",
    "migrate": "ts-node-dev --respawn --transpile-only src/migrate.ts",
    "seed": "ts-node-dev --respawn --transpile-only src/seed.ts",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^5.1.0",
    "jsonwebtoken": "^9.0.2",
    "morgan": "^1.10.1",
    "mssql": "^11.0.1",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/bcryptjs": "^2.4.6",
    "@types/cors": "^2.8.19",
    "@types/express": "^5.0.3",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/mssql": "^9.1.8",
    "@types/node": "^20.12.12",
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.9.2"
  }
}


----- END backend\dump_backend_package.json -----


----- BEGIN backend\package-lock.json -----

{
  "name": "backend",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "backend",
      "version": "1.0.0",
      "dependencies": {
        "bcryptjs": "^2.4.3",
        "cors": "^2.8.5",
        "dotenv": "^16.4.5",
        "express": "^5.1.0",
        "jsonwebtoken": "^9.0.2",
        "morgan": "^1.10.1",
        "mssql": "^11.0.1",
        "zod": "^3.23.8"
      },
      "devDependencies": {
        "@types/bcryptjs": "^2.4.6",
        "@types/cors": "^2.8.19",
        "@types/express": "^5.0.3",
        "@types/jsonwebtoken": "^9.0.10",
        "@types/mssql": "^9.1.8",
        "@types/node": "^20.12.12",
        "ts-node-dev": "^2.0.0",
        "typescript": "^5.9.2"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/@azure-rest/core-client": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/@azure-rest/core-client/-/core-client-2.5.0.tgz",
      "integrity": "sha512-KMVIPxG6ygcQ1M2hKHahF7eddKejYsWTjoLIfTWiqnaj42dBkYzj4+S8rK9xxmlOaEHKZHcMrRbm0NfN4kgwHw==",
      "license": "MIT",
      "dependencies": {
        "@azure/abort-controller": "^2.0.0",
        "@azure/core-auth": "^1.9.0",
        "@azure/core-rest-pipeline": "^1.5.0",
        "@azure/core-tracing": "^1.0.1",
        "@typespec/ts-http-runtime": "^0.3.0",
        "tslib": "^2.6.2"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@azure/abort-controller": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/@azure/abort-controller/-/abort-controller-2.1.2.tgz",
      "integrity": "sha512-nBrLsEWm4J2u5LpAPjxADTlq3trDgVZZXHNKabeXZtpq3d3AbN/KGO82R87rdDz5/lYB024rtEf10/q0urNgsA==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.6.2"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/@azure/core-auth": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/@azure/core-auth/-/core-auth-1.10.0.tgz",
      "integrity": "sha512-88Djs5vBvGbHQHf5ZZcaoNHo6Y8BKZkt3cw2iuJIQzLEgH4Ox6Tm4hjFhbqOxyYsgIG/eJbFEHpxRIfEEWv5Ow==",
      "license": "MIT",
      "dependencies": {
        "@azure/abort-controller": "^2.0.0",
        "@azure/core-util": "^1.11.0",
        "tslib": "^2.6.2"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@azure/core-client": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/@azure/core-client/-/core-client-1.10.0.tgz",
      "integrity": "sha512-O4aP3CLFNodg8eTHXECaH3B3CjicfzkxVtnrfLkOq0XNP7TIECGfHpK/C6vADZkWP75wzmdBnsIA8ksuJMk18g==",
      "license": "MIT",
      "dependencies": {
        "@azure/abort-controller": "^2.0.0",
        "@azure/core-auth": "^1.4.0",
        "@azure/core-rest-pipeline": "^1.20.0",
        "@azure/core-tracing": "^1.0.0",
        "@azure/core-util": "^1.6.1",
        "@azure/logger": "^1.0.0",
        "tslib": "^2.6.2"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@azure/core-http-compat": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@azure/core-http-compat/-/core-http-compat-2.3.0.tgz",
      "integrity": "sha512-qLQujmUypBBG0gxHd0j6/Jdmul6ttl24c8WGiLXIk7IHXdBlfoBqW27hyz3Xn6xbfdyVSarl1Ttbk0AwnZBYCw==",
      "license": "MIT",
      "dependencies": {
        "@azure/abort-controller": "^2.0.0",
        "@azure/core-client": "^1.3.0",
        "@azure/core-rest-pipeline": "^1.20.0"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/@azure/core-lro": {
      "version": "2.7.2",
      "resolved": "https://registry.npmjs.org/@azure/core-lro/-/core-lro-2.7.2.tgz",
      "integrity": "sha512-0YIpccoX8m/k00O7mDDMdJpbr6mf1yWo2dfmxt5A8XVZVVMz2SSKaEbMCeJRvgQ0IaSlqhjT47p4hVIRRy90xw==",
      "license": "MIT",
      "dependencies": {
        "@azure/abort-controller": "^2.0.0",
        "@azure/core-util": "^1.2.0",
        "@azure/logger": "^1.0.0",
        "tslib": "^2.6.2"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/@azure/core-paging": {
      "version": "1.6.2",
      "resolved": "https://registry.npmjs.org/@azure/core-paging/-/core-paging-1.6.2.tgz",
      "integrity": "sha512-YKWi9YuCU04B55h25cnOYZHxXYtEvQEbKST5vqRga7hWY9ydd3FZHdeQF8pyh+acWZvppw13M/LMGx0LABUVMA==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.6.2"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/@azure/core-rest-pipeline": {
      "version": "1.22.0",
      "resolved": "https://registry.npmjs.org/@azure/core-rest-pipeline/-/core-rest-pipeline-1.22.0.tgz",
      "integrity": "sha512-OKHmb3/Kpm06HypvB3g6Q3zJuvyXcpxDpCS1PnU8OV6AJgSFaee/covXBcPbWc6XDDxtEPlbi3EMQ6nUiPaQtw==",
      "license": "MIT",
      "dependencies": {
        "@azure/abort-controller": "^2.0.0",
        "@azure/core-auth": "^1.8.0",
        "@azure/core-tracing": "^1.0.1",
        "@azure/core-util": "^1.11.0",
        "@azure/logger": "^1.0.0",
        "@typespec/ts-http-runtime": "^0.3.0",
        "tslib": "^2.6.2"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@azure/core-tracing": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@azure/core-tracing/-/core-tracing-1.3.0.tgz",
      "integrity": "sha512-+XvmZLLWPe67WXNZo9Oc9CrPj/Tm8QnHR92fFAFdnbzwNdCH1h+7UdpaQgRSBsMY+oW1kHXNUZQLdZ1gHX3ROw==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.6.2"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@azure/core-util": {
      "version": "1.13.0",
      "resolved": "https://registry.npmjs.org/@azure/core-util/-/core-util-1.13.0.tgz",
      "integrity": "sha512-o0psW8QWQ58fq3i24Q1K2XfS/jYTxr7O1HRcyUE9bV9NttLU+kYOH82Ixj8DGlMTOWgxm1Sss2QAfKK5UkSPxw==",
      "license": "MIT",
      "dependencies": {
        "@azure/abort-controller": "^2.0.0",
        "@typespec/ts-http-runtime": "^0.3.0",
        "tslib": "^2.6.2"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@azure/identity": {
      "version": "4.11.1",
      "resolved": "https://registry.npmjs.org/@azure/identity/-/identity-4.11.1.tgz",
      "integrity": "sha512-0ZdsLRaOyLxtCYgyuqyWqGU5XQ9gGnjxgfoNTt1pvELGkkUFrMATABZFIq8gusM7N1qbqpVtwLOhk0d/3kacLg==",
      "license": "MIT",
      "dependencies": {
        "@azure/abort-controller": "^2.0.0",
        "@azure/core-auth": "^1.9.0",
        "@azure/core-client": "^1.9.2",
        "@azure/core-rest-pipeline": "^1.17.0",
        "@azure/core-tracing": "^1.0.0",
        "@azure/core-util": "^1.11.0",
        "@azure/logger": "^1.0.0",
        "@azure/msal-browser": "^4.2.0",
        "@azure/msal-node": "^3.5.0",
        "open": "^10.1.0",
        "tslib": "^2.2.0"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@azure/keyvault-common": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@azure/keyvault-common/-/keyvault-common-2.0.0.tgz",
      "integrity": "sha512-wRLVaroQtOqfg60cxkzUkGKrKMsCP6uYXAOomOIysSMyt1/YM0eUn9LqieAWM8DLcU4+07Fio2YGpPeqUbpP9w==",
      "license": "MIT",
      "dependencies": {
        "@azure/abort-controller": "^2.0.0",
        "@azure/core-auth": "^1.3.0",
        "@azure/core-client": "^1.5.0",
        "@azure/core-rest-pipeline": "^1.8.0",
        "@azure/core-tracing": "^1.0.0",
        "@azure/core-util": "^1.10.0",
        "@azure/logger": "^1.1.4",
        "tslib": "^2.2.0"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/@azure/keyvault-keys": {
      "version": "4.10.0",
      "resolved": "https://registry.npmjs.org/@azure/keyvault-keys/-/keyvault-keys-4.10.0.tgz",
      "integrity": "sha512-eDT7iXoBTRZ2n3fLiftuGJFD+yjkiB1GNqzU2KbY1TLYeXeSPVTVgn2eJ5vmRTZ11978jy2Kg2wI7xa9Tyr8ag==",
      "license": "MIT",
      "dependencies": {
        "@azure-rest/core-client": "^2.3.3",
        "@azure/abort-controller": "^2.1.2",
        "@azure/core-auth": "^1.9.0",
        "@azure/core-http-compat": "^2.2.0",
        "@azure/core-lro": "^2.7.2",
        "@azure/core-paging": "^1.6.2",
        "@azure/core-rest-pipeline": "^1.19.0",
        "@azure/core-tracing": "^1.2.0",
        "@azure/core-util": "^1.11.0",
        "@azure/keyvault-common": "^2.0.0",
        "@azure/logger": "^1.1.4",
        "tslib": "^2.8.1"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/@azure/logger": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@azure/logger/-/logger-1.3.0.tgz",
      "integrity": "sha512-fCqPIfOcLE+CGqGPd66c8bZpwAji98tZ4JI9i/mlTNTlsIWslCfpg48s/ypyLxZTump5sypjrKn2/kY7q8oAbA==",
      "license": "MIT",
      "dependencies": {
        "@typespec/ts-http-runtime": "^0.3.0",
        "tslib": "^2.6.2"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@azure/msal-browser": {
      "version": "4.22.0",
      "resolved": "https://registry.npmjs.org/@azure/msal-browser/-/msal-browser-4.22.0.tgz",
      "integrity": "sha512-JLWHzAW1aZ/L190Th56jN+2t3T1dMvXOs1obXYLEr3ZWi81vVmBCt0di3mPvTTOiWoE0Cf/4hVQ/LINilqjObA==",
      "license": "MIT",
      "dependencies": {
        "@azure/msal-common": "15.12.0"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/@azure/msal-common": {
      "version": "15.12.0",
      "resolved": "https://registry.npmjs.org/@azure/msal-common/-/msal-common-15.12.0.tgz",
      "integrity": "sha512-4ucXbjVw8KJ5QBgnGJUeA07c8iznwlk5ioHIhI4ASXcXgcf2yRFhWzYOyWg/cI49LC9ekpFJeQtO3zjDTbl6TQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/@azure/msal-node": {
      "version": "3.7.3",
      "resolved": "https://registry.npmjs.org/@azure/msal-node/-/msal-node-3.7.3.tgz",
      "integrity": "sha512-MoJxkKM/YpChfq4g2o36tElyzNUMG8mfD6u8NbuaPAsqfGpaw249khAcJYNoIOigUzRw45OjXCOrexE6ImdUxg==",
      "license": "MIT",
      "dependencies": {
        "@azure/msal-common": "15.12.0",
        "jsonwebtoken": "^9.0.0",
        "uuid": "^8.3.0"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/@cspotcode/source-map-support": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/trace-mapping": "0.3.9"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
      "integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.0.3",
        "@jridgewell/sourcemap-codec": "^1.4.10"
      }
    },
    "node_modules/@js-joda/core": {
      "version": "5.6.5",
      "resolved": "https://registry.npmjs.org/@js-joda/core/-/core-5.6.5.tgz",
      "integrity": "sha512-3zwefSMwHpu8iVUW8YYz227sIv6UFqO31p1Bf1ZH/Vom7CmNyUsXjDBlnNzcuhmOL1XfxZ3nvND42kR23XlbcQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@tediousjs/connection-string": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/@tediousjs/connection-string/-/connection-string-0.5.0.tgz",
      "integrity": "sha512-7qSgZbincDDDFyRweCIEvZULFAw5iz/DeunhvuxpL31nfntX3P4Yd4HkHBRg9H8CdqY1e5WFN1PZIz/REL9MVQ==",
      "license": "MIT"
    },
    "node_modules/@tsconfig/node10": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.11.tgz",
      "integrity": "sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node12": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node14": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node16": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/bcryptjs": {
      "version": "2.4.6",
      "resolved": "https://registry.npmjs.org/@types/bcryptjs/-/bcryptjs-2.4.6.tgz",
      "integrity": "sha512-9xlo6R2qDs5uixm0bcIqCeMCE6HiQsIyel9KQySStiyqNl2tnj2mP3DX1Nf56MD6KMenNNlBBsy3LJ7gUEQPXQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/body-parser": {
      "version": "1.19.6",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.6.tgz",
      "integrity": "sha512-HLFeCYgz89uk22N5Qg3dvGvsv46B8GLvKKo1zKG4NybA8U2DiEO3w9lqGg29t/tfLRJpJ6iQxnVw4OnB7MoM9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/connect": {
      "version": "3.4.38",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/cors": {
      "version": "2.8.19",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.19.tgz",
      "integrity": "sha512-mFNylyeyqN93lfe/9CSxOGREz8cpzAhH+E93xJ4xWQf62V8sQ/24reV2nyzUWM6H6Xji+GGHpkbLe7pVoUEskg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/express": {
      "version": "5.0.3",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-5.0.3.tgz",
      "integrity": "sha512-wGA0NX93b19/dZC1J18tKWVIYWyyF2ZjT9vin/NRu0qzzvfVzWjs04iq2rQ3H65vCTQYlRqs3YHfY7zjdV+9Kw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^5.0.0",
        "@types/serve-static": "*"
      }
    },
    "node_modules/@types/express-serve-static-core": {
      "version": "5.0.7",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-5.0.7.tgz",
      "integrity": "sha512-R+33OsgWw7rOhD1emjU7dzCDHucJrgJXMA5PYCzJxVil0dsyx5iBEPHqpPfiKNJQb7lZ1vxwoLR4Z87bBUpeGQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/http-errors": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.5.tgz",
      "integrity": "sha512-r8Tayk8HJnX0FztbZN7oVqGccWgw98T/0neJphO91KkmOzug1KkofZURD4UaD5uH8AqcFLfdPErnBod0u71/qg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/jsonwebtoken": {
      "version": "9.0.10",
      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.10.tgz",
      "integrity": "sha512-asx5hIG9Qmf/1oStypjanR7iKTv0gXQ1Ov/jfrX6kS/EO0OFni8orbmGCn0672NHR3kXHwpAwR+B368ZGN/2rA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/ms": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/mime": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz",
      "integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/ms": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@types/ms/-/ms-2.1.0.tgz",
      "integrity": "sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/mssql": {
      "version": "9.1.8",
      "resolved": "https://registry.npmjs.org/@types/mssql/-/mssql-9.1.8.tgz",
      "integrity": "sha512-mt9h5jWj+DYE5jxnKaWSV/GqDf9FV52XYVk6T3XZF69noEe+JJV6MKirii48l81+cjmAkSq+qeKX+k61fHkYrQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "tarn": "^3.0.1",
        "tedious": "*"
      }
    },
    "node_modules/@types/node": {
      "version": "20.19.12",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.19.12.tgz",
      "integrity": "sha512-lSOjyS6vdO2G2g2CWrETTV3Jz2zlCXHpu1rcubLKpz9oj+z/1CceHlj+yq53W+9zgb98nSov/wjEKYDNauD+Hw==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.21.0"
      }
    },
    "node_modules/@types/qs": {
      "version": "6.14.0",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.14.0.tgz",
      "integrity": "sha512-eOunJqu0K1923aExK6y8p6fsihYEn/BYuQ4g0CxAAgFc4b/ZLN4CrsRZ55srTdqoiLzU2B2evC+apEIxprEzkQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/range-parser": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.7.tgz",
      "integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/readable-stream": {
      "version": "4.0.21",
      "resolved": "https://registry.npmjs.org/@types/readable-stream/-/readable-stream-4.0.21.tgz",
      "integrity": "sha512-19eKVv9tugr03IgfXlA9UVUVRbW6IuqRO5B92Dl4a6pT7K8uaGrNS0GkxiZD0BOk6PLuXl5FhWl//eX/pzYdTQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/send": {
      "version": "0.17.5",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.5.tgz",
      "integrity": "sha512-z6F2D3cOStZvuk2SaP6YrwkNO65iTZcwA2ZkSABegdkAh/lf+Aa/YQndZVfmEXT5vgAp6zv06VQ3ejSVjAny4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "node_modules/@types/serve-static": {
      "version": "1.15.8",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.8.tgz",
      "integrity": "sha512-roei0UY3LhpOJvjbIP6ZZFngyLKl5dskOtDhxY5THRSpO+ZI+nzJ+m5yUMzGrp89YRa7lvknKkMYjqQFGwA7Sg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/http-errors": "*",
        "@types/node": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@types/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha512-xevGOReSYGM7g/kUBZzPqCrR/KYAo+F0yiPc85WFTJa0MSLtyFTVTU6cJu/aV4mid7IffDIWqo69THF2o4JiEQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/strip-json-comments": {
      "version": "0.0.30",
      "resolved": "https://registry.npmjs.org/@types/strip-json-comments/-/strip-json-comments-0.0.30.tgz",
      "integrity": "sha512-7NQmHra/JILCd1QqpSzl8+mJRc8ZHz3uDm8YV1Ks9IhK0epEiTw8aIErbvH9PI+6XbqhyIQy3462nEsn7UVzjQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@typespec/ts-http-runtime": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/@typespec/ts-http-runtime/-/ts-http-runtime-0.3.0.tgz",
      "integrity": "sha512-sOx1PKSuFwnIl7z4RN0Ls7N9AQawmR9r66eI5rFCzLDIs8HTIYrIpH9QjYWoX0lkgGrkLxXhi4QnK7MizPRrIg==",
      "license": "MIT",
      "dependencies": {
        "http-proxy-agent": "^7.0.0",
        "https-proxy-agent": "^7.0.0",
        "tslib": "^2.6.2"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/abort-controller": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
      "license": "MIT",
      "dependencies": {
        "event-target-shim": "^5.0.0"
      },
      "engines": {
        "node": ">=6.5"
      }
    },
    "node_modules/accepts": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-2.0.0.tgz",
      "integrity": "sha512-5cvg6CtKwfgdmVqY1WIiXKc3Q1bkRqGLi+2W/6ao+6Y7gu/RCwRuAhGEzh5B4KlszSuTLgZYuqFqo5bImjNKng==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "^3.0.0",
        "negotiator": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "8.3.4",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.4.tgz",
      "integrity": "sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "acorn": "^8.11.0"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/agent-base": {
      "version": "7.1.4",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.4.tgz",
      "integrity": "sha512-MnA+YT8fwfJPgBx3m60MNqakm30XOkyIoH1y6huTQvC0PwZG7ki8NacLBcrPbNoo8vEZy7Jpuk7+jMO+CUovTQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/basic-auth": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz",
      "integrity": "sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.1.2"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/basic-auth/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/bcryptjs": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ==",
      "license": "MIT"
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/bl": {
      "version": "6.1.2",
      "resolved": "https://registry.npmjs.org/bl/-/bl-6.1.2.tgz",
      "integrity": "sha512-6J3oG82fpJ71WF4l0W6XslkwAPMr+Zcp+AmdxJ0L8LsXNzFeO8GYesV2J9AzGArBjrsb2xR50Ocbn/CL1B44TA==",
      "license": "MIT",
      "dependencies": {
        "@types/readable-stream": "^4.0.0",
        "buffer": "^6.0.3",
        "inherits": "^2.0.4",
        "readable-stream": "^4.2.0"
      }
    },
    "node_modules/body-parser": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-2.2.0.tgz",
      "integrity": "sha512-02qvAaxv8tp7fBa/mw1ga98OGm+eCbqzJOKoRt70sLmfEEi+jyBYVTDGfCL/k06/4EMk/z01gCe7HoCH/f2LTg==",
      "license": "MIT",
      "dependencies": {
        "bytes": "^3.1.2",
        "content-type": "^1.0.5",
        "debug": "^4.4.0",
        "http-errors": "^2.0.0",
        "iconv-lite": "^0.6.3",
        "on-finished": "^2.4.1",
        "qs": "^6.14.0",
        "raw-body": "^3.0.0",
        "type-is": "^2.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/buffer": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.2.1"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/bundle-name": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/bundle-name/-/bundle-name-4.1.0.tgz",
      "integrity": "sha512-tjwM5exMg6BGRI+kNmTntNsvdZS1X8BFYS6tnJ2hdH0kVxM6/eVZ2xy+FqStSWvYmtfFMDLIxurorHwDKfDz5Q==",
      "license": "MIT",
      "dependencies": {
        "run-applescript": "^7.0.0"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/commander": {
      "version": "11.1.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-11.1.0.tgz",
      "integrity": "sha512-yPVavfyCcRhmorC7rWlkHn15b4wDVgVmBA7kV4QVBsF7kv/9TKJAbAXVTxvTnwP8HHKjRCJDClKbciiYS7p0DQ==",
      "license": "MIT",
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/content-disposition": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-1.0.0.tgz",
      "integrity": "sha512-Au9nRL8VNUut/XSzbQA38+M78dzP4D+eqg3gfJHMIHHYa3bg067xj1KxMUWj+VULbiZMowKngFFbKczUrNJ1mg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.7.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
      "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.2.2.tgz",
      "integrity": "sha512-D76uU73ulSXrD1UXF4KE2TMxVVwhsnCgfAyTg9k8P6KGZjlXKrOLe4dJQKI3Bxi5wjesZoFXJWElNWBjPZMbhg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.6.0"
      }
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/default-browser": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/default-browser/-/default-browser-5.2.1.tgz",
      "integrity": "sha512-WY/3TUME0x3KPYdRRxEJJvXRHV4PyPoUsxtZa78lwItwRQRHhd2U9xOscaT/YTf8uCXIAjeJOFBVEh/7FtD8Xg==",
      "license": "MIT",
      "dependencies": {
        "bundle-name": "^4.1.0",
        "default-browser-id": "^5.0.0"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/default-browser-id": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/default-browser-id/-/default-browser-id-5.0.0.tgz",
      "integrity": "sha512-A6p/pu/6fyBcA1TRz/GqWYPViplrftcW2gZC9q79ngNCKAeR/X3gcEdXQHl4KNXV+3wgIJ1CPkJQ3IHM6lcsyA==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/define-lazy-prop": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/define-lazy-prop/-/define-lazy-prop-3.0.0.tgz",
      "integrity": "sha512-N+MeXYoqr3pOgn8xfyRPREN7gHakLYjhsHhWGT3fWAiL4IkAt0iDw14QiiEm2bE30c5XX5q0FtAA3CK5f9/BUg==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.3.1"
      }
    },
    "node_modules/dotenv": {
      "version": "16.6.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.6.1.tgz",
      "integrity": "sha512-uBq4egWHTcTt33a72vpSG0z3HnPuIl6NqYcTrKEg2azoEyl2hpW0zqlxysq2pK9HlDIHyHyakeYaYnSAwd8bow==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/dynamic-dedupe": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/dynamic-dedupe/-/dynamic-dedupe-0.3.0.tgz",
      "integrity": "sha512-ssuANeD+z97meYOqd50e04Ze5qp4bPqo8cCkI4TRjZkzAUgIDTrXV1R8QCdINpiI+hw14+rYazvTRdQrz0/rFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "xtend": "^4.0.0"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/event-target-shim": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/events": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/events/-/events-3.3.0.tgz",
      "integrity": "sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8.x"
      }
    },
    "node_modules/express": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/express/-/express-5.1.0.tgz",
      "integrity": "sha512-DT9ck5YIRU+8GYzzU5kT3eHGA5iL+1Zd0EutOmTE9Dtk+Tvuzd23VBU+ec7HPNSTxXYO55gPV/hq4pSBJDjFpA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "^2.0.0",
        "body-parser": "^2.2.0",
        "content-disposition": "^1.0.0",
        "content-type": "^1.0.5",
        "cookie": "^0.7.1",
        "cookie-signature": "^1.2.1",
        "debug": "^4.4.0",
        "encodeurl": "^2.0.0",
        "escape-html": "^1.0.3",
        "etag": "^1.8.1",
        "finalhandler": "^2.1.0",
        "fresh": "^2.0.0",
        "http-errors": "^2.0.0",
        "merge-descriptors": "^2.0.0",
        "mime-types": "^3.0.0",
        "on-finished": "^2.4.1",
        "once": "^1.4.0",
        "parseurl": "^1.3.3",
        "proxy-addr": "^2.0.7",
        "qs": "^6.14.0",
        "range-parser": "^1.2.1",
        "router": "^2.2.0",
        "send": "^1.1.0",
        "serve-static": "^2.2.0",
        "statuses": "^2.0.1",
        "type-is": "^2.0.1",
        "vary": "^1.1.2"
      },
      "engines": {
        "node": ">= 18"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-2.1.0.tgz",
      "integrity": "sha512-/t88Ty3d5JWQbWYgaOGCCYfXRwV1+be02WqYYlL6h0lEiUAMPM8o8qKGO01YIkOHzka2up08wvgYD0mDiI+q3Q==",
      "license": "MIT",
      "dependencies": {
        "debug": "^4.4.0",
        "encodeurl": "^2.0.0",
        "escape-html": "^1.0.3",
        "on-finished": "^2.4.1",
        "parseurl": "^1.3.3",
        "statuses": "^2.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-2.0.0.tgz",
      "integrity": "sha512-Rx/WycZ60HOaqLKAi6cHRKKI7zxWbJ31MhntmtwMoaTeF7XFH9hhBp8vITaMidfljRQ6eYWCKkaTK+ykVJHP2A==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-errors/node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-proxy-agent": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-7.0.2.tgz",
      "integrity": "sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "^7.1.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
      "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "^7.1.2",
        "debug": "4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "BSD-3-Clause"
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.16.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-docker": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-docker/-/is-docker-3.0.0.tgz",
      "integrity": "sha512-eljcgEDlEns/7AXFosB5K/2nCM4P7FQPkGc/DWLy5rmFEWvZayGrik1d9/QIY5nJ4f9YsVvBkA6kJpHn9rISdQ==",
      "license": "MIT",
      "bin": {
        "is-docker": "cli.js"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-inside-container": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-inside-container/-/is-inside-container-1.0.0.tgz",
      "integrity": "sha512-KIYLCCJghfHZxqjYBE7rEy0OBuTd5xCHS7tHVgvCLkx7StIoaxwNW3hCALgEUjFfeRk+MG/Qxmp/vtETEF3tRA==",
      "license": "MIT",
      "dependencies": {
        "is-docker": "^3.0.0"
      },
      "bin": {
        "is-inside-container": "cli.js"
      },
      "engines": {
        "node": ">=14.16"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-promise": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/is-promise/-/is-promise-4.0.0.tgz",
      "integrity": "sha512-hvpoI6korhJMnej285dSg6nu1+e6uxs7zG3BYAm5byqDsgJNWwxzM6z6iZiAgQR4TJ30JmBTOwqZUw3WlyH3AQ==",
      "license": "MIT"
    },
    "node_modules/is-wsl": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/is-wsl/-/is-wsl-3.1.0.tgz",
      "integrity": "sha512-UcVfVfaK4Sc4m7X3dUSoHoozQGBEFeDC+zVo06t98xe8CzHSZZBekNXH+tu0NalHolcJ/QAGqS46Hef7QXBIMw==",
      "license": "MIT",
      "dependencies": {
        "is-inside-container": "^1.0.0"
      },
      "engines": {
        "node": ">=16"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/js-md4": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/js-md4/-/js-md4-0.3.2.tgz",
      "integrity": "sha512-/GDnfQYsltsjRswQhN9fhv3EMw2sCpUdrdxyWDOUK7eyD++r3gRhzgiQgc/x4MAv2i1iuQ4lxO5mvqM3vj4bwA==",
      "license": "MIT"
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "license": "MIT",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jwa": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz",
      "integrity": "sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "^1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
      "license": "MIT"
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
      "license": "MIT"
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
      "license": "MIT"
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
      "license": "MIT"
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
      "license": "MIT"
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
      "license": "MIT"
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
      "license": "MIT"
    },
    "node_modules/make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-1.1.0.tgz",
      "integrity": "sha512-aisnrDP4GNe06UcKFnV5bfMNPBUw4jsLGaWwWfnH3v02GnBuXX2MCVn5RbrWo0j3pczUilYblq7fQ7Nw2t5XKw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-2.0.0.tgz",
      "integrity": "sha512-Snk314V5ayFLhp3fkUREub6WtjBfPdCPY1Ln8/8munuLuiYhsABgBVWsozAG+MWMbVEvcdcpbi9R7ww22l9Q3g==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/mime-db": {
      "version": "1.54.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.54.0.tgz",
      "integrity": "sha512-aU5EJuIN2WDemCcAp2vFBfp/m4EAhWJnUNSSw0ixs7/kXbd6Pg64EmwJkNdFhB8aWt1sH2CTXrLxo/iAGV3oPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-3.0.1.tgz",
      "integrity": "sha512-xRc4oEhT6eaBpU1XF7AjpOFD+xQmXNB5OVKwp4tqCuBpHLS/ZbBDrc07mYTDqVMg6PfxUjjNp85O6Cd2Z/5HWA==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "^1.54.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/morgan": {
      "version": "1.10.1",
      "resolved": "https://registry.npmjs.org/morgan/-/morgan-1.10.1.tgz",
      "integrity": "sha512-223dMRJtI/l25dJKWpgij2cMtywuG/WiUKXdvwfbhGKBhy1puASqXwFzmWZ7+K73vUPoR7SS2Qz2cI/g9MKw0A==",
      "license": "MIT",
      "dependencies": {
        "basic-auth": "~2.0.1",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-finished": "~2.3.0",
        "on-headers": "~1.1.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/morgan/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/morgan/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/morgan/node_modules/on-finished": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
      "integrity": "sha512-ikqdkGAAyf/X/gPhXGvfgAytDZtDbr+bkNUJ0N9h5MI/dmdgCs3l6hoHrcUv41sRKew3jIwrp4qQDXiK99Utww==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/mssql": {
      "version": "11.0.1",
      "resolved": "https://registry.npmjs.org/mssql/-/mssql-11.0.1.tgz",
      "integrity": "sha512-KlGNsugoT90enKlR8/G36H0kTxPthDhmtNUCwEHvgRza5Cjpjoj+P2X6eMpFUDN7pFrJZsKadL4x990G8RBE1w==",
      "license": "MIT",
      "dependencies": {
        "@tediousjs/connection-string": "^0.5.0",
        "commander": "^11.0.0",
        "debug": "^4.3.3",
        "rfdc": "^1.3.0",
        "tarn": "^3.0.2",
        "tedious": "^18.2.1"
      },
      "bin": {
        "mssql": "bin/mssql"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/native-duplexpair": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/native-duplexpair/-/native-duplexpair-1.0.0.tgz",
      "integrity": "sha512-E7QQoM+3jvNtlmyfqRZ0/U75VFgCls+fSkbml2MpgWkWyz3ox8Y58gNhfuziuQYGNNQAbFZJQck55LHCnCK6CA==",
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-1.0.0.tgz",
      "integrity": "sha512-8Ofs/AUQh8MaEcrlq5xOX0CQ9ypTF5dl78mjlMNfOK08fzpgTHQRQPBxcPlEtIw0yRpws+Zo/3r+5WRby7u3Gg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/on-headers": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.1.0.tgz",
      "integrity": "sha512-737ZY3yNnXy37FHkQxPzt4UZ2UWPWiCZWLvFZ4fu5cueciegX0zGPnrlY6bwRg4FdQOe9YU8MkmJwGhoMybl8A==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/open": {
      "version": "10.2.0",
      "resolved": "https://registry.npmjs.org/open/-/open-10.2.0.tgz",
      "integrity": "sha512-YgBpdJHPyQ2UE5x+hlSXcnejzAvD0b22U2OuAP+8OnlJT+PjWPxtgmGqKKc+RgTM63U9gN0YzrYc71R2WT/hTA==",
      "license": "MIT",
      "dependencies": {
        "default-browser": "^5.2.1",
        "define-lazy-prop": "^3.0.0",
        "is-inside-container": "^1.0.0",
        "wsl-utils": "^0.1.0"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/path-to-regexp": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-8.3.0.tgz",
      "integrity": "sha512-7jdwVIRtsP8MYpdXSwOS0YdD0Du+qOoF/AEPIt88PcCFrZCzx41oxku1jD88hZBwbNUIEfpqvuhjFaMAqMTWnA==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/process": {
      "version": "0.11.10",
      "resolved": "https://registry.npmjs.org/process/-/process-0.11.10.tgz",
      "integrity": "sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6.0"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/qs": {
      "version": "6.14.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.14.0.tgz",
      "integrity": "sha512-YWWTjgABSKcvs/nWBi9PycY/JiPJqOD4JA6o9Sej2AtvSGarXxKC3OQSk4pAarbdQlKAh5D4FCQkJNkW+GAn3w==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-3.0.0.tgz",
      "integrity": "sha512-RmkhL8CAyCRPXCE28MMH0z2PNWQBNk2Q09ZdxM9IOOXwxwZbN+qbWaatPkdkWIKL2ZVDImrN/pK5HTRz2PcS4g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.6.3",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/readable-stream": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-4.7.0.tgz",
      "integrity": "sha512-oIGGmcpTLwPga8Bn6/Z75SVaH1z5dUut2ibSyAMVhmUggWpmDn2dapB0n7f8nwaSiRtepAsfJyfXIO5DCVAODg==",
      "license": "MIT",
      "dependencies": {
        "abort-controller": "^3.0.0",
        "buffer": "^6.0.3",
        "events": "^3.3.0",
        "process": "^0.11.10",
        "string_decoder": "^1.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.10",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.16.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/rfdc": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/rfdc/-/rfdc-1.4.1.tgz",
      "integrity": "sha512-q1b3N5QkRUWUl7iyylaaj3kOpIT0N2i9MqIEQXP73GVsN9cw3fdx8X63cEmWhJGi2PPCF23Ijp7ktmd39rawIA==",
      "license": "MIT"
    },
    "node_modules/rimraf": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.7.1.tgz",
      "integrity": "sha512-uWjbaKIK3T1OSVptzX7Nl6PvQ3qAGtKEtVRjRuazjfL3Bx5eI409VZSqgND+4UNnmzLVdPj9FqFJNPqBZFve4w==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      }
    },
    "node_modules/router": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/router/-/router-2.2.0.tgz",
      "integrity": "sha512-nLTrUKm2UyiL7rlhapu/Zl45FwNgkZGaCpZbIHajDYgwlJCOzLSk+cIPAnsEqV955GjILJnKbdQC1nVPz+gAYQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "^4.4.0",
        "depd": "^2.0.0",
        "is-promise": "^4.0.0",
        "parseurl": "^1.3.3",
        "path-to-regexp": "^8.0.0"
      },
      "engines": {
        "node": ">= 18"
      }
    },
    "node_modules/run-applescript": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/run-applescript/-/run-applescript-7.0.0.tgz",
      "integrity": "sha512-9by4Ij99JUr/MCFBUkDKLWK3G9HVXmabKz9U5MlIAIuvuzkiOicRYs8XJLxX+xahD+mLiiCYDqF9dKAgtzKP1A==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/send/-/send-1.2.0.tgz",
      "integrity": "sha512-uaW0WwXKpL9blXE2o0bRhoL2EGXIrZxQ2ZQ4mgcfoBxdFmQold+qWsD2jLrfZ0trjKL6vOw0j//eAwcALFjKSw==",
      "license": "MIT",
      "dependencies": {
        "debug": "^4.3.5",
        "encodeurl": "^2.0.0",
        "escape-html": "^1.0.3",
        "etag": "^1.8.1",
        "fresh": "^2.0.0",
        "http-errors": "^2.0.0",
        "mime-types": "^3.0.1",
        "ms": "^2.1.3",
        "on-finished": "^2.4.1",
        "range-parser": "^1.2.1",
        "statuses": "^2.0.1"
      },
      "engines": {
        "node": ">= 18"
      }
    },
    "node_modules/serve-static": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-2.2.0.tgz",
      "integrity": "sha512-61g9pCh0Vnh7IutZjtLGGpTA355+OPn2TyDv/6ivP2h/AdAVX9azsoxmg2/M6nZeQZNYBEwIcsne1mJd9oQItQ==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "^2.0.0",
        "escape-html": "^1.0.3",
        "parseurl": "^1.3.3",
        "send": "^1.2.0"
      },
      "engines": {
        "node": ">= 18"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.21",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz",
      "integrity": "sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.1.3.tgz",
      "integrity": "sha512-Oo+0REFV59/rz3gfJNKQiBlwfHaSESl1pcGyABQsnnIfWOFt6JNj5gCog2U6MLZ//IGYD+nA8nI+mTShREReaA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/statuses": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.2.tgz",
      "integrity": "sha512-DvEy55V3DB7uknRo+4iOGT5fP1slR8wQohVdknigZPMpMstaKJQWhwiYBACJE3Ul2pTnATihhBYnRhZQHGBiRw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
      "integrity": "sha512-4gB8na07fecVVkOI6Rs4e7T6NOTki5EmL7TUduTs6bu3EdnSycntVJ4re8kgZA+wx9IueI2Y11bfbgwtzuE0KQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tarn": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/tarn/-/tarn-3.0.2.tgz",
      "integrity": "sha512-51LAVKUSZSVfI05vjPESNc5vwqqZpbXCsU+/+wxlOrUjk2SnFTt97v9ZgQrD4YmxYW1Px6w2KjaDitCfkvgxMQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/tedious": {
      "version": "18.6.1",
      "resolved": "https://registry.npmjs.org/tedious/-/tedious-18.6.1.tgz",
      "integrity": "sha512-9AvErXXQTd6l7TDd5EmM+nxbOGyhnmdbp/8c3pw+tjaiSXW9usME90ET/CRG1LN1Y9tPMtz/p83z4Q97B4DDpw==",
      "license": "MIT",
      "dependencies": {
        "@azure/core-auth": "^1.7.2",
        "@azure/identity": "^4.2.1",
        "@azure/keyvault-keys": "^4.4.0",
        "@js-joda/core": "^5.6.1",
        "@types/node": ">=18",
        "bl": "^6.0.11",
        "iconv-lite": "^0.6.3",
        "js-md4": "^0.3.2",
        "native-duplexpair": "^1.0.0",
        "sprintf-js": "^1.1.3"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/tree-kill": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/tree-kill/-/tree-kill-1.2.2.tgz",
      "integrity": "sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "tree-kill": "cli.js"
      }
    },
    "node_modules/ts-node": {
      "version": "10.9.2",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.2.tgz",
      "integrity": "sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@cspotcode/source-map-support": "^0.8.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.1",
        "yn": "3.1.1"
      },
      "bin": {
        "ts-node": "dist/bin.js",
        "ts-node-cwd": "dist/bin-cwd.js",
        "ts-node-esm": "dist/bin-esm.js",
        "ts-node-script": "dist/bin-script.js",
        "ts-node-transpile-only": "dist/bin-transpile.js",
        "ts-script": "dist/bin-script-deprecated.js"
      },
      "peerDependencies": {
        "@swc/core": ">=1.2.50",
        "@swc/wasm": ">=1.2.50",
        "@types/node": "*",
        "typescript": ">=2.7"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "@swc/wasm": {
          "optional": true
        }
      }
    },
    "node_modules/ts-node-dev": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ts-node-dev/-/ts-node-dev-2.0.0.tgz",
      "integrity": "sha512-ywMrhCfH6M75yftYvrvNarLEY+SUXtUvU8/0Z6llrHQVBx12GiFk5sStF8UdfE/yfzk9IAq7O5EEbTQsxlBI8w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chokidar": "^3.5.1",
        "dynamic-dedupe": "^0.3.0",
        "minimist": "^1.2.6",
        "mkdirp": "^1.0.4",
        "resolve": "^1.0.0",
        "rimraf": "^2.6.1",
        "source-map-support": "^0.5.12",
        "tree-kill": "^1.2.2",
        "ts-node": "^10.4.0",
        "tsconfig": "^7.0.0"
      },
      "bin": {
        "ts-node-dev": "lib/bin.js",
        "tsnd": "lib/bin.js"
      },
      "engines": {
        "node": ">=0.8.0"
      },
      "peerDependencies": {
        "node-notifier": "*",
        "typescript": "*"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/tsconfig": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/tsconfig/-/tsconfig-7.0.0.tgz",
      "integrity": "sha512-vZXmzPrL+EmC4T/4rVlT2jNVMWCi/O4DIiSj3UHg1OE5kCKbk4mfrXc6dZksLgRM/TZlKnousKH9bbTazUWRRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/strip-bom": "^3.0.0",
        "@types/strip-json-comments": "0.0.30",
        "strip-bom": "^3.0.0",
        "strip-json-comments": "^2.0.0"
      }
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/type-is": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-2.0.1.tgz",
      "integrity": "sha512-OZs6gsjF4vMp32qrCbiVSkrFmXtG/AZhY3t0iAMrMBiAZyV9oALtXO8hsrHbMXF9x6L3grlFuwW2oAz7cav+Gw==",
      "license": "MIT",
      "dependencies": {
        "content-type": "^1.0.5",
        "media-typer": "^1.1.0",
        "mime-types": "^3.0.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typescript": {
      "version": "5.9.2",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.9.2.tgz",
      "integrity": "sha512-CWBzXQrc/qOkhidw1OzBTQuYRbfyxDXJMVJ1XNwUHGROVmuaeiEm3OslpZ1RV96d7SKKjZKrSJu3+t/xlw3R9A==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/undici-types": {
      "version": "6.21.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
      "license": "MIT"
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/v8-compile-cache-lib": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC"
    },
    "node_modules/wsl-utils": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/wsl-utils/-/wsl-utils-0.1.0.tgz",
      "integrity": "sha512-h3Fbisa2nKGPxCpm89Hk33lBLsnaGBvctQopaBSOW/uIs6FTe1ATyAnKFJrzVs9vpGdsTe73WF3V4lIsk4Gacw==",
      "license": "MIT",
      "dependencies": {
        "is-wsl": "^3.1.0"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.4"
      }
    },
    "node_modules/yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/zod": {
      "version": "3.25.76",
      "resolved": "https://registry.npmjs.org/zod/-/zod-3.25.76.tgz",
      "integrity": "sha512-gzUt/qt81nXsFGKIFcC3YnfEAx5NkunCfnDlvuBSSFS02bcXu4Lmea0AFIUwbLWxWPx3d9p8S5QoaujKcNQxcQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/colinhacks"
      }
    }
  }
}


----- END backend\package-lock.json -----


----- BEGIN backend\package.json -----

{
  "name": "backend",
  "version": "1.0.0",
  "description": "API MEGA",
  "main": "dist/app.js",
  "type": "commonjs",
  "engines": {
    "node": ">=18.0.0"
  },
  "scripts": {
    "dev": "ts-node-dev --respawn --transpile-only src/app.ts",
    "build": "tsc",
    "start": "node dist/app.js",
    "migrate": "ts-node-dev --respawn --transpile-only src/migrate.ts",
    "seed": "ts-node-dev --respawn --transpile-only src/seed.ts",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^5.1.0",
    "jsonwebtoken": "^9.0.2",
    "morgan": "^1.10.1",
    "mssql": "^11.0.1",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/bcryptjs": "^2.4.6",
    "@types/cors": "^2.8.19",
    "@types/express": "^5.0.3",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/mssql": "^9.1.8",
    "@types/node": "^20.12.12",
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.9.2"
  }
}


----- END backend\package.json -----


----- BEGIN backend\tsconfig.json -----

{
  "compilerOptions": {
    "target": "ES2020",
    "module": "CommonJS",
    "rootDir": "src",
    "outDir": "dist",
    "moduleResolution": "Node",
    "esModuleInterop": true,
    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "sourceMap": true,
    "declaration": false
  },
  "include": ["src"]
}


----- END backend\tsconfig.json -----


----- BEGIN db\migrations\001_add_percentual_nf_to_cliente_documentos.sql -----

-- Adiciona a coluna percentual_nf na tabela cliente_documentos
-- Esta coluna armazenarÃ¡ o percentual da nota fiscal (ex: 1.00 para 100%, 0.50 para 50%)

IF NOT EXISTS (
    SELECT * FROM sys.columns 
    WHERE object_id = OBJECT_ID(N'[dbo].[cliente_documentos]') 
    AND name = 'percentual_nf'
)
BEGIN
    ALTER TABLE [dbo].[cliente_documentos]
    ADD [percentual_nf] DECIMAL(4, 2) NOT NULL DEFAULT 1.00;

    PRINT 'Coluna [percentual_nf] adicionada com sucesso na tabela [cliente_documentos].';
END
ELSE
BEGIN
    PRINT 'Coluna [percentual_nf] jÃ¡ existe na tabela [cliente_documentos].';
END
GO


----- END db\migrations\001_add_percentual_nf_to_cliente_documentos.sql -----


----- BEGIN db\migrations\005_create_pagamentos_table.sql -----

CREATE TABLE pagamentos (
  id INT PRIMARY KEY IDENTITY(1,1),
  cliente_id INT NOT NULL,
  data_lancamento DATETIME NOT NULL,
  data_vencimento DATETIME NOT NULL,
  valor DECIMAL(18,2) NOT NULL,
  forma_pagamento VARCHAR(255) NOT NULL,
  observacoes VARCHAR(255),
  FOREIGN KEY (cliente_id) REFERENCES clientes(id)
);

CREATE TABLE cheques (
  id INT PRIMARY KEY IDENTITY(1,1),
  pagamento_id INT NOT NULL,
  banco VARCHAR(255) NOT NULL,
  numero VARCHAR(255) NOT NULL,
  data_deposito DATETIME NOT NULL,
  FOREIGN KEY (pagamento_id) REFERENCES pagamentos(id)
);

CREATE TABLE movimentacoes (
  id INT PRIMARY KEY IDENTITY(1,1),
  pagamento_id INT NOT NULL,
  data DATETIME NOT NULL,
  descricao VARCHAR(255) NOT NULL,
  valor DECIMAL(18,2) NOT NULL,
  FOREIGN KEY (pagamento_id) REFERENCES pagamentos(id)
);


----- END db\migrations\005_create_pagamentos_table.sql -----


----- BEGIN db\002_add_foreign_keys.sql -----

USE [mega_financeiro]
GO

-- Tabela cliente_documentos
ALTER TABLE [dbo].[cliente_documentos]
ADD CONSTRAINT [FK_cliente_documentos_clientes] FOREIGN KEY ([cliente_id])
REFERENCES [dbo].[clientes] ([id])
GO

-- Tabela pedidos
ALTER TABLE [dbo].[pedidos]
ADD CONSTRAINT [FK_pedidos_clientes] FOREIGN KEY ([cliente_id])
REFERENCES [dbo].[clientes] ([id])
GO

ALTER TABLE [dbo].[pedidos]
ADD CONSTRAINT [FK_pedidos_transportadoras] FOREIGN KEY ([transportadora_id])
REFERENCES [dbo].[transportadoras] ([id])
GO

-- Tabela bloco_pedidos
ALTER TABLE [dbo].[bloco_pedidos]
ADD CONSTRAINT [FK_bloco_pedidos_blocos] FOREIGN KEY ([bloco_id])
REFERENCES [dbo].[blocos] ([id])
GO

ALTER TABLE [dbo].[bloco_pedidos]
ADD CONSTRAINT [FK_bloco_pedidos_pedidos] FOREIGN KEY ([pedido_id])
REFERENCES [dbo].[pedidos] ([id])
GO

-- Tabela bloco_lancamentos
ALTER TABLE [dbo].[bloco_lancamentos]
ADD CONSTRAINT [FK_bloco_lancamentos_blocos] FOREIGN KEY ([bloco_id])
REFERENCES [dbo].[blocos] ([id])
GO

ALTER TABLE [dbo].[bloco_lancamentos]
ADD CONSTRAINT [FK_bloco_lancamentos_pedidos] FOREIGN KEY ([pedido_id])
REFERENCES [dbo].[pedidos] ([id])
GO

ALTER TABLE [dbo].[bloco_lancamentos]
ADD CONSTRAINT [FK_bloco_lancamentos_clientes] FOREIGN KEY ([cliente_id])
REFERENCES [dbo].[clientes] ([id])
GO

ALTER TABLE [dbo].[bloco_lancamentos]
ADD CONSTRAINT [FK_bloco_lancamentos_usuarios] FOREIGN KEY ([criado_por])
REFERENCES [dbo].[usuarios] ([id])
GO

-- Tabela fechamento_itens
ALTER TABLE [dbo].[fechamento_itens]
ADD CONSTRAINT [FK_fechamento_itens_fechamento_dia] FOREIGN KEY ([data_ref])
REFERENCES [dbo].[fechamento_dia] ([data_ref])
GO

ALTER TABLE [dbo].[fechamento_itens]
ADD CONSTRAINT [FK_fechamento_itens_bloco_lancamentos] FOREIGN KEY ([lancamento_id])
REFERENCES [dbo].[bloco_lancamentos] ([id])
GO

-- Tabela dominio_itens
ALTER TABLE [dbo].[dominio_itens]
ADD CONSTRAINT [FK_dominio_itens_dominios] FOREIGN KEY ([dominio_id])
REFERENCES [dbo].[dominios] ([id])
GO

PRINT 'Chaves estrangeiras adicionadas com sucesso.';
GO


----- END db\002_add_foreign_keys.sql -----


----- BEGIN db\003_add_indexes.sql -----

USE [mega_financeiro]
GO

-- Ãndices para otimizar consultas

-- Tabela cliente_documentos
CREATE NONCLUSTERED INDEX IX_cliente_documentos_cliente_id ON dbo.cliente_documentos (cliente_id);

-- Tabela pedidos
CREATE NONCLUSTERED INDEX IX_pedidos_cliente_id ON dbo.pedidos (cliente_id);
CREATE NONCLUSTERED INDEX IX_pedidos_transportadora_id ON dbo.pedidos (transportadora_id);

-- Tabela bloco_pedidos
CREATE NONCLUSTERED INDEX IX_bloco_pedidos_bloco_id ON dbo.bloco_pedidos (bloco_id);
CREATE NONCLUSTERED INDEX IX_bloco_pedidos_pedido_id ON dbo.bloco_pedidos (pedido_id);

-- Tabela bloco_lancamentos
CREATE NONCLUSTERED INDEX IX_bloco_lancamentos_bloco_id ON dbo.bloco_lancamentos (bloco_id);
CREATE NONCLUSTERED INDEX IX_bloco_lancamentos_pedido_id ON dbo.bloco_lancamentos (pedido_id);
CREATE NONCLUSTERED INDEX IX_bloco_lancamentos_cliente_id ON dbo.bloco_lancamentos (cliente_id);
CREATE NONCLUSTERED INDEX IX_bloco_lancamentos_criado_por ON dbo.bloco_lancamentos (criado_por);

-- Tabela fechamento_itens
CREATE NONCLUSTERED INDEX IX_fechamento_itens_fechamento_id ON dbo.fechamento_itens (fechamento_id);
CREATE NONCLUSTERED INDEX IX_fechamento_itens_lancamento_id ON dbo.fechamento_itens (lancamento_id);

-- Tabela dominio_itens
CREATE NONCLUSTERED INDEX IX_dominio_itens_dominio_id ON dbo.dominio_itens (dominio_id);

PRINT 'Ãndices adicionados com sucesso.';
GO


----- END db\003_add_indexes.sql -----


----- BEGIN db\004_add_constraints.sql -----

USE [mega_financeiro]
GO

-- Constraints para garantir a integridade dos dados

-- Tabela bloco_lancamentos
ALTER TABLE [dbo].[bloco_lancamentos] WITH CHECK ADD CHECK (([status]='CANCELADO' OR [status]='DEVOLVIDO' OR [status]='LIQUIDADO' OR [status]='PENDENTE'))
GO

ALTER TABLE [dbo].[bloco_lancamentos] WITH CHECK ADD CHECK (([tipo_cheque]='TERCEIRO' OR [tipo_cheque]='PROPRIO'))
GO

-- Tabela blocos
ALTER TABLE [dbo].[blocos] WITH CHECK ADD CHECK (([status]='FECHADO' OR [status]='ABERTO'))
GO

-- Tabela cliente_documentos
ALTER TABLE [dbo].[cliente_documentos] WITH CHECK ADD CHECK (([doc_tipo]='CNPJ' OR [doc_tipo]='CPF'))
GO

-- Tabela clientes
ALTER TABLE [dbo].[clientes] WITH CHECK ADD CHECK (([status]='INATIVO' OR [status]='ATIVO'))
GO

-- Tabela fechamento_itens
ALTER TABLE [dbo].[fechamento_itens] WITH CHECK ADD CHECK (([status_no_dia]='CANCELADO' OR [status_no_dia]='PENDENTE' OR [status_no_dia]='RECEBIDO'))
GO

-- Tabela usuarios
ALTER TABLE [dbo].[usuarios] WITH CHECK ADD CHECK (([permissao]='vendedor' OR [permissao]='financeiro' OR [permissao]='admin'))
GO

PRINT 'Constraints adicionados com sucesso.';
GO


----- END db\004_add_constraints.sql -----


----- BEGIN db\run_migrations.sql -----

USE [mega_financeiro]
GO

-- Executa os scripts de migraÃ§Ã£o

:r db/migrations/001_add_percentual_nf_to_cliente_documentos.sql
:r db/002_add_foreign_keys.sql
:r db/003_add_indexes.sql
:r db/004_add_constraints.sql

PRINT 'Scripts de migraÃ§Ã£o executados com sucesso.';
GO


----- END db\run_migrations.sql -----


----- BEGIN frontend\src\components\financeiro\BaixaModal.tsx -----

import { useState, useMemo } from "react";
import { registrarBaixa } from "../../services/financeiro";

type Props = {
  open: boolean;
  onClose: () => void;
  tituloId: number;
  pendente: number;
  onDone: () => void;
};

const money = (n: number) =>
  Number(n || 0).toLocaleString("pt-BR", { style: "currency", currency: "BRL" });

export default function BaixaModal({ open, onClose, tituloId, pendente, onDone }: Props) {
  const [valor, setValor] = useState<number>(pendente);
  const [data, setData] = useState<string>(() => new Date().toISOString().slice(0, 10));
  const [forma, setForma] = useState<string>("");
  const [obs, setObs] = useState<string>("");
  const [saving, setSaving] = useState(false);

  const valorMax = useMemo(() => Math.max(0, Number(pendente || 0)), [pendente]);
  if (!open) return null;

  async function handleSave() {
    const v = Math.min(Math.max(0, Number(valor || 0)), valorMax);
    if (!v) return;
    setSaving(true);
    try {
      await registrarBaixa(tituloId, {
        valor_baixa: v,
        data_baixa: data || undefined,
        forma_pagto: forma || undefined,
        obs: obs || undefined,
      });
      onDone();
      onClose();
    } finally {
      setSaving(false);
    }
  }

  return (
    <div className="fixed inset-0 z-50 grid place-items-center bg-black/40 p-4" onClick={onClose}>
      <div
        className="w-full max-w-md rounded-2xl bg-white shadow-2xl ring-1 ring-slate-200"
        onClick={(e) => e.stopPropagation()}
      >
        {/* CabeÃ§alho */}
        <div className="flex items-center justify-between px-5 pt-4 pb-3 border-b">
          <h3 className="text-lg font-semibold">Registrar baixa</h3>
          <span className="rounded-full bg-slate-50 px-2 py-1 text-[11px] font-medium text-slate-700 ring-1 ring-slate-200">
            Pendente: {money(valorMax)}
          </span>
        </div>

        <div className="space-y-3 px-5 py-4">
          <label className="block text-sm">
            <span className="text-slate-700">Valor</span>
            <div className="mt-1 flex gap-2">
              <input
                type="number"
                step="0.01"
                className="w-full rounded-lg border px-3 py-2"
                value={valor}
                onChange={(e) => setValor(Number(e.target.value))}
                placeholder="0,00"
              />
              <button
                type="button"
                className="whitespace-nowrap rounded-lg border px-3 py-2 text-sm hover:bg-slate-50"
                onClick={() => setValor(valorMax)}
                title="Preencher com o total pendente"
              >
                Tudo
              </button>
            </div>
          </label>

          <div className="grid grid-cols-2 gap-3">
            <label className="block text-sm">
              <span className="text-slate-700">Data baixa</span>
              <input
                type="date"
                className="mt-1 w-full rounded-lg border px-3 py-2"
                value={data}
                onChange={(e) => setData(e.target.value)}
              />
            </label>

            <label className="block text-sm">
              <span className="text-slate-700">Forma</span>
              <input
                className="mt-1 w-full rounded-lg border px-3 py-2"
                placeholder="PIX, DINHEIROâ€¦"
                value={forma}
                onChange={(e) => setForma(e.target.value)}
              />
            </label>
          </div>

          <label className="block text-sm">
            <span className="text-slate-700">ObservaÃ§Ã£o</span>
            <input
              className="mt-1 w-full rounded-lg border px-3 py-2"
              value={obs}
              onChange={(e) => setObs(e.target.value)}
              placeholder="opcional"
            />
          </label>
        </div>

        <div className="flex justify-end gap-2 px-5 pb-4">
          <button onClick={onClose} className="rounded-xl border px-3 py-2 hover:bg-slate-50">Cancelar</button>
          <button
            onClick={handleSave}
            disabled={saving}
            className="rounded-xl bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 disabled:opacity-60"
          >
            {saving ? "Salvandoâ€¦" : "Salvar"}
          </button>
        </div>
      </div>
    </div>
  );
}


----- END frontend\src\components\financeiro\BaixaModal.tsx -----


----- BEGIN frontend\src\components\financeiro\Conferencia.tsx -----

import { useEffect, useMemo, useState } from "react";
import {
  conferenciaDiaria,
  conferenciaConfirmar,
  conferenciaDivergir,
  conferenciaDesfazer,
} from "../../services/financeiro";
import type { ConferenciaResult } from "../../services/financeiro";
import { ensureClientNames, getClientName } from "../../utils/clientNameCache";

// ===================== Tipos locais de UI =====================
export type OrigemConferencia = "BLOCO_LANC" | "TITULO" | "BAIXA";
export type StatusConferencia = "PENDENTE" | "CONFIRMADO" | "DIVERGENTE";

type ConferenciaItem = ConferenciaResult["itens"][number];

const BRL = (n: number) =>
  Number(n || 0).toLocaleString("pt-BR", { style: "currency", currency: "BRL" });
const DATE = (iso?: string | null) =>
  iso ? new Date(iso).toLocaleDateString() : "-";
const keyOf = (it: Pick<ConferenciaItem, "origem" | "origem_id">) =>
  `${it.origem}:${it.origem_id}`;

function Pill({
  children,
  tone = "slate",
}: {
  children: any;
  tone?: "slate" | "violet" | "amber" | "blue" | "rose" | "emerald";
}) {
  const tones: Record<string, string> = {
    slate: "bg-slate-100 text-slate-700 ring-slate-200",
    violet: "bg-violet-100 text-violet-700 ring-violet-200",
    amber: "bg-amber-100 text-amber-800 ring-amber-200",
    blue: "bg-blue-100 text-blue-700 ring-blue-200",
    rose: "bg-rose-100 text-rose-700 ring-rose-200",
    emerald: "bg-emerald-100 text-emerald-800 ring-emerald-200",
  };
  return (
    <span
      className={`inline-flex items-center gap-1 rounded-full px-2 py-0.5 text-[11px] ring-1 ${tones[tone]}`}
    >
      {children}
    </span>
  );
}

function StatusPill({ value }: { value?: StatusConferencia }) {
  if (value === "CONFIRMADO") return <Pill tone="emerald">CONFIRMADO</Pill>;
  if (value === "DIVERGENTE") return <Pill tone="rose">DIVERGENTE</Pill>;
  return <Pill tone="amber">PENDENTE</Pill>;
}

export default function Conferencia() {
  const [date, setDate] = useState<string>(
    new Date().toISOString().slice(0, 10)
  );

  const [itens, setItens] = useState<ConferenciaItem[]>([]);
  const [resumo, setResumo] = useState<Record<string, number>>({});
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  // seleÃ§Ã£o
  const [selected, setSelected] = useState<Set<string>>(new Set());

  // filtros locais
  const [filterText, setFilterText] = useState("");
  const [filterStatus, setFilterStatus] = useState<"" | StatusConferencia>("");
  const [showLanc, setShowLanc] = useState(true);
  const [showTitulos, setShowTitulos] = useState(true);
  const [showBaixas, setShowBaixas] = useState(true);
  const [hideConfirmados, setHideConfirmados] = useState(false);

  // modal de divergÃªncia
  const [divModalOpen, setDivModalOpen] = useState(false);
  const [divComentario, setDivComentario] = useState("");

  // ------- Loader principal -------
  async function load() {
    setLoading(true);
    setErr(null);
    try {
      const resp = await conferenciaDiaria({ data: date });

      // cache de nomes de clientes (melhora UX)
      const ids = Array.from(
        new Set((resp.itens || []).map((r) => r.cliente_id).filter(Boolean))
      );
      await ensureClientNames(ids);

      setItens(
        (resp.itens || []).map((r) => ({
          ...r,
          cliente_nome: getClientName(
            r.cliente_id,
            r.cliente_nome || undefined
          ),
        }))
      );
      setResumo(resp.resumo || {});
      setSelected(new Set());
    } catch (e: any) {
      setErr(e?.response?.data?.message || "Falha ao carregar conferÃªncia.");
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    load();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // ------- Derivados -------
  const filtered = useMemo(() => {
    let rows = itens.slice();
    if (!showLanc) rows = rows.filter((r) => r.origem !== "BLOCO_LANC");
    if (!showTitulos) rows = rows.filter((r) => r.origem !== "TITULO");
    if (!showBaixas) rows = rows.filter((r) => r.origem !== "BAIXA");

    if (hideConfirmados)
      rows = rows.filter((r) => r.status_conferencia !== "CONFIRMADO");
    if (filterStatus)
      rows = rows.filter((r) => r.status_conferencia === filterStatus);

    const q = filterText.trim().toLowerCase();
    if (q) {
      rows = rows.filter((r) =>
        [r.cliente_nome, r.tipo, r.numero_doc, r.status_negocio]
          .map((x) => String(x || "").toLowerCase())
          .some((s) => s.includes(q))
      );
    }
    return rows;
  }, [
    itens,
    showLanc,
    showTitulos,
    showBaixas,
    hideConfirmados,
    filterStatus,
    filterText,
  ]);

  const selectedCount = selected.size;
  const allVisibleSelected = useMemo(
    () => filtered.every((r) => selected.has(keyOf(r))) && filtered.length > 0,
    [filtered, selected]
  );
  const totals = useMemo(() => {
    const sum = (acc: number, n: number) => acc + Number(n || 0);
    return {
      visivel: filtered.reduce((a, r) => sum(a, r.valor), 0),
      selecionado: filtered
        .filter((r) => selected.has(keyOf(r)))
        .reduce((a, r) => sum(a, r.valor), 0),
    };
  }, [filtered, selected]);

  // ------- AÃ§Ãµes de conferÃªncia -------
  async function doConfirmar(rows: ConferenciaItem[]) {
    if (!rows.length) return;
    try {
      await conferenciaConfirmar({
        data: date,
        itens: rows.map((r) => ({ origem: r.origem, origem_id: r.origem_id })),
      });
      await load();
    } catch (e: any) {
      alert(e?.response?.data?.message || "Falha ao confirmar.");
    }
  }

  async function doDesfazer(rows: ConferenciaItem[]) {
    if (!rows.length) return;
    try {
      await conferenciaDesfazer({
        data: date,
        itens: rows.map((r) => ({ origem: r.origem, origem_id: r.origem_id })),
      });
      await load();
    } catch (e: any) {
      alert(e?.response?.data?.message || "Falha ao desfazer.");
    }
  }

  async function doDivergir(rows: ConferenciaItem[], comentario: string) {
    if (!rows.length) return;
    try {
      await conferenciaDivergir({
        data: date,
        comentario,
        itens: rows.map((r) => ({ origem: r.origem, origem_id: r.origem_id })),
      });
      setDivComentario("");
      setDivModalOpen(false);
      await load();
    } catch (e: any) {
      alert(e?.response?.data?.message || "Falha ao marcar como divergente.");
    }
  }

  const toggleSelectAllVisible = () => {
    const next = new Set(selected);
    if (allVisibleSelected) {
      filtered.forEach((r) => next.delete(keyOf(r)));
    } else {
      filtered.forEach((r) => next.add(keyOf(r)));
    }
    setSelected(next);
  };

  const toggleOne = (row: ConferenciaItem) => {
    const k = keyOf(row);
    const next = new Set(selected);
    if (next.has(k)) next.delete(k);
    else next.add(k);
    setSelected(next);
  };

  return (
    <div className="space-y-5">
      {/* Filtros superiores */}
      <div className="rounded-2xl border bg-white p-4 shadow-sm">
        <div className="grid gap-3 md:grid-cols-2 lg:grid-cols-6 items-end">
          <div className="lg:col-span-2">
            <label className="text-sm text-slate-700">Data</label>
            <div className="mt-1 flex items-center gap-2">
              <input
                type="date"
                className="border rounded-xl px-3 py-2"
                value={date}
                onChange={(e) => setDate(e.target.value)}
              />
              <button
                onClick={load}
                className="h-10 px-3 rounded-xl bg-blue-600 text-white hover:bg-blue-700"
              >
                Aplicar
              </button>
            </div>
          </div>

          <div>
            <label className="text-sm text-slate-700">Busca</label>
            <input
              className="mt-1 w-full border rounded-xl px-3 py-2"
              placeholder="Cliente, tipo, nÂº docâ€¦"
              value={filterText}
              onChange={(e) => setFilterText(e.target.value)}
            />
          </div>

          <div>
            <label className="text-sm text-slate-700">Status da conferÃªncia</label>
            <select
              className="mt-1 w-full border rounded-xl px-3 py-2"
              value={filterStatus}
              onChange={(e) =>
                setFilterStatus((e.target.value as StatusConferencia) || "")
              }
            >
              <option value="">(todos)</option>
              <option value="PENDENTE">PENDENTE</option>
              <option value="CONFIRMADO">CONFIRMADO</option>
              <option value="DIVERGENTE">DIVERGENTE</option>
            </select>
          </div>

          <div className="lg:col-span-2">
            <div className="text-sm text-slate-700 mb-1">Origem</div>
            <div className="flex flex-wrap gap-2">
              <button
                onClick={() => setShowLanc((v) => !v)}
                className={`px-3 py-2 rounded-xl border text-sm ${
                  showLanc ? "bg-slate-900 text-white" : "hover:bg-slate-50"
                }`}
              >
                LanÃ§amentos
              </button>
              <button
                onClick={() => setShowTitulos((v) => !v)}
                className={`px-3 py-2 rounded-xl border text-sm ${
                  showTitulos ? "bg-slate-900 text-white" : "hover:bg-slate-50"
                }`}
              >
                TÃ­tulos
              </button>
              <button
                onClick={() => setShowBaixas((v) => !v)}
                className={`px-3 py-2 rounded-xl border text-sm ${
                  showBaixas ? "bg-slate-900 text-white" : "hover:bg-slate-50"
                }`}
              >
                Baixas
              </button>
              <label className="ml-2 inline-flex items-center gap-2 text-sm">
                <input
                  type="checkbox"
                  className="h-4 w-4"
                  checked={hideConfirmados}
                  onChange={(e) => setHideConfirmados(e.target.checked)}
                />
                Ocultar confirmados
              </label>
            </div>
          </div>
        </div>
      </div>

      {/* Resumos */}
      <div className="grid gap-3 sm:grid-cols-2 lg:grid-cols-4">
        <div className="rounded-2xl border bg-gradient-to-br from-amber-50 to-yellow-50 text-amber-900 p-4">
          <div className="text-xs opacity-70">Pendentes</div>
          <div className="text-2xl font-semibold">
            {itens
              .filter((r) => r.status_conferencia !== "CONFIRMADO")
              .reduce((a, r) => a + (r.valor || 0), 0)
              .toLocaleString("pt-BR", { style: "currency", currency: "BRL" })}
          </div>
        </div>
        <div className="rounded-2xl border bg-gradient-to-br from-emerald-50 to-teal-50 text-emerald-800 p-4">
          <div className="text-xs opacity-70">Confirmados</div>
          <div className="text-2xl font-semibold">
            {itens
              .filter((r) => r.status_conferencia === "CONFIRMADO")
              .reduce((a, r) => a + (r.valor || 0), 0)
              .toLocaleString("pt-BR", { style: "currency", currency: "BRL" })}
          </div>
        </div>
        <div className="rounded-2xl border bg-gradient-to-br from-rose-50 to-red-50 text-rose-800 p-4">
          <div className="text-xs opacity-70">Divergentes</div>
          <div className="text-2xl font-semibold">
            {itens
              .filter((r) => r.status_conferencia === "DIVERGENTE")
              .reduce((a, r) => a + (r.valor || 0), 0)
              .toLocaleString("pt-BR", { style: "currency", currency: "BRL" })}
          </div>
        </div>
        <div className="rounded-2xl border bg-white p-4">
          <div className="text-xs opacity-70">Resumo por tipo (dia)</div>
          <div className="mt-1 grid grid-cols-2 gap-1 text-[13px]">
            {Object.entries(resumo).map(([k, v]) => (
              <div key={k} className="flex items-center justify-between gap-3">
                <span className="truncate text-slate-600">{k}</span>
                <span className="font-medium">
                  {BRL(Number(v))}
                </span>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Barra de aÃ§Ãµes em massa */}
      <div className="rounded-2xl border bg-white p-3 shadow-sm flex flex-wrap items-center gap-3">
        <div className="text-sm text-slate-700">
          <span className="font-semibold">{filtered.length}</span> lanÃ§amentos
          visÃ­veis Â·
          <span className="ml-1">
            Total visÃ­vel: <span className="font-semibold">{BRL(totals.visivel)}</span>
          </span>
          {selectedCount > 0 && (
            <>
              <span className="mx-2">|</span>
              <span className="text-slate-700">
                Selecionados: <span className="font-semibold">{selectedCount}</span> Â·{" "}
                <span className="font-semibold">{BRL(totals.selecionado)}</span>
              </span>
            </>
          )}
        </div>
        <div className="ml-auto flex items-center gap-2">
          <button
            onClick={toggleSelectAllVisible}
            className="px-3 py-2 rounded-xl border hover:bg-slate-50 text-sm"
          >
            {allVisibleSelected ? "Limpar seleÃ§Ã£o" : "Selecionar visÃ­veis"}
          </button>
          <button
            disabled={selectedCount === 0}
            onClick={() =>
              doConfirmar(filtered.filter((r) => selected.has(keyOf(r))))
            }
            className="px-3 py-2 rounded-xl bg-emerald-600 text-white hover:bg-emerald-700 disabled:opacity-50 text-sm"
          >
            Confirmar selecionados
          </button>
          <button
            disabled={selectedCount === 0}
            onClick={() => setDivModalOpen(true)}
            className="px-3 py-2 rounded-xl border text-rose-700 hover:bg-rose-50 disabled:opacity-50 text-sm"
          >
            Marcar divergenteâ€¦
          </button>
          <button
            disabled={selectedCount === 0}
            onClick={() =>
              doDesfazer(filtered.filter((r) => selected.has(keyOf(r))))
            }
            className="px-3 py-2 rounded-xl border hover:bg-slate-50 disabled:opacity-50 text-sm"
          >
            Desfazer
          </button>
        </div>
      </div>

      {/* Tabela */}
      <div className="overflow-auto rounded-2xl border bg-white shadow-sm">
        <table className="min-w-full text-sm">
          <thead className="bg-slate-50/90 backdrop-blur sticky top-0 border-b">
            <tr>
              <th className="p-2 border">
                <input
                  type="checkbox"
                  checked={allVisibleSelected}
                  onChange={toggleSelectAllVisible}
                />
              </th>
              <th className="p-2 border text-left">Cliente</th>
              <th className="p-2 border text-left">Origem</th>
              <th className="p-2 border text-left">Tipo</th>
              <th className="p-2 border text-left">NÂº Doc</th>
              <th className="p-2 border text-left">Bom para</th>
              <th className="p-2 border text-right">Valor</th>
              <th className="p-2 border text-left">Conf.</th>
              <th className="p-2 border text-left">NegÃ³cio</th>
              <th className="p-2 border text-left">AÃ§Ãµes</th>
            </tr>
          </thead>
          <tbody>
            {loading && (
              <tr>
                <td className="p-6 text-center" colSpan={10}>
                  Carregandoâ€¦
                </td>
              </tr>
            )}
            {!loading && filtered.length === 0 && (
              <tr>
                <td
                  className="p-6 text-center text-slate-500"
                  colSpan={10}
                >
                  Sem lanÃ§amentos
                </td>
              </tr>
            )}
            {filtered.map((r) => {
              const selectedRow = selected.has(keyOf(r));
              return (
                <tr
                  key={`${r.id}-${r.origem}-${r.origem_id}`}
                  className={`border-t ${selectedRow ? "bg-blue-50/40" : ""}`}
                >
                  <td className="p-2 border text-center">
                    <input
                      type="checkbox"
                      checked={selectedRow}
                      onChange={() => toggleOne(r)}
                    />
                  </td>
                  <td className="p-2 border min-w-[220px]">
                    <div className="font-medium">
                      {getClientName(
                        r.cliente_id,
                        r.cliente_nome || undefined
                      )}
                    </div>
                    <div className="text-xs text-slate-500">#{r.cliente_id}</div>
                  </td>
                  <td className="p-2 border">
                    {r.origem === "BLOCO_LANC" && <Pill tone="violet">LanÃ§amento</Pill>}
                    {r.origem === "TITULO" && <Pill tone="blue">TÃ­tulo</Pill>}
                    {r.origem === "BAIXA" && <Pill tone="slate">Baixa</Pill>}
                  </td>
                  <td className="p-2 border">{r.tipo}</td>
                  <td className="p-2 border">{r.numero_doc || "-"}</td>
                  <td className="p-2 border">{DATE(r.bom_para)}</td>
                  <td className="p-2 border text-right font-medium">
                    {BRL(r.valor)}
                  </td>
                  <td className="p-2 border">
                    <StatusPill value={r.status_conferencia || "PENDENTE"} />
                  </td>
                  <td className="p-2 border">{r.status_negocio || "-"}</td>
                  <td className="p-2 border">
                    <div className="flex flex-wrap items-center gap-2">
                      <button
                        onClick={() => doConfirmar([r])}
                        className="px-2 py-1 rounded-lg bg-emerald-600 text-white text-xs hover:bg-emerald-700"
                      >
                        Confirmar
                      </button>
                      <button
                        onClick={() => {
                          setSelected(new Set([keyOf(r)]));
                          setDivModalOpen(true);
                        }}
                        className="px-2 py-1 rounded-lg border text-rose-700 text-xs hover:bg-rose-50"
                      >
                        Divergirâ€¦
                      </button>
                      <button
                        onClick={() => doDesfazer([r])}
                        className="px-2 py-1 rounded-lg border text-xs hover:bg-slate-50"
                      >
                        Desfazer
                      </button>
                    </div>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {/* Modal divergÃªncia */}
      {divModalOpen && (
        <div
          className="fixed inset-0 z-50 grid place-items-center bg-black/40 p-4"
          onClick={() => setDivModalOpen(false)}
        >
          <div
            className="w-full max-w-lg rounded-2xl bg-white p-4 shadow-xl"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="mb-3 flex items-center justify-between">
              <h4 className="text-base font-semibold">Marcar como divergente</h4>
              <button
                className="rounded-md border px-2 py-1 text-sm"
                onClick={() => setDivModalOpen(false)}
              >
                Fechar
              </button>
            </div>
            <div className="space-y-3">
              <div>
                <label className="text-sm text-slate-700">
                  ComentÃ¡rio (obrigatÃ³rio)
                </label>
                <textarea
                  value={divComentario}
                  onChange={(e) => setDivComentario(e.target.value)}
                  className="mt-1 w-full h-28 border rounded-xl px-3 py-2"
                  placeholder="Ex.: PIX nÃ£o localizado no extrato"
                />
              </div>
              <div className="flex items-center justify-end gap-2">
                <button
                  className="px-3 py-2 rounded-xl border"
                  onClick={() => setDivModalOpen(false)}
                >
                  Cancelar
                </button>
                <button
                  className="px-3 py-2 rounded-xl bg-rose-600 text-white hover:bg-rose-700 disabled:opacity-50"
                  disabled={!divComentario.trim() || selectedCount === 0}
                  onClick={() =>
                    doDivergir(
                      filtered.filter((r) => selected.has(keyOf(r))),
                      divComentario.trim()
                    )
                  }
                >
                  Marcar divergente
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Erro inline */}
      {err && (
        <div className="rounded-xl border bg-rose-50 text-rose-800 p-3">
          {err}
        </div>
      )}
    </div>
  );
}


----- END frontend\src\components\financeiro\Conferencia.tsx -----


----- BEGIN frontend\src\components\financeiro\NovoTituloModal.tsx -----

// src/components/financeiro/NovoTituloModal.tsx
import { useEffect, useRef, useState } from "react";
import api from "../../services/api";

type Props = {
  open: boolean;
  onClose: () => void;
  onDone: () => void;
};

type Cliente = { id: number; nome_fantasia: string };

export default function NovoTituloModal({ open, onClose, onDone }: Props) {
  const [clienteInput, setClienteInput] = useState("");
  const [clienteId, setClienteId] = useState<number | null>(null);
  const [cliOpts, setCliOpts] = useState<Cliente[]>([]);
  const [cliOpen, setCliOpen] = useState(false);

  const [tipo, setTipo] = useState<"CHEQUE" | "BOLETO" | "PIX" | "DEPOSITO">("BOLETO");
  const [numeroDoc, setNumeroDoc] = useState("");
  const [bomPara, setBomPara] = useState("");
  const [valor, setValor] = useState<number | "">("");
  const [obs, setObs] = useState("");
  const [loading, setLoading] = useState(false);

  const boxRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!open) return;
    setClienteInput("");
    setClienteId(null);
    setCliOpts([]);
    setCliOpen(false);
    setTipo("BOLETO");
    setNumeroDoc("");
    setBomPara("");
    setValor("");
    setObs("");
  }, [open]);

  useEffect(() => {
    function close(e: MouseEvent) {
      if (!boxRef.current?.contains(e.target as Node)) setCliOpen(false);
    }
    document.addEventListener("mousedown", close);
    return () => document.removeEventListener("mousedown", close);
  }, []);

  useEffect(() => {
    const q = clienteInput.trim();
    if (q.length < 2 || clienteId) {
      setCliOpts([]);
      return;
    }
    const t = setTimeout(async () => {
      try {
        const { data } = await api.get("/clientes", { params: { search: q, limit: 10 } });
        setCliOpts((data?.data ?? data ?? []).slice(0, 10));
        setCliOpen(true);
      } catch {/* ignore */}
    }, 250);
    return () => clearTimeout(t);
  }, [clienteInput, clienteId]);

  if (!open) return null;

  async function salvar() {
    if (!clienteId || !valor || !bomPara) return;
    setLoading(true);
    try {
      await api.post("/financeiro/titulos", {
        cliente_id: Number(clienteId),
        tipo,
        numero_doc: numeroDoc || null,
        bom_para: bomPara,
        valor_bruto: Number(valor),
        observacao: obs || null,
      });
      onDone();
      onClose();
    } finally {
      setLoading(false);
    }
  }

  const tipos: typeof tipo[] = ["CHEQUE", "BOLETO", "PIX", "DEPOSITO"];

  return (
    <div className="fixed inset-0 z-50 bg-black/30 grid place-items-center p-4" onClick={onClose}>
      <div className="w-full max-w-lg rounded-2xl bg-white p-4 shadow-xl" onClick={(e) => e.stopPropagation()}>
        <h3 className="text-lg font-semibold">Novo tÃ­tulo a receber</h3>

        <div className="mt-3 space-y-3">
          {/* Auto-complete */}
          <div ref={boxRef}>
            <label className="text-sm block">Cliente</label>
            <div className="relative">
              <input
                className="mt-1 w-full rounded-lg border px-3 py-2"
                placeholder="Digite para buscarâ€¦"
                value={clienteInput}
                onChange={(e) => {
                  setClienteInput(e.target.value);
                  setClienteId(null);
                }}
                onFocus={() => cliOpts.length && setCliOpen(true)}
              />
              {cliOpen && cliOpts.length > 0 && (
                <div className="absolute z-10 mt-1 max-h-64 w-full overflow-auto rounded-md border bg-white shadow-lg">
                  {cliOpts.map((c) => (
                    <button
                      key={c.id}
                      className="block w-full px-3 py-2 text-left hover:bg-slate-50"
                      onClick={() => {
                        setClienteInput(c.nome_fantasia);
                        setClienteId(c.id);
                        setCliOpen(false);
                      }}
                    >
                      <div className="font-medium">{c.nome_fantasia}</div>
                      <div className="text-xs text-slate-500">#{c.id}</div>
                    </button>
                  ))}
                </div>
              )}
            </div>
            {clienteId && (
              <div className="mt-1 text-xs text-slate-600">
                Selecionado: <b>#{clienteId}</b>
              </div>
            )}
          </div>

          {/* Tipo (chips) */}
          <div>
            <label className="text-sm block mb-1">Tipo</label>
            <div className="flex flex-wrap gap-2">
              {tipos.map((t) => (
                <button
                  key={t}
                  onClick={() => setTipo(t)}
                  className={[
                    "rounded-full px-3 py-1 text-xs ring-1",
                    t === tipo ? "bg-slate-900 text-white ring-slate-900" : "bg-white text-slate-700 ring-slate-200 hover:bg-slate-50",
                  ].join(" ")}
                >
                  {t}
                </button>
              ))}
            </div>
          </div>

          <div className="grid grid-cols-2 gap-3">
            <label className="text-sm">
              NÂº Doc
              <input className="mt-1 w-full rounded-lg border px-3 py-2" value={numeroDoc} onChange={(e) => setNumeroDoc(e.target.value)} />
            </label>
            <label className="text-sm">
              Bom para
              <input type="date" className="mt-1 w-full rounded-lg border px-3 py-2" value={bomPara} onChange={(e) => setBomPara(e.target.value)} />
            </label>
          </div>

          <label className="text-sm">
            Valor
            <input
              type="number"
              step="0.01"
              className="mt-1 w-full rounded-lg border px-3 py-2"
              value={valor}
              onChange={(e) => setValor(e.target.value === "" ? "" : Number(e.target.value))}
            />
          </label>

          <label className="text-sm">
            ObservaÃ§Ã£o
            <input className="mt-1 w-full rounded-lg border px-3 py-2" value={obs} onChange={(e) => setObs(e.target.value)} />
          </label>
        </div>

        <div className="mt-4 flex justify-end gap-2">
          <button onClick={onClose} className="rounded-lg border px-3 py-1.5">Cancelar</button>
          <button
            onClick={salvar}
            disabled={loading || !clienteId || !valor || !bomPara}
            className="rounded-lg bg-blue-600 px-3 py-1.5 text-white hover:bg-blue-700 disabled:opacity-60"
          >
            {loading ? "Salvando..." : "Salvar"}
          </button>
        </div>
      </div>
    </div>
  );
}


----- END frontend\src\components\financeiro\NovoTituloModal.tsx -----


----- BEGIN frontend\src\components\ui\badge.tsx -----

import React from "react";
import { cn } from "../../lib/utils";

export type Tone = "success" | "warning" | "danger" | "neutral" | "info";

const tones: Record<Tone, string> = {
  success: "bg-emerald-100 text-emerald-700 ring-emerald-200",
  warning: "bg-amber-100 text-amber-800 ring-amber-200",
  danger:  "bg-red-100 text-red-700 ring-red-200",
  neutral: "bg-slate-100 text-slate-700 ring-slate-200",
  info:    "bg-blue-100 text-blue-700 ring-blue-200",
};

type Props = {
  tone?: Tone;
  className?: string;
  children: React.ReactNode;
  /** texto acessÃ­vel opcional â€” Ãºtil quando o conteÃºdo for um Ã­cone */
  ariaLabel?: string;
};

export default function Badge({
  tone = "neutral",
  className,
  children,
  ariaLabel,
}: Props) {
  return (
    <span
      className={cn(
        "inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold ring-1",
        tones[tone],
        className
      )}
      aria-label={ariaLabel}
      role="status"
    >
      {children}
    </span>
  );
}


----- END frontend\src\components\ui\badge.tsx -----


----- BEGIN frontend\src\components\ui\BlocoDetalhe.tsx -----

import { useEffect, useMemo, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import {
  getBloco,
  listarLancamentos,
  adicionarLancamento,
  getSaldos,
  fecharBloco,
  excluirLancamento,
} from "../../services/blocos.api";
import type { SaldosResponse } from "../../services/blocos.api";
import api from "../../services/api";

type DetBloco = Awaited<ReturnType<typeof getBloco>>;
type LancStatus = "PENDENTE" | "LIQUIDADO" | "DEVOLVIDO" | "CANCELADO" | "BAIXADO NO FINANCEIRO";
type Sentido = "ENTRADA" | "SAIDA";

type ParametroItem = {
  id: number;
  descricao: string;
  tipo: "ENTRADA" | "SAIDA";
  ativo: boolean;
  exige_bom_para: boolean;
  exige_tipo_cheque: boolean;
};

/* ================= helpers de data ================= */
function dateBR(value?: string | Date | null) {
  if (!value) return "â€”";
  if (typeof value === "string") {
    const m = value.match(/^(\d{4})-(\d{2})-(\d{2})/);
    if (m) return `${m[3]}/${m[2]}/${m[1]}`;
  }
  const d = new Date(value);
  return isNaN(d.getTime()) ? "â€”" : d.toLocaleDateString("pt-BR");
}

function dateTimeBR(value?: string | Date | null) {
  if (!value) return "â€”";
  if (typeof value === "string") {
    const m = value.match(/^(\d{4})-(\d{2})-(\d{2})[T\s](\d{2}):(\d{2})/);
    if (m) return `${m[3]}/${m[2]}/${m[1]} ${m[4]}:${m[5]}`;
    const dOnly = value.match(/^(\d{4})-(\d{2})-(\d{2})/);
    if (dOnly) return `${dOnly[3]}/${dOnly[2]}/${dOnly[1]}`;
  }
  const d = new Date(value);
  return isNaN(d.getTime())
    ? "â€”"
    : d.toLocaleString("pt-BR", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
        hour: "2-digit",
        minute: "2-digit",
      });
}

export default function BlocoDetalhe() {
  const { id } = useParams();
  const nav = useNavigate();
  const blocoId = Number(id);

  const [b, setB] = useState<DetBloco | null>(null);

  // Saldos
  const [saldos, setSaldos] = useState<SaldosResponse | null>(null);

  const [tab, setTab] = useState<"lancamentos" | "resumo">("lancamentos");

  // lanÃ§amentos
  const [lancs, setLancs] = useState<
    Array<{
      id: number;
      tipo_recebimento: string;
      sentido: Sentido;
      valor: number;
      data_lancamento: string;
      bom_para?: string | null;
      numero_referencia?: string | null;
      observacao?: string | null;
      criado_por?: number | null;
      criado_por_nome?: string | null;
      status?: LancStatus;
    }>
  >([]);
  const [lPage, setLPage] = useState(1);
  const [lLimit, setLLimit] = useState(25);
  const [fStatus, setFStatus] = useState<"" | LancStatus>("");
  const [fTipo, setFTipo] = useState<string>("");

  /** â–¼â–¼ ParÃ¢metros do pedido (dinÃ¢micos) â–¼â–¼ **/
  const [parametros, setParametros] = useState<ParametroItem[]>([]);
  const [paramSelecionadoId, setParamSelecionadoId] = useState<number | "">("");
  const paramSelecionado = useMemo(
    () => parametros.find((x) => x.id === paramSelecionadoId),
    [parametros, paramSelecionadoId]
  );
  const requerBomPara = !!paramSelecionado?.exige_bom_para;
  const requerTipoCheque = !!paramSelecionado?.exige_tipo_cheque;
  /** â–²â–² ParÃ¢metros do pedido â–²â–² **/

  // campos do novo lanÃ§amento
  const [valor, setValor] = useState<string>("");
  const [dataLanc, setDataLanc] = useState<string>(() => new Date().toISOString().slice(0, 10));
  const [numRef, setNumRef] = useState("");
  const [obs, setObs] = useState("");
  const [savingLanc, setSavingLanc] = useState(false);

  // campos condicionais
  const [tipoCheque, setTipoCheque] = useState<"" | "PROPRIO" | "TERCEIRO">("");
  const [bomPara, setBomPara] = useState<string>("");

  const podeFechar = useMemo(() => b?.status === "ABERTO", [b?.status]);
  const podeEditar = podeFechar;

  // helpers de moeda
  function formatarMoedaBRL(input: string) {
    const onlyDigits = input.replace(/\D/g, "");
    if (!onlyDigits) return "";
    const asNumber = Number(onlyDigits) / 100;
    return asNumber.toLocaleString("pt-BR", { minimumFractionDigits: 2, maximumFractionDigits: 2 });
  }
  function toNumber(brl: string) {
    return Number(brl.replace(/\./g, "").replace(",", "."));
  }

  // loaders
  async function load() {
    const [det, s] = await Promise.all([getBloco(blocoId), getSaldos(blocoId)]);
    setB(det);
    setSaldos(s);
  }

  async function loadLancs() {
    const r = await listarLancamentos(blocoId, {
      page: lPage,
      limit: lLimit,
      status: (fStatus || undefined) as any,
      tipo: fTipo || undefined,
    });
    setLancs(r?.data ?? []);

    // atualiza o saldo do bloco (financeiro e a receber NÃƒO aparecem mais aqui)
    try {
      const s = await getSaldos(blocoId);
      setSaldos(s);
    } catch {}
  }

  useEffect(() => {
    if (!Number.isFinite(blocoId)) return;
    load();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [id]);

  useEffect(() => {
    if (!Number.isFinite(blocoId)) return;
    loadLancs();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [lPage, lLimit, fStatus, fTipo]);

  // carrega PARÃ‚METROS ativos
  useEffect(() => {
    (async () => {
      try {
        const { data } = await api.get("/pedido-parametros", { params: { ativo: "true" } });
        const rows: ParametroItem[] = (data?.data ?? data ?? []).map((r: any) => ({
          id: Number(r.id),
          descricao: String(r.descricao ?? r.nome ?? r.chave ?? "").toUpperCase().trim(),
          tipo: String(r.tipo ?? "ENTRADA").toUpperCase() === "SAIDA" ? "SAIDA" : "ENTRADA",
          ativo: !!r.ativo,
          exige_bom_para: !!r.exige_bom_para,
          exige_tipo_cheque: !!r.exige_tipo_cheque,
        }));
        const ativos = rows.filter((x) => x.ativo);
        setParametros(ativos);
        setParamSelecionadoId((prev) => (prev === "" && ativos[0]?.id ? ativos[0].id : prev));
      } catch {
        setParametros([]);
        setParamSelecionadoId("");
      }
    })();
  }, []);

  // aÃ§Ãµes
  async function doAddLanc() {
    if (paramSelecionadoId === "") return alert("Selecione o tipo do lanÃ§amento.");
    if (!valor.trim()) return alert("Informe o valor.");

    const param = parametros.find((p) => p.id === paramSelecionadoId);
    if (!param) return alert("ParÃ¢metro invÃ¡lido.");

    // validaÃ§Ãµes conforme flags do parÃ¢metro
    if (requerTipoCheque && !tipoCheque) return alert("Selecione o tipo de cheque (PRÃ“PRIO/TERCEIRO).");
    if (requerBomPara && !bomPara) return alert("Informe a data 'Bom para'.");

    setSavingLanc(true);
    try {
      const payload: any = {
        tipo_recebimento: param.descricao,
        valor: toNumber(valor),
        data_lancamento: dataLanc,
        numero_referencia: numRef || undefined,
        observacao: obs || undefined,
      };

      if (requerTipoCheque) payload.tipo_cheque = tipoCheque;
      if (requerBomPara) payload.bom_para = bomPara;

      await adicionarLancamento(blocoId, payload);

      // limpa campos
      setValor("");
      setNumRef("");
      setObs("");
      setBomPara("");
      setTipoCheque("");

      await loadLancs();
    } catch (e: any) {
      alert(e?.response?.data?.message || "Falha ao adicionar lanÃ§amento.");
    } finally {
      setSavingLanc(false);
    }
  }

  async function doDel(lancId: number, temBomPara: boolean) {
    if (!podeEditar) return;
    if (temBomPara) {
      return alert("Este lanÃ§amento possui 'bom para' (A Receber). Exclua/ajuste o tÃ­tulo correspondente antes.");
    }
    const ok = confirm("Excluir este lanÃ§amento? Esta aÃ§Ã£o nÃ£o pode ser desfeita.");
    if (!ok) return;
    try {
      await excluirLancamento(blocoId, lancId);
      await loadLancs();
    } catch (e: any) {
      alert(e?.response?.data?.message || "Falha ao excluir lanÃ§amento.");
    }
  }

  async function doFechar() {
    if (!podeFechar) return;
    // confirmaÃ§Ã£o usa apenas o SALDO DO BLOCO (o que â€œviajaâ€)
    const s = saldos?.saldo_bloco ?? 0;
    if (s > 0) {
      const ok = confirm(
        `Fechar com saldo POSITIVO de ${s.toLocaleString("pt-BR", {
          style: "currency",
          currency: "BRL",
        })}?\n\nO crÃ©dito serÃ¡ considerado no prÃ³ximo bloco do cliente.`
      );
      if (!ok) return;
    } else if (s < 0) {
      const ok = confirm(
        `Fechar com saldo NEGATIVO de ${s.toLocaleString("pt-BR", {
          style: "currency",
          currency: "BRL",
        })}?\n\nVocÃª confirmou que pode fechar mesmo com saldo devedor.`
      );
      if (!ok) return;
    }
    try {
      await fecharBloco(blocoId);
      await load();
      await loadLancs();
    } catch (e: any) {
      alert(e?.response?.data?.message || "Falha ao fechar bloco.");
    }
  }

  /** ==================== CORES MAIS FORTES ==================== **/
  const tone = (n: number) =>
    n < 0
      ? "from-red-200 to-rose-200 text-red-900 ring-1 ring-red-300"
      : n > 0
      ? "from-emerald-200 to-teal-200 text-emerald-900 ring-1 ring-emerald-300"
      : "from-slate-100 to-slate-100 text-slate-900 ring-1 ring-slate-300";

  const selectTone =
    paramSelecionado?.tipo === "ENTRADA"
      ? "focus:outline-none focus:ring-2 focus:ring-red-400"
      : paramSelecionado?.tipo === "SAIDA"
      ? "focus:outline-none focus:ring-2 focus:ring-emerald-400"
      : "focus:outline-none focus:ring-2 focus:ring-slate-400";

  return (
    <div className="space-y-5">
      {/* Header */}
      <div className="rounded-2xl border bg-white shadow-sm p-4 flex items-center justify-between">
        <div className="flex items-center gap-3">
          <button onClick={() => nav(-1)} className="px-3 py-2 rounded-lg border hover:bg-slate-50">
            â† Voltar
          </button>
          <h1 className="text-xl font-semibold">
            {b?.cliente_nome ?? `Cliente #${b?.cliente_id}`}
          </h1>
          {b && (
            <span
              className={
                "text-[11px] px-2 py-0.5 rounded-full font-medium ring-1 " +
                (b.status === "ABERTO"
                  ? "bg-blue-200 text-blue-900 ring-blue-300"
                  : "bg-slate-300 text-slate-900 ring-slate-400")
              }
            >
              {b.status}
            </span>
          )}
        </div>
        <button
          onClick={doFechar}
          disabled={!podeFechar}
          className="px-3 py-2 rounded-xl bg-emerald-600 text-white hover:bg-emerald-700 disabled:opacity-50"
          title={podeFechar ? "" : "Bloco jÃ¡ fechado"}
        >
          Fechar bloco
        </button>
      </div>

      {/* Tabs */}
      <div className="inline-flex rounded-xl border bg-white shadow-sm overflow-hidden">
        {(["lancamentos", "resumo"] as const).map((t) => (
          <button
            key={t}
            onClick={() => setTab(t)}
            className={"px-4 py-2 text-sm " + (tab === t ? "bg-slate-900 text-white" : "hover:bg-slate-50")}
          >
            {t === "lancamentos" ? "LanÃ§amentos" : "Resumo"}
          </button>
        ))}
      </div>

      {/* Saldos do BLOCO â€” agora apenas o saldo do bloco */}
      <div className="grid lg:grid-cols-1 gap-3">
        <div className={`rounded-2xl border bg-gradient-to-r ${tone(saldos?.saldo_bloco ?? 0)} p-4`}>
          <div className="text-xs/5 opacity-80">Saldo do bloco</div>
          <div className="text-2xl font-semibold">
            {(saldos?.saldo_bloco ?? 0).toLocaleString("pt-BR", { style: "currency", currency: "BRL" })}
          </div>
          <div className="text-[11px] opacity-80 mt-1">
            Soma de todas as movimentaÃ§Ãµes (ENTRADA âˆ’ / SAÃDA +), independente de â€œbom paraâ€.
          </div>
        </div>
      </div>

      {/* conteÃºdo */}
      {tab === "lancamentos" && (
        <div className="space-y-4">
          {/* filtros */}
          <div className="rounded-2xl border bg-white p-3 shadow-sm flex flex-wrap items-end gap-3">
            <div>
              <label className="text-sm text-slate-700">Status</label>
              <select
                className="mt-1 border rounded-xl px-3 py-2"
                value={fStatus}
                onChange={(e) => setFStatus((e.target.value as LancStatus) || "")}
              >
                <option value="">(todos)</option>
                <option value="PENDENTE">PENDENTE</option>
                <option value="LIQUIDADO">LIQUIDADO</option>
                <option value="DEVOLVIDO">DEVOLVIDO</option>
                <option value="CANCELADO">CANCELADO</option>
                <option value="BAIXADO NO FINANCEIRO">BAIXADO NO FINANCEIRO</option>
              </select>
            </div>
            <div>
              <label className="text-sm text-slate-700">Tipo</label>
              <select className="mt-1 border rounded-xl px-3 py-2" value={fTipo} onChange={(e) => setFTipo(e.target.value)}>
                <option value="">(todos)</option>
                {parametros.map((p) => {
                  const prefix = p.tipo === "ENTRADA" ? "ðŸ”´ ENTRADA" : "ðŸŸ¢ SAÃDA";
                  return (
                    <option key={p.id} value={p.descricao}>
                      {`${prefix} - ${p.descricao}`}
                    </option>
                  );
                })}
              </select>
            </div>
            <button className="px-3 py-2 rounded-xl border hover:bg-slate-50" onClick={loadLancs}>
              Atualizar
            </button>
          </div>

          {/* form */}
          <div className={"rounded-2xl border bg-white p-4 shadow-sm relative"}>
            {!podeEditar && (
              <div className="absolute inset-0 bg-white/60 backdrop-blur-sm rounded-2xl grid place-items-center text-slate-600">
                Bloco fechado â€” ediÃ§Ã£o desabilitada
              </div>
            )}
            <div className="grid md:grid-cols-6 gap-3">
              <div className="md:col-span-3">
                <label className="text-sm text-slate-700">Tipo</label>
                <div className="flex items-center gap-2">
                  <select
                    className={["mt-1 border rounded-xl px-3 py-2 w-full", selectTone].join(" ")}
                    value={paramSelecionadoId}
                    onChange={(e) => setParamSelecionadoId(e.target.value ? Number(e.target.value) : "")}
                    disabled={!podeEditar}
                  >
                    {parametros.map((p) => {
                      const prefix = p.tipo === "ENTRADA" ? "ðŸ”´ ENTRADA" : "ðŸŸ¢ SAÃDA";
                      return (
                        <option key={p.id} value={p.id}>
                          {`${prefix} - ${p.descricao}`}
                        </option>
                      );
                    })}
                  </select>

                  {paramSelecionado && (
                    <span
                      className={[
                        "text-[11px] whitespace-nowrap mt-1 rounded-full px-2 py-1 font-medium ring-1",
                        paramSelecionado.tipo === "ENTRADA"
                          ? "bg-red-200 text-red-900 ring-red-300"
                          : "bg-emerald-200 text-emerald-900 ring-emerald-300",
                      ].join(" ")}
                      title={paramSelecionado.tipo}
                    >
                      {paramSelecionado.tipo}
                    </span>
                  )}
                </div>
              </div>

              <div>
                <label className="text-sm text-slate-700">Valor</label>
                <input
                  className="mt-1 border rounded-xl px-3 py-2 w-full"
                  value={valor}
                  onChange={(e) => setValor(formatarMoedaBRL(e.target.value))}
                  placeholder="0,00"
                  disabled={!podeEditar}
                />
              </div>

              <div>
                <label className="text-sm text-slate-700">Data</label>
                <input
                  type="date"
                  className="mt-1 border rounded-xl px-3 py-2 w-full"
                  value={dataLanc}
                  onChange={(e) => setDataLanc(e.target.value)}
                  disabled={!podeEditar}
                />
              </div>

              {/* Campos condicionais */}
              {requerTipoCheque && (
                <div>
                  <label className="text-sm text-slate-700">Tipo de cheque</label>
                  <select
                    className="mt-1 border rounded-xl px-3 py-2 w-full"
                    value={tipoCheque}
                    onChange={(e) => setTipoCheque((e.target.value as "PROPRIO" | "TERCEIRO") || "")}
                    disabled={!podeEditar}
                  >
                    <option value="">(selecione)</option>
                    <option value="PROPRIO">PRÃ“PRIO</option>
                    <option value="TERCEIRO">TERCEIRO</option>
                  </select>
                </div>
              )}

              {requerBomPara && (
                <div>
                  <label className="text-sm text-slate-700">Bom para</label>
                  <input
                    type="date"
                    className="mt-1 border rounded-xl px-3 py-2 w-full"
                    value={bomPara}
                    onChange={(e) => setBomPara(e.target.value)}
                    disabled={!podeEditar}
                  />
                </div>
              )}

              <div className="md:col-span-2">
                <label className="text-sm text-slate-700">Ref.</label>
                <input
                  className="mt-1 border rounded-xl px-3 py-2 w-full"
                  value={numRef}
                  onChange={(e) => setNumRef(e.target.value)}
                  placeholder="nÂº do pedido / nÂº cheque / obs curta"
                  disabled={!podeEditar}
                />
              </div>

              <div className="md:col-span-4">
                <label className="text-sm text-slate-700">ObservaÃ§Ã£o</label>
                <input
                  className="mt-1 border rounded-xl px-3 py-2 w-full"
                  value={obs}
                  onChange={(e) => setObs(e.target.value)}
                  disabled={!podeEditar}
                />
              </div>

              <div className="md:col-span-6">
                <button
                  onClick={doAddLanc}
                  disabled={savingLanc || !podeEditar}
                  className="px-3 py-2 rounded-xl bg-emerald-600 text-white hover:bg-emerald-700 disabled:opacity-50"
                >
                  {savingLanc ? "Salvando..." : "Adicionar lanÃ§amento"}
                </button>
              </div>
            </div>
          </div>

          {/* tabela */}
          <div className="rounded-2xl border bg-white overflow-x-auto shadow-sm">
            <table className="w-full text-sm">
              <thead className="bg-slate-100 backdrop-blur border-b sticky top-0">
                <tr>
                  <th className="p-2 border">Tipo</th>
                  <th className="p-2 border">Sentido</th>
                  <th className="p-2 border">Valor</th>
                  <th className="p-2 border">Data</th>
                  <th className="p-2 border">Bom para</th>
                  <th className="p-2 border">Ref</th>
                  <th className="p-2 border">Por</th>
                  <th className="p-2 border">Obs</th>
                  <th className="p-2 border">AÃ§Ãµes</th>
                </tr>
              </thead>
              <tbody>
                {lancs.map((l) => {
                  const isReceber = !!l.bom_para && l.status !== "BAIXADO NO FINANCEIRO";
                  const baixado = l.status === "BAIXADO NO FINANCEIRO";

                  const toneRow = baixado
                    ? "bg-emerald-100" // baixado no financeiro => verde
                    : isReceber
                    ? "bg-amber-100" // A receber
                    : l.sentido === "ENTRADA"
                    ? "bg-red-100"
                    : "bg-emerald-100";

                  return (
                    <tr key={l.id} className={toneRow}>
                      <td className="p-2 border">{l.tipo_recebimento}</td>
                      <td className="p-2 border">{l.sentido}</td>
                      <td className="p-2 border">
                        {Number(l.valor).toLocaleString("pt-BR", { style: "currency", currency: "BRL" })}
                      </td>
                      <td className="p-2 border">{dateBR(l.data_lancamento)}</td>
                      <td className="p-2 border">{dateBR(l.bom_para)}</td>
                      <td className="p-2 border">{l.numero_referencia ?? "-"}</td>
                      <td className="p-2 border">
                        {l.criado_por_nome?.trim() || (l.criado_por ? `#${l.criado_por}` : "-")}
                      </td>
                      <td className="p-2 border">{l.observacao ?? "-"}</td>
                      <td className="p-2 border">
                        <button
                          className="px-2 py-1 rounded-lg border text-xs hover:bg-slate-50 disabled:opacity-50"
                          disabled={!podeEditar || !!l.bom_para}
                          onClick={() => doDel(l.id, !!l.bom_para)}
                          title={l.bom_para ? "Exclua/ajuste primeiro o tÃ­tulo gerado" : "Excluir lanÃ§amento"}
                        >
                          Excluir
                        </button>
                      </td>
                    </tr>
                  );
                })}
                {lancs.length === 0 && (
                  <tr>
                    <td colSpan={9} className="p-5 text-center text-slate-500">
                      Nenhum lanÃ§amento.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>

          <div className="flex items-center gap-2">
            <button
              className="px-2 py-1 rounded-xl border hover:bg-slate-50"
              onClick={() => setLPage((p) => Math.max(1, p - 1))}
            >
              â—€
            </button>
            <span className="text-sm">PÃ¡gina {lPage}</span>
            <button className="px-2 py-1 rounded-xl border hover:bg-slate-50" onClick={() => setLPage((p) => p + 1)}>
              â–¶
            </button>
            <select className="ml-3 border rounded-xl px-2 py-1" value={lLimit} onChange={(e) => setLLimit(Number(e.target.value))}>
              {[10, 25, 50].map((n) => (
                <option key={n} value={n}>
                  {n}/pÃ¡g
                </option>
              ))}
            </select>
          </div>
        </div>
      )}

      {tab === "resumo" && (
        <div className="rounded-2xl border bg-white p-4 shadow-sm">
          <div className="grid md:grid-cols-2 gap-4">
            <div>
              <div className="text-xs text-slate-500">Cliente</div>
              <div className="font-medium">{b?.cliente_nome ?? b?.cliente_id}</div>
            </div>
            <div>
              <div className="text-xs text-slate-500">Aberto em</div>
              <div className="font-medium">{dateTimeBR(b?.aberto_em as any)}</div>
            </div>
            <div>
              <div className="text-xs text-slate-500">Fechado em</div>
              <div className="font-medium">{dateTimeBR(b?.fechado_em as any)}</div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}


----- END frontend\src\components\ui\BlocoDetalhe.tsx -----


----- BEGIN frontend\src\components\ui\Blocos.tsx -----

import { useCallback, useEffect, useMemo, useRef, useState } from "react";
import { Link, useSearchParams } from "react-router-dom";
import { listarBlocos } from "../../services/blocos.api";
import api from "../../services/api";
import type { Bloco, BlocoStatus } from "../../services/blocos.api";

/** =================== debounce simples =================== */
function useDebounce<T>(value: T, delay = 400) {
  const [debounced, setDebounced] = useState(value);
  useEffect(() => {
    const t = setTimeout(() => setDebounced(value), delay);
    return () => clearTimeout(t);
  }, [value, delay]);
  return debounced;
}

/** =================== tipos locais =================== */
type Cliente = { id: number; nome_fantasia: string };

type SortKey = "cliente" | "status";
type SortDir = "asc" | "desc";

/** =================== componente =================== */
export default function Blocos() {
  const [sp, setSp] = useSearchParams();

  /** ------------ Filtros / URL ------------ */
  const [clienteNome, setClienteNome] = useState<string>(sp.get("q") ?? "");
  const initialClienteIdParam = sp.get("cliente_id");
  const [clienteId] = useState<number | null>(initialClienteIdParam ? Number(initialClienteIdParam) : null);

  const initialStatus = (sp.get("status") as BlocoStatus | "") || "ABERTO";
  const [status, setStatus] = useState<BlocoStatus | "">(initialStatus);

  const [page, setPage] = useState<number>(Number(sp.get("page") || 1));
  const [limit, setLimit] = useState<number>(Number(sp.get("limit") || 10));

  // ordenaÃ§Ã£o
  const [sortKey, setSortKey] = useState<SortKey>((sp.get("sortKey") as SortKey) || "cliente");
  const [sortDir, setSortDir] = useState<SortDir>((sp.get("sortDir") as SortDir) || "asc");

  /** ------------ Dados ------------ */
  const [rows, setRows] = useState<Bloco[]>([]);
  const [total, setTotal] = useState<number>(0);

  const [loading, setLoading] = useState(false);
  const [skeleton, setSkeleton] = useState(false);
  const [error, setError] = useState<string | null>(null);

  /** ------------ Modal novo bloco ------------ */
  const [openNew, setOpenNew] = useState(false);
  const [novoClienteNome, setNovoClienteNome] = useState("");
  const [novoClienteId, setNovoClienteId] = useState<number | "">("");
  const [novaObs, setNovaObs] = useState("");

  // feedback do modal
  const [newErrMsg, setNewErrMsg] = useState<string | undefined>(undefined);
  const [newErrBlocoId, setNewErrBlocoId] = useState<number | undefined>(undefined);

  // auto-complete
  const [cliOpts, setCliOpts] = useState<Cliente[]>([]);
  const [cliOpen, setCliOpen] = useState(false);
  const [cliActiveIndex, setCliActiveIndex] = useState<number>(-1);
  const [cliLoadingNew, setCliLoadingNew] = useState(false);

  const debouncedBuscaCliente = useDebounce(novoClienteNome, 300);
  const cliBoxRef = useRef<HTMLDivElement>(null);
  const inputNewRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    function onClickOutside(e: MouseEvent) {
      if (!cliBoxRef.current?.contains(e.target as Node)) setCliOpen(false);
    }
    document.addEventListener("mousedown", onClickOutside);
    return () => document.removeEventListener("mousedown", onClickOutside);
  }, []);

  useEffect(() => {
    if (openNew) {
      setTimeout(() => inputNewRef.current?.focus(), 50);
    }
  }, [openNew]);

  useEffect(() => {
    if (debouncedBuscaCliente.trim().length < 2 || novoClienteId !== "") {
      setCliOpts([]);
      setCliOpen(false);
      setCliActiveIndex(-1);
      setCliLoadingNew(false);
      return;
    }
    let cancel = false;
    setCliLoadingNew(true);
    (async () => {
      try {
        const { data } = await api.get("/clientes", {
          params: { search: debouncedBuscaCliente, limit: 10 },
        });
        if (cancel) return;
        const list: Cliente[] = (data?.data ?? data ?? []).slice(0, 10);
        setCliOpts(list);
        setCliOpen(list.length > 0);
        setCliActiveIndex(list.length ? 0 : -1);
      } catch {
        // silencioso
      } finally {
        if (!cancel) setCliLoadingNew(false);
      }
    })();
    return () => {
      cancel = true;
    };
  }, [debouncedBuscaCliente, novoClienteId]);

  function selecionarCliente(c: Cliente) {
    setNovoClienteNome(c.nome_fantasia);
    setNovoClienteId(c.id);
    setCliOpen(false);
  }
  function limparCliente() {
    setNovoClienteNome("");
    setNovoClienteId("");
    setCliOpts([]);
    setCliOpen(false);
    setCliActiveIndex(-1);
    setNewErrMsg(undefined);
    setNewErrBlocoId(undefined);
    inputNewRef.current?.focus();
  }

  const debouncedNome = useDebounce(clienteNome, 400);

  /** ------------ URL Sync ------------ */
  useEffect(() => {
    const p = new URLSearchParams(sp);
    p.set("q", clienteNome);
    status ? p.set("status", status) : p.delete("status");
    p.set("page", String(page));
    p.set("limit", String(limit));
    p.set("sortKey", sortKey);
    p.set("sortDir", sortDir);
    if (sp.get("cliente_id")) p.set("cliente_id", sp.get("cliente_id") as string);
    setSp(p, { replace: true });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [clienteNome, status, page, limit, sortKey, sortDir]);

  /** ------------ Carregar ------------ */
  const load = useCallback(async () => {
    setLoading(true);
    setError(null);
    setSkeleton(rows.length === 0);

    try {
      const r = await listarBlocos({
        cliente_id: clienteId ?? undefined,
        cliente: clienteId ? undefined : debouncedNome || undefined,
        status: status || undefined,
        page,
        limit,
      } as any);

      let list: Bloco[] = (r.data ?? []) as Bloco[];

      // ordenaÃ§Ã£o no front
      list = list.slice().sort((a, b) => {
        if (sortKey === "cliente") {
          const an = (a.cliente_nome ?? "").toLocaleLowerCase();
          const bn = (b.cliente_nome ?? "").toLocaleLowerCase();
          return sortDir === "asc" ? an.localeCompare(bn, "pt-BR") : bn.localeCompare(an, "pt-BR");
        }
        const av = a.status ?? "";
        const bv = b.status ?? "";
        return sortDir === "asc" ? av.localeCompare(bv) : bv.localeCompare(av);
      });

      setRows(list);
      setTotal(Number(r.total ?? list.length));
    } catch (e: any) {
      setError(e?.response?.data?.message || "Falha ao carregar os blocos.");
    } finally {
      setLoading(false);
      setSkeleton(false);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [debouncedNome, status, page, limit, clienteId, sortKey, sortDir]);

  useEffect(() => {
    load();
  }, [load]);

  const canNext = page * limit < total;

  /** ------------ Abrir bloco ------------ */
  async function handleCriarBloco() {
    if (novoClienteId === "") {
      setNewErrMsg("Selecione um cliente para abrir o bloco.");
      setNewErrBlocoId(undefined);
      return;
    }
    try {
      setLoading(true);
      setNewErrMsg(undefined);
      setNewErrBlocoId(undefined);

      const { data } = await api.post("/blocos", {
        cliente_id: Number(novoClienteId),
        observacao: novaObs || undefined,
      });
      setOpenNew(false);
      limparCliente();
      setNovaObs("");
      window.location.href = `/blocos/${data?.id ?? data?.data?.id}`;
    } catch (e: any) {
      const msg = e?.response?.data?.message ?? "Falha ao abrir bloco.";
      const existente = e?.response?.status === 409 ? Number(e?.response?.data?.bloco_aberto_id) : undefined;
      setNewErrMsg(msg);
      setNewErrBlocoId(existente);
    } finally {
      setLoading(false);
    }
  }

  /** ------------ Helpers UI ------------ */
  const totalLabel = useMemo(() => {
    if (!total) return "0 resultado";
    if (total === 1) return "1 resultado";
    return `${total} resultados`;
  }, [total]);

  function toggleSort(key: SortKey) {
    if (sortKey !== key) {
      setSortKey(key);
      setSortDir("asc");
      setPage(1);
      return;
    }
    setSortDir((d) => (d === "asc" ? "desc" : "asc"));
    setPage(1);
  }

  const SortIcon = ({ dir }: { dir: SortDir }) => (
    <span className="ml-1 inline-block select-none align-middle">{dir === "asc" ? "â–²" : "â–¼"}</span>
  );

  /** ------------ Render ------------ */
  return (
    <div className="p-6 space-y-6">
      {/* Hero */}
      <div className="rounded-2xl bg-gradient-to-r from-sky-50 via-indigo-50 to-fuchsia-50 border shadow-sm p-5 flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-semibold text-slate-900">Blocos</h1>
          <p className="text-slate-600 text-sm">
            Gerencie os blocos por cliente. <span className="font-medium">{totalLabel}</span>.
          </p>
        </div>
        <button
          onClick={() => {
            setOpenNew(true);
            setNewErrMsg(undefined);
            setNewErrBlocoId(undefined);
          }}
          className="px-4 py-2.5 rounded-xl bg-blue-600 text-white hover:bg-blue-700 shadow"
        >
          Abrir novo bloco
        </button>
      </div>

      {/* Filtros */}
      <section className="rounded-2xl border bg-white shadow-sm">
        <div className="p-4 grid grid-cols-1 sm:grid-cols-4 gap-4 items-end">
          <div className="sm:col-span-2">
            <label className="block text-xs font-semibold text-slate-700 mb-1">Cliente</label>
            <input
              type="text"
              className="border rounded-xl px-3 py-2 w-full outline-none focus:ring-2 focus:ring-sky-200"
              value={clienteNome}
              onChange={(e) => {
                setPage(1);
                setClienteNome(e.target.value);
              }}
              placeholder="digite o nomeâ€¦"
            />
          </div>

          <div>
            <label className="block text-xs font-semibold text-slate-700 mb-1">Status</label>
            <select
              className="border rounded-xl px-3 py-2 w-full outline-none focus:ring-2 focus:ring-sky-200"
              value={status}
              onChange={(e) => {
                setPage(1);
                setStatus((e.target.value || "") as BlocoStatus | "");
              }}
            >
              <option value="ABERTO">ABERTO</option>
              <option value="FECHADO">FECHADO</option>
              <option value="">(todos)</option>
            </select>
          </div>

          <div>
            <label className="block text-xs font-semibold text-slate-700 mb-1">Limite</label>
            <select
              className="border rounded-xl px-3 py-2 w-full outline-none focus:ring-2 focus:ring-sky-200"
              value={limit}
              onChange={(e) => {
                setPage(1);
                setLimit(Number(e.target.value));
              }}
            >
              {[10, 25, 50].map((n) => (
                <option key={n} value={n}>
                  {n}/pÃ¡gina
                </option>
              ))}
            </select>
          </div>
        </div>
        <div className="px-4 pb-4 flex items-center gap-2">
          <button
            onClick={load}
            className="px-4 py-2 rounded-xl bg-slate-900 text-white hover:bg-slate-800 disabled:opacity-60"
            disabled={loading}
          >
            {loading ? "Buscandoâ€¦" : "Buscar"}
          </button>
          {loading && <span className="text-sm text-slate-500">carregando resultadosâ€¦</span>}
        </div>
      </section>

      {error && (
        <div className="rounded-xl border border-red-200 bg-red-50 text-red-700 px-4 py-2">
          {error}
        </div>
      )}

      {/* Tabela */}
      <div className="rounded-2xl border bg-white shadow-sm">
        <div className="overflow-x-auto">
          <table className="w-full text-sm">
            <thead className="sticky top-0 bg-slate-50/90 backdrop-blur border-b">
              <tr>
                <th
                  className="p-3 text-left font-medium text-slate-700 select-none"
                  role="button"
                  onClick={() => toggleSort("cliente")}
                >
                  Cliente
                  {sortKey === "cliente" && <SortIcon dir={sortDir} />}
                </th>
                <th
                  className="p-3 text-left font-medium text-slate-700 select-none"
                  role="button"
                  onClick={() => toggleSort("status")}
                >
                  Status
                  {sortKey === "status" && <SortIcon dir={sortDir} />}
                </th>
                <th className="p-3 text-left font-medium text-slate-700">AÃ§Ãµes</th>
              </tr>
            </thead>
            <tbody>
              {skeleton &&
                Array.from({ length: 5 }).map((_, i) => (
                  <tr key={`sk-${i}`} className="animate-pulse">
                    <td className="p-3 border-b">
                      <div className="h-3 w-40 bg-slate-200 rounded" />
                    </td>
                    <td className="p-3 border-b">
                      <div className="h-5 w-16 bg-slate-200 rounded-full" />
                    </td>
                    <td className="p-3 border-b">
                      <div className="h-3 w-12 bg-slate-200 rounded" />
                    </td>
                  </tr>
                ))}

              {!skeleton &&
                rows.map((b) => (
                  <tr
                    key={b.id}
                    className="hover:bg-slate-50/80 cursor-pointer"
                    onClick={() => (window.location.href = `/blocos/${b.id}`)}
                  >
                    <td className="p-3 border-b">{b.cliente_nome ?? b.cliente_id}</td>
                    <td className="p-3 border-b">
                      <span
                        className={
                          "text-[11px] px-2 py-0.5 rounded-full font-semibold uppercase tracking-wide " +
                          (b.status === "ABERTO"
                            ? "bg-blue-100 text-blue-700"
                            : "bg-slate-200 text-slate-700")
                        }
                        aria-label={`Status ${b.status}`}
                      >
                        {b.status}
                      </span>
                    </td>
                    <td className="p-3 border-b">
                      <Link
                        to={`/blocos/${b.id}`}
                        onClick={(e) => e.stopPropagation()}
                        className="text-blue-700 hover:text-blue-800 underline"
                        aria-label={`Abrir bloco #${b.id}`}
                      >
                        Detalhe
                      </Link>
                    </td>
                  </tr>
                ))}

              {!skeleton && rows.length === 0 && !loading && (
                <tr>
                  <td colSpan={3} className="p-10 text-center">
                    <div className="space-y-2">
                      <div className="text-slate-500">Nenhum bloco encontrado com os filtros atuais.</div>
                      <button
                        onClick={() => {
                          setNewErrMsg(undefined);
                          setNewErrBlocoId(undefined);
                          setOpenNew(true);
                        }}
                        className="inline-flex items-center px-3 py-2 rounded-xl bg-blue-600 text-white hover:bg-blue-700"
                      >
                        Abrir novo bloco
                      </button>
                    </div>
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        {/* RodapÃ© / paginaÃ§Ã£o */}
        <div className="px-4 py-3 flex items-center justify-between">
          <div className="text-sm text-slate-600">
            PÃ¡gina {page}
            {loading && <span className="opacity-60"> â€¢ carregandoâ€¦</span>}
          </div>
          <div className="flex items-center gap-2">
            <button
              className="px-3 py-1.5 rounded-xl border hover:bg-slate-50 disabled:opacity-50"
              onClick={() => setPage((p) => Math.max(1, p - 1))}
              disabled={page === 1 || loading}
            >
              Anterior
            </button>
            <button
              className="px-3 py-1.5 rounded-xl border hover:bg-slate-50 disabled:opacity-50"
              onClick={() => setPage((p) => p + 1)}
              disabled={!canNext || loading}
            >
              PrÃ³xima
            </button>
          </div>
        </div>
      </div>

      {/* Modal novo bloco â€” versÃ£o melhorada */}
      {openNew && (
        <div
          className="fixed inset-0 bg-black/40 backdrop-blur-sm flex items-center justify-center z-50 p-4"
          onClick={() => setOpenNew(false)}
        >
          <div
            className="bg-white rounded-2xl w-full max-w-lg shadow-2xl ring-1 ring-slate-200"
            onClick={(e) => e.stopPropagation()}
            role="dialog"
            aria-modal="true"
            aria-labelledby="novo-bloco-title"
          >
            <div className="rounded-t-2xl bg-gradient-to-r from-slate-50 to-white px-5 py-4 border-b">
              <h2 id="novo-bloco-title" className="text-lg font-semibold">Abrir novo bloco</h2>
              <p className="text-slate-500 text-sm">Selecione o cliente e, se quiser, informe uma observaÃ§Ã£o.</p>
            </div>

            <div className="p-5 space-y-4" ref={cliBoxRef}>
              {/* erro elegante */}
              {newErrMsg && (
                <div className="rounded-xl border border-rose-200 bg-rose-50 px-3 py-2 text-sm text-rose-800 flex items-start gap-2">
                  <span className="mt-0.5">âš ï¸</span>
                  <div className="flex-1">
                    <div className="font-medium">{newErrMsg}</div>
                    {newErrBlocoId && (
                      <button
                        type="button"
                        className="mt-1 text-blue-700 underline underline-offset-2 hover:text-blue-800"
                        onClick={() => (window.location.href = `/blocos/${newErrBlocoId}`)}
                      >
                        Abrir bloco #{newErrBlocoId}
                      </button>
                    )}
                  </div>
                </div>
              )}

              {/* cliente + autocomplete */}
              <div className="relative">
                <label className="block text-xs font-semibold text-slate-700 mb-1">Cliente</label>
                <div className="relative">
                  <input
                    ref={inputNewRef}
                    className="peer border rounded-xl px-3 py-2 w-full pr-24 outline-none focus:ring-2 focus:ring-sky-200"
                    value={novoClienteNome}
                    onChange={(e) => {
                      setNovoClienteNome(e.target.value);
                      if (novoClienteId !== "") setNovoClienteId("");
                      setNewErrMsg(undefined);
                      setNewErrBlocoId(undefined);
                    }}
                    onFocus={() => {
                      if (cliOpts.length > 0) setCliOpen(true);
                    }}
                    onKeyDown={(e) => {
                      if (e.key === "Escape") {
                        if (cliOpen) { setCliOpen(false); return; }
                        setOpenNew(false);
                        return;
                      }
                      if (!cliOpen || cliOpts.length === 0) {
                        if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === "enter") {
                          e.preventDefault();
                          void handleCriarBloco();
                        }
                        return;
                      }
                      if (e.key === "ArrowDown") {
                        e.preventDefault();
                        setCliActiveIndex((i) => Math.min(cliOpts.length - 1, i + 1));
                      } else if (e.key === "ArrowUp") {
                        e.preventDefault();
                        setCliActiveIndex((i) => Math.max(0, i - 1));
                      } else if (e.key === "Enter" && cliActiveIndex >= 0) {
                        e.preventDefault();
                        selecionarCliente(cliOpts[cliActiveIndex]);
                      }
                    }}
                    placeholder="Digite para buscarâ€¦"
                    aria-autocomplete="list"
                    aria-expanded={cliOpen}
                    aria-controls="autocomplete-clientes"
                  />
                  {(novoClienteId !== "" || novoClienteNome) && (
                    <button
                      type="button"
                      className="absolute right-2 top-1/2 -translate-y-1/2 text-xs px-2 py-1 rounded border bg-white hover:bg-slate-50"
                      onClick={limparCliente}
                      title="Limpar"
                    >
                      Limpar
                    </button>
                  )}
                </div>

                {novoClienteId !== "" && (
                  <div className="mt-1 text-xs text-slate-600">
                    Selecionado:{" "}
                    <span className="inline-flex items-center gap-1 rounded-full bg-slate-100 px-2 py-0.5 font-medium">
                      <span className="text-slate-500">#</span>{novoClienteId}
                    </span>
                  </div>
                )}

                {cliOpen && (
                  <div id="autocomplete-clientes" className="absolute z-10 mt-1 w-full rounded-xl border bg-white shadow-xl max-h-72 overflow-auto" role="listbox">
                    {cliLoadingNew && (
                      <div className="px-3 py-2 text-sm text-slate-500">Carregandoâ€¦</div>
                    )}
                    {!cliLoadingNew && cliOpts.length === 0 && (
                      <div className="px-3 py-2 text-sm text-slate-500">Nenhum cliente encontrado.</div>
                    )}
                    {cliOpts.map((c, idx) => (
                      <button
                        key={c.id}
                        type="button"
                        role="option"
                        aria-selected={idx === cliActiveIndex}
                        className={[
                          "block w-full text-left px-3 py-2 hover:bg-slate-50",
                          idx === cliActiveIndex ? "bg-slate-50" : "",
                        ].join(" ")}
                        onMouseEnter={() => setCliActiveIndex(idx)}
                        onClick={() => selecionarCliente(c)}
                      >
                        <div className="font-medium truncate">{c.nome_fantasia}</div>
                        <div className="text-xs text-slate-500">#{c.id}</div>
                      </button>
                    ))}
                  </div>
                )}
              </div>

              {/* observaÃ§Ã£o */}
              <div>
                <label className="block text-xs font-semibold text-slate-700 mb-1">
                  ObservaÃ§Ã£o <span className="text-slate-400 font-normal">(opcional)</span>
                </label>
                <div className="relative">
                  <textarea
                    className="border rounded-xl px-3 py-2 w-full outline-none focus:ring-2 focus:ring-sky-200 min-h-[84px] resize-y"
                    value={novaObs}
                    maxLength={400}
                    onChange={(e) => setNovaObs(e.target.value)}
                    placeholder="Ex.: abrir bloco para novos tÃ­tulosâ€¦"
                  />
                  <div className="pointer-events-none absolute bottom-2 right-3 text-[11px] text-slate-400">
                    {novaObs.length}/400
                  </div>
                </div>
              </div>
            </div>

            <div className="flex items-center justify-end gap-2 px-5 py-4 border-t rounded-b-2xl bg-slate-50">
              <button className="px-3 py-2 rounded-xl border hover:bg-white" onClick={() => setOpenNew(false)}>
                Cancelar
              </button>
              <button
                className="px-3 py-2 rounded-xl bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 inline-flex items-center gap-2"
                onClick={handleCriarBloco}
                disabled={novoClienteId === "" || loading}
                title="Ctrl + Enter"
              >
                {loading && (
                  <svg className="h-4 w-4 animate-spin" viewBox="0 0 24 24" fill="none">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="3" />
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z" />
                  </svg>
                )}
                Abrir
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}


----- END frontend\src\components\ui\Blocos.tsx -----


----- BEGIN frontend\src\components\ui\button.tsx -----

// src/components/ui/button.tsx
import React from "react";
import { cn } from "../../lib/utils";

type Variant = "primary" | "secondary" | "outline" | "ghost" | "destructive";
type Size = "sm" | "md" | "lg";

type Props = React.ButtonHTMLAttributes<HTMLButtonElement> & {
  variant?: Variant;
  size?: Size;
  asChild?: boolean; // mantÃ©m compatibilidade se vocÃª jÃ¡ usava
};

const base =
  "inline-flex items-center justify-center gap-2 rounded-2xl font-medium transition-all disabled:opacity-60 disabled:pointer-events-none focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2";

const variants: Record<Variant, string> = {
  primary:
    "bg-blue-600 text-white hover:bg-blue-700 focus-visible:ring-blue-600",
  secondary:
    "bg-slate-800 text-white hover:bg-slate-900 focus-visible:ring-slate-800",
  outline:
    "border border-slate-300 text-slate-800 hover:bg-slate-50 focus-visible:ring-slate-300",
  ghost:
    "text-slate-700 hover:bg-slate-100 focus-visible:ring-slate-300",
  destructive:
    "bg-red-600 text-white hover:bg-red-700 focus-visible:ring-red-600",
};

const sizes: Record<Size, string> = {
  sm: "h-9 px-3 text-sm",
  md: "h-10 px-4 text-sm",
  lg: "h-12 px-6 text-base",
};

export default function Button({
  className,
  variant = "primary",
  size = "md",
  ...props
}: Props) {
  return (
    <button
      className={cn(base, variants[variant], sizes[size], className)}
      {...props}
    />
  );
}


----- END frontend\src\components\ui\button.tsx -----


----- BEGIN frontend\src\components\ui\card.tsx -----

// src/components/ui/card.tsx
import React from "react";
import { cn } from "../../lib/utils";

export function Card({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn(
        "rounded-2xl border border-slate-200 bg-white/90 shadow-sm backdrop-blur",
        className
      )}
      {...props}
    />
  );
}

export function CardHeader({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return <div className={cn("px-5 pt-5", className)} {...props} />;
}

export function CardTitle({
  className,
  ...props
}: React.HTMLAttributes<HTMLHeadingElement>) {
  return (
    <h3 className={cn("text-lg font-semibold tracking-tight", className)} {...props} />
  );
}

export function CardContent({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return <div className={cn("px-5 pb-5", className)} {...props} />;
}

export function CardFooter({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return <div className={cn("px-5 pb-5 pt-3", className)} {...props} />;
}


----- END frontend\src\components\ui\card.tsx -----


----- BEGIN frontend\src\components\ui\input.tsx -----

import React, { forwardRef } from "react";
import { cn } from "../../lib/utils";

export interface InputProps
  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, "size"> {
  /** exibe estado de erro (borda/aria-invalid) */
  invalid?: boolean;
  /** tamanho visual do componente (nÃ£o confundir com o atributo nativo size) */
  uiSize?: "sm" | "md" | "lg";
}

const sizes = {
  sm: "h-9 text-sm px-3",
  md: "h-10 text-sm px-3",
  lg: "h-11 text-base px-4",
};

const Input = forwardRef<HTMLInputElement, InputProps>(
  ({ className, invalid, uiSize = "md", type = "text", ...props }, ref) => {
    return (
      <input
        ref={ref}
        type={type}
        className={cn(
          "w-full rounded-md border bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-200",
          invalid ? "border-red-300" : "border-slate-300",
          sizes[uiSize],
          className
        )}
        aria-invalid={invalid || undefined}
        {...props}
      />
    );
  }
);

Input.displayName = "Input";
export default Input;


----- END frontend\src\components\ui\input.tsx -----


----- BEGIN frontend\src\components\ui\StatusBadge.tsx -----

// src/components/ui/StatusBadge.tsx
import React from "react";

const colors: Record<string, string> = {
  ABERTO: "bg-red-100 text-red-700",
  PARCIAL: "bg-amber-100 text-amber-700",
  BAIXADO: "bg-emerald-100 text-emerald-700",
  DEVOLVIDO: "bg-gray-200 text-gray-700",
  CANCELADO: "bg-gray-200 text-gray-700",
};

export default function StatusBadge({ value }: { value: string }) {
  return (
    <span className={`px-2 py-0.5 rounded text-xs font-medium ${colors[value] ?? "bg-slate-100 text-slate-700"}`}>
      {value}
    </span>
  );
}


----- END frontend\src\components\ui\StatusBadge.tsx -----


----- BEGIN frontend\src\components\ClienteDetalhes.tsx -----

import { useEffect, useMemo, useState } from "react";
import { Link, useNavigate, useParams } from "react-router-dom";
import api from "../services/api";

/* ===================== Tipos ===================== */
type Cliente = {
  id: number;
  nome_fantasia: string;
  whatsapp?: string | null;
  anotacoes?: string | null;
  tabela_preco?: string | null;
  status?: "ATIVO" | "INATIVO";
  ativo?: boolean;
};

type Doc = {
  id: number;
  doc_tipo: "CNPJ" | "CPF" | string;
  doc_numero: string;
  principal?: boolean;
  percentual_nf?: number | null;
  tipo_nota?: "MEIA" | "INTEGRAL";
};

type TranspVinculada = {
  cliente_id: number;
  transportadora_id: number;
  principal: boolean;
  observacao?: string | null;
  razao_social?: string | null;
  nome_fantasia?: string | null;
  cnpj?: string | null;
  telefone?: string | null;
};

type Transportadora = {
  id: number;
  nome?: string | null;
  nome_fantasia?: string | null;
  razao_social?: string | null;
  status?: "ATIVO" | "INATIVO";
};

/* ===================== Utils ===================== */
const formatBRL = (v: number) =>
  Number(v || 0).toLocaleString("pt-BR", { style: "currency", currency: "BRL" });

const nomeTransp = (t: { nome_fantasia?: string | null; razao_social?: string | null; nome?: string | null }) =>
  (t?.nome_fantasia || t?.razao_social || t?.nome || "").trim();

const copy = async (s: string) => {
  try {
    await navigator.clipboard.writeText(s);
  } catch {
    /* ignore */
  }
};

const toneOf = (v: number) => {
  if ((v ?? 0) > 0) return "from-emerald-50 to-emerald-100 ring-emerald-200 text-emerald-800";
  if ((v ?? 0) < 0) return "from-rose-50 to-rose-100 ring-rose-200 text-rose-800";
  return "from-slate-50 to-white ring-slate-200 text-slate-700";
};

// mÃ¡scaras rÃ¡pidas
const onlyDigits = (s: string) => (s || "").replace(/\D/g, "");
const formatCpf = (v: string) => {
  const d = onlyDigits(v).slice(0, 11);
  return d
    .replace(/^(\d{3})(\d)/, "$1.$2")
    .replace(/^(\d{3})\.(\d{3})(\d)/, "$1.$2.$3")
    .replace(/\.(\d{3})(\d)/, ".$1-$2");
};
const formatCnpj = (v: string) => {
  const d = onlyDigits(v).slice(0, 14);
  return d
    .replace(/^(\d{2})(\d)/, "$1.$2")
    .replace(/^(\d{2})\.(\d{3})(\d)/, "$1.$2.$3")
    .replace(/\.(\d{3})(\d)/, ".$1/$2")
    .replace(/(\d{4})(\d)/, "$1-$2");
};
const formatDoc = (tipo?: string, num?: string) =>
  !num ? "â€”" : tipo === "CPF" ? formatCpf(num) : tipo === "CNPJ" ? formatCnpj(num) : num;

/** Regras do card Financeiro (conforme combinado):
 *  Financeiro = dÃ©bito do(s) bloco(s) aberto(s) + A Receber
 *  dÃ©bito do bloco = apenas a parte negativa do saldo_do_bloco (positivo nÃ£o entra)
 */
const calcularFinanceiro = (saldoBloco: number, aReceber: number) =>
  Math.max(0, -Number(saldoBloco || 0)) + Number(aReceber || 0);

/* ===================== Componente ===================== */
export default function ClienteDetalhes() {
  const { id } = useParams<{ id: string }>();
  const nav = useNavigate();

  const [cli, setCli] = useState<Cliente | null>(null);
  const [loading, setLoading] = useState(true);

  // saldos (consolidados por cliente â€” independem da qtde de blocos)
  const [saldoBloco, setSaldoBloco] = useState<number>(0);
  const [financeiro, setFinanceiro] = useState<number>(0);
  const [aReceber, setAReceber] = useState<number>(0);
  const [saldoLoading, setSaldoLoading] = useState(false);

  const [docs, setDocs] = useState<Doc[]>([]);
  const [docsLoading, setDocsLoading] = useState(false);

  // vÃ­nculos
  const [vLoading, setVLoading] = useState(false);
  const [vRows, setVRows] = useState<TranspVinculada[]>([]);
  const [vErr, setVErr] = useState<string | null>(null);

  // modal associar
  const [openAssoc, setOpenAssoc] = useState(false);
  const [listaTransp, setListaTransp] = useState<Transportadora[]>([]);
  const [filtroTransp, setFiltroTransp] = useState("");
  const [selTransp, setSelTransp] = useState<number | "">("");
  const [selPrincipal, setSelPrincipal] = useState(true);
  const [assocSaving, setAssocSaving] = useState(false);

  /* ---------- Carrega cliente ---------- */
  useEffect(() => {
    let cancel = false;
    (async () => {
      try {
        setLoading(true);
        const { data } = await api.get(`/clientes/${id}`);
        if (cancel) return;

        const raw = (data?.data ?? data) as any;
        const status: "ATIVO" | "INATIVO" =
          (raw?.status as any) || (raw?.ativo ? "ATIVO" : "INATIVO") || "ATIVO";

        setCli({
          id: Number(raw.id),
          nome_fantasia: raw.nome_fantasia ?? "",
          whatsapp: raw.whatsapp ?? null,
          anotacoes: raw.anotacoes ?? null,
          tabela_preco: raw.tabela_preco ?? null,
          status,
          ativo: status === "ATIVO",
        });

        if (typeof raw?.a_receber === "number") setAReceber(Number(raw.a_receber || 0));
      } finally {
        if (!cancel) setLoading(false);
      }
    })();
    return () => {
      cancel = true;
    };
  }, [id]);

  /* ---------- Saldos ---------- */
  async function recarregarSaldos() {
    if (!id) return;
    try {
      setSaldoLoading(true);
      const { data } = await api.get(`/clientes/${id}/saldo`, { headers: { "x-silent": "1" } });

      const sb = Number(data?.saldo_bloco ?? 0);
      const ar = Number(data?.a_receber ?? 0);

      setSaldoBloco(sb);
      setAReceber(ar);

      // IMPORTANTE: ignora qualquer "financeiro" legado do backend e
      // aplica a regra definida (dÃ©bito do bloco + a receber)
      setFinanceiro(calcularFinanceiro(sb, ar));
    } catch {
      setSaldoBloco(0);
      setFinanceiro(0);
      setAReceber(0);
    } finally {
      setSaldoLoading(false);
    }
  }
  useEffect(() => {
    recarregarSaldos();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [id]);

  /* ---------- Documentos ---------- */
  useEffect(() => {
    if (!id) return;
    let cancel = false;
    (async () => {
      try {
        setDocsLoading(true);
        const { data } = await api.get(`/clientes/${id}/documentos`, { headers: { "x-silent": "1" } });
        if (cancel) return;
        setDocs((data?.documentos ?? data?.data ?? []) as Doc[]);
      } catch {
        if (!cancel) setDocs([]);
      } finally {
        if (!cancel) setDocsLoading(false);
      }
    })();
    return () => {
      cancel = true;
    };
  }, [id]);

  /* ---------- VÃ­nculos de transportadoras ---------- */
  async function loadVinculos() {
    if (!id) return;
    setVLoading(true);
    setVErr(null);
    try {
      const { data } = await api.get(`/clientes/${id}/transportadoras`);
      setVRows((data?.data ?? data ?? []) as TranspVinculada[]);
    } catch (e: any) {
      setVErr(e?.response?.data?.message || "Falha ao carregar transportadoras do cliente.");
      setVRows([]);
    } finally {
      setVLoading(false);
    }
  }
  useEffect(() => {
    loadVinculos();
  }, [id]);

  // opÃ§Ãµes de transportadoras (para o modal)
  useEffect(() => {
    if (!openAssoc) return;
    (async () => {
      try {
        const { data } = await api.get("/transportadoras", {
          params: { status: "ATIVO", limit: 999 },
          headers: { "x-silent": "1" },
        });
        setListaTransp(data?.data ?? data ?? []);
      } catch {
        setListaTransp([]);
      }
    })();
  }, [openAssoc]);

  const isAtivo = cli?.status === "ATIVO" || cli?.ativo;
  const docPrincipal = useMemo(() => docs.find((d) => d.principal), [docs]);

  /* ---------- Loading skeleton ---------- */
  if (loading || !cli) {
    return (
      <div className="space-y-6 animate-pulse">
        <div className="h-24 rounded-3xl bg-slate-200/50" />
        <div className="grid gap-5 md:grid-cols-3">
          <div className="md:col-span-2 h-72 rounded-2xl border bg-white" />
          <div className="space-y-5">
            <div className="h-40 rounded-2xl border bg-white" />
            <div className="h-40 rounded-2xl border bg-white" />
          </div>
        </div>
      </div>
    );
  }

  /* ---------- UI ---------- */
  const opcoesTranspFiltradas = listaTransp.filter((t) =>
    nomeTransp(t).toLowerCase().includes(filtroTransp.toLowerCase())
  );

  return (
    <div className="space-y-6">
      {/* HERO */}
      <section className="rounded-3xl bg-gradient-to-r from-slate-900 via-slate-800 to-slate-700 text-white p-6 shadow">
        <div className="flex flex-wrap items-end justify-between gap-4">
          <div className="min-w-0">
            <div className="flex items-center gap-2">
              <button
                className="rounded-lg bg-white/10 px-3 py-1.5 ring-1 ring-white/30 hover:bg-white/20"
                onClick={() => nav(-1)}
                title="Voltar"
              >
                â† Voltar
              </button>
              <span
                className={
                  "rounded-full px-2 py-0.5 text-[11px] ring-1 " +
                  (isAtivo
                    ? "bg-emerald-500/10 text-emerald-200 ring-emerald-300/30"
                    : "bg-white/10 text-white ring-white/30")
                }
              >
                {isAtivo ? "ATIVO" : "INATIVO"}
              </span>
            </div>

            <h1 className="mt-2 truncate text-2xl font-semibold">
              {cli.nome_fantasia} <span className="text-slate-300">#{cli.id}</span>
            </h1>

            <div className="mt-1 text-sm text-slate-300">
              {docPrincipal ? (
                <>
                  Doc principal: <span className="font-medium">{docPrincipal.doc_tipo}</span>{" "}
                  <button
                    className="underline decoration-1 underline-offset-2 hover:text-white/90"
                    onClick={() => copy(onlyDigits(docPrincipal.doc_numero))}
                    title="Copiar"
                  >
                    {formatDoc(docPrincipal.doc_tipo, docPrincipal.doc_numero)}
                  </button>
                </>
              ) : (
                <span className="opacity-75">Sem documento principal</span>
              )}
              {cli.tabela_preco && <span className="ml-3">â€¢ Tabela: {cli.tabela_preco}</span>}
            </div>
          </div>

          {/* Cards */}
          <div className="grid grid-cols-3 gap-3 min-w-[28rem]">
            <div
              className={`rounded-2xl bg-gradient-to-br px-4 py-3 ring-1 ${toneOf(
                saldoBloco
              )} shadow-sm`}
              title="Soma de todas as movimentaÃ§Ãµes dos blocos ABERTOS (SAÃDA + / ENTRADA âˆ’), ignorando cancelados."
            >
              <div className="text-xs text-slate-700/80">Saldo do bloco</div>
              <div className="text-2xl font-bold tracking-tight">
                {saldoLoading ? "calculandoâ€¦" : formatBRL(saldoBloco)}
              </div>
            </div>

            <div
              className={`rounded-2xl bg-gradient-to-br px-4 py-3 ring-1 ${toneOf(
                financeiro
              )} shadow-sm`}
              title="(Regra da tela) Financeiro = dÃ©bito do bloco (se negativo) + A Receber."
            >
              <div className="text-xs text-slate-700/80">Financeiro</div>
              <div className="text-2xl font-bold tracking-tight">
                {saldoLoading ? "â€¦" : formatBRL(financeiro)}
              </div>
            </div>

            <div
              className="rounded-2xl bg-gradient-to-br from-amber-50 to-yellow-50 ring-1 ring-amber-200 text-amber-900 px-4 py-3 shadow-sm"
              title="TODOS os tÃ­tulos do cliente em ABERTO/PARCIAL (qualquer bloco)."
            >
              <div className="text-xs">A receber</div>
              <div className="text-2xl font-bold tracking-tight">
                {saldoLoading ? "â€¦" : formatBRL(aReceber)}
              </div>
            </div>

            <button
              onClick={recarregarSaldos}
              className="col-span-3 mt-1 rounded-xl bg-white/10 px-3 py-1.5 text-white ring-1 ring-white/30 hover:bg-white/20"
              title="Recarregar saldos"
            >
              â†» Atualizar saldos
            </button>
          </div>
        </div>
      </section>

      {/* GRID PRINCIPAL */}
      <div className="grid gap-6 md:grid-cols-3">
        {/* Dados do cliente */}
        <div className="md:col-span-2 rounded-2xl border bg-white p-5 shadow-sm">
          <h2 className="mb-4 text-sm font-medium text-slate-600">Dados do cliente</h2>

          <div className="grid gap-6 sm:grid-cols-2">
            <div className="space-y-1.5">
              <div className="text-xs font-medium text-slate-500">Nome fantasia</div>
              <div className="font-medium">{cli.nome_fantasia}</div>
            </div>

            <div className="space-y-1.5">
              <div className="text-xs font-medium text-slate-500">Tabela de preÃ§o</div>
              <div className="font-medium">{cli.tabela_preco || "â€”"}</div>
            </div>

            <div className="space-y-1.5">
              <div className="text-xs font-medium text-slate-500">WhatsApp</div>
              {cli.whatsapp ? (
                <div className="flex items-center gap-2">
                  <a
                    className="inline-flex items-center gap-2 text-blue-700 underline decoration-1 underline-offset-2 hover:text-blue-800"
                    href={`https://wa.me/${cli.whatsapp.replace(/\D/g, "")}`}
                    target="_blank"
                    rel="noreferrer"
                    title="Abrir no WhatsApp"
                  >
                    {cli.whatsapp}
                    <svg viewBox="0 0 24 24" className="h-4 w-4" fill="currentColor" aria-hidden>
                      <path d="M14 3h7v7h-2V6.41l-9.29 9.3-1.42-1.42 9.3-9.29H14V3z" />
                      <path d="M5 5h5V3H3v7h2V5z" />
                    </svg>
                  </a>
                  <button
                    className="text-xs rounded border px-2 py-1 hover:bg-slate-50"
                    onClick={() => copy(cli.whatsapp!)}
                    title="Copiar"
                  >
                    Copiar
                  </button>
                </div>
              ) : (
                <span className="text-slate-400">â€”</span>
              )}
            </div>

            <div className="space-y-1.5">
              <div className="text-xs font-medium text-slate-500">Status</div>
              <div className="font-medium">{isAtivo ? "ATIVO" : "INATIVO"}</div>
            </div>

            <div className="sm:col-span-2 space-y-1.5">
              <div className="text-xs font-medium text-slate-500">AnotaÃ§Ãµes</div>
              <p className="whitespace-pre-line text-slate-700">
                {cli.anotacoes?.trim() ? cli.anotacoes : <span className="text-slate-400">â€”</span>}
              </p>
            </div>
          </div>

          <div className="mt-5 flex flex-wrap gap-2">
            <Link
              to={`/clientes/${cli.id}/editar`}
              className="rounded-xl border bg-white px-3 py-2 transition-colors hover:bg-slate-50"
            >
              Editar dados
            </Link>
            <Link
              to={`/clientes/${cli.id}/documentos`}
              className="rounded-xl bg-violet-600 px-3 py-2 text-white transition-colors hover:bg-violet-700"
            >
              Gerenciar documentos
            </Link>
            <Link
              to={`/blocos?cliente_id=${cli.id}`}
              className="rounded-xl bg-emerald-600 px-3 py-2 text-white transition-colors hover:bg-emerald-700"
            >
              Abrir blocos
            </Link>
          </div>
        </div>

        {/* Coluna direita */}
        <div className="space-y-6">
          {/* Documentos fiscais */}
          <div className="rounded-2xl border bg-white p-4 shadow-sm">
            <div className="mb-3 flex items-center justify-between">
              <h3 className="text-sm font-medium text-slate-600">Documentos fiscais</h3>
              <Link to={`/clientes/${cli.id}/documentos`} className="text-xs rounded border px-2 py-1 hover:bg-slate-50">
                + adicionar / editar
              </Link>
            </div>

            <div className="overflow-hidden rounded border">
              <table className="w-full text-sm">
                <thead className="bg-slate-50">
                  <tr>
                    <th className="border p-2">Tipo</th>
                    <th className="border p-2">NÃºmero</th>
                    <th className="border p-2">Principal</th>
                    <th className="border p-2">Percentual</th>
                  </tr>
                </thead>
                <tbody>
                  {docsLoading && (
                    <tr>
                      <td colSpan={4} className="p-3 text-center text-slate-500">
                        Carregandoâ€¦
                      </td>
                    </tr>
                  )}
                  {!docsLoading && docs.length === 0 && (
                    <tr>
                      <td colSpan={4} className="p-3 text-center text-slate-400">
                        Nenhum documento
                      </td>
                    </tr>
                  )}
                  {!docsLoading &&
                    docs.map((d) => (
                      <tr key={d.id}>
                        <td className="border p-2">{d.doc_tipo}</td>
                        <td className="border p-2">
                          <button
                            className="underline decoration-1 underline-offset-2 hover:text-blue-700"
                            title="Copiar"
                            onClick={() => copy(onlyDigits(d.doc_numero))}
                          >
                            {formatDoc(d.doc_tipo, d.doc_numero)}
                          </button>
                        </td>
                        <td className="border p-2">
                          <span
                            className={
                              "inline-flex items-center rounded-full px-2 py-0.5 text-[11px] ring-1 " +
                              (d.principal
                                ? "bg-emerald-50 text-emerald-700 ring-emerald-200"
                                : "bg-slate-50 text-slate-600 ring-slate-200")
                            }
                          >
                            {d.principal ? "SIM" : "NÃƒO"}
                          </span>
                        </td>
                        <td className="border p-2">
                          {typeof d.percentual_nf === "number" ? `${d.percentual_nf}%` : "â€”"}
                        </td>
                      </tr>
                    ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Transportadoras associadas */}
          <div className="rounded-2xl border bg-white p-4 shadow-sm">
            <div className="mb-3 flex items-center justify-between">
              <h3 className="text-sm font-medium text-slate-600">Transportadoras associadas</h3>
              <button
                type="button"
                onClick={() => {
                  setSelTransp("");
                  setSelPrincipal(true);
                  setFiltroTransp("");
                  setOpenAssoc(true);
                }}
                className="text-xs rounded border px-2 py-1 hover:bg-slate-50"
              >
                + associar
              </button>
            </div>

            {vLoading ? (
              <div className="text-sm text-slate-500">Carregandoâ€¦</div>
            ) : vErr ? (
              <div className="text-sm text-rose-700">{vErr}</div>
            ) : vRows.length === 0 ? (
              <div className="text-sm text-slate-500">Nenhuma transportadora associada.</div>
            ) : (
              <ul className="space-y-2">
                {vRows.map((r) => (
                  <li
                    key={r.transportadora_id}
                    className="flex items-center justify-between rounded border bg-slate-50/60 px-3 py-2 text-sm"
                  >
                    <div className="flex min-w-0 items-center gap-2">
                      <span
                        className={
                          "inline-flex items-center gap-1 rounded-full px-2 py-0.5 text-[11px] ring-1 " +
                          (r.principal
                            ? "bg-amber-50 text-amber-700 ring-amber-200"
                            : "bg-slate-50 text-slate-600 ring-slate-200")
                        }
                        title={r.principal ? "Transportadora principal" : "VÃ­nculo"}
                      >
                        {r.principal ? "PRINCIPAL" : "VÃNCULO"}
                      </span>
                      <div className="truncate">
                        <div className="truncate font-medium">{nomeTransp(r) || `#${r.transportadora_id}`}</div>
                        <div className="truncate text-xs text-slate-500">{r.cnpj || r.telefone || "â€”"}</div>
                      </div>
                    </div>
                    <div className="flex shrink-0 items-center gap-2">
                      {!r.principal && (
                        <button
                          onClick={async () => {
                            await api.patch(
                              `/clientes/${cli.id}/transportadoras/${r.transportadora_id}`,
                              { principal: true }
                            );
                            await loadVinculos();
                          }}
                          className="rounded border px-2 py-1 text-xs hover:bg-slate-50"
                        >
                          Tornar principal
                        </button>
                      )}
                      <button
                        onClick={async () => {
                          if (!confirm("Remover vÃ­nculo desta transportadora?")) return;
                          await api.delete(`/clientes/${cli.id}/transportadoras/${r.transportadora_id}`);
                          await loadVinculos();
                        }}
                        className="rounded border px-2 py-1 text-xs text-rose-700 hover:bg-rose-50"
                      >
                        Remover
                      </button>
                    </div>
                  </li>
                ))}
              </ul>
            )}
          </div>
        </div>
      </div>

      {/* Modal associar transportadora */}
      {openAssoc && (
        <div
          className="fixed inset-0 z-50 grid place-items-center bg-black/30 p-4"
          onClick={() => !assocSaving && setOpenAssoc(false)}
        >
          <div
            className="w-full max-w-lg rounded-2xl bg-white p-4 shadow-xl"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="mb-3 flex items-center justify-between">
              <h4 className="text-base font-semibold">Associar transportadora</h4>
              <button
                className="rounded-md border px-2 py-1 text-sm"
                onClick={() => !assocSaving && setOpenAssoc(false)}
              >
                Fechar
              </button>
            </div>

            <div className="space-y-3">
              <div>
                <label className="text-sm text-slate-600">Buscar</label>
                <input
                  className="mt-1 w-full rounded-md border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-200"
                  placeholder="nome, razÃ£o social ou CNPJâ€¦"
                  value={filtroTransp}
                  onChange={(e) => setFiltroTransp(e.target.value)}
                />
              </div>

              <div>
                <label className="text-sm text-slate-600">Transportadora</label>
                <select
                  className="mt-1 w-full rounded-md border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-200"
                  value={selTransp}
                  onChange={(e) => setSelTransp(e.target.value ? Number(e.target.value) : "")}
                >
                  <option value="">Selecioneâ€¦</option>
                  {opcoesTranspFiltradas.map((t) => (
                    <option key={t.id} value={t.id}>
                      {nomeTransp(t)}
                    </option>
                  ))}
                </select>
                {opcoesTranspFiltradas.length === 0 && (
                  <p className="mt-1 text-xs text-slate-500">Nenhuma transportadora ativa encontrada.</p>
                )}
              </div>

              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  className="h-4 w-4"
                  checked={selPrincipal}
                  onChange={(e) => setSelPrincipal(e.target.checked)}
                />
                <span className="text-sm">Definir como principal</span>
              </label>

              <div className="pt-1">
                <button
                  disabled={!selTransp || assocSaving}
                  onClick={async () => {
                    if (!selTransp) return;
                    setAssocSaving(true);
                    try {
                      await api.post(`/clientes/${cli!.id}/transportadoras`, {
                        transportadora_id: selTransp,
                        principal: selPrincipal,
                      });
                      setOpenAssoc(false);
                      await loadVinculos();
                    } catch (e: any) {
                      alert(e?.response?.data?.message || "Falha ao associar.");
                    } finally {
                      setAssocSaving(false);
                    }
                  }}
                  className="rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 disabled:opacity-50"
                >
                  {assocSaving ? "Salvandoâ€¦" : "Salvar"}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}


----- END frontend\src\components\ClienteDetalhes.tsx -----


----- BEGIN frontend\src\components\ClienteDocumentoForm.tsx -----

import { useEffect, useMemo, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import api from "../services/api";

const onlyDigits = (s: string) => s.replace(/\D+/g, "");

// mÃ¡scaras
const formatCpf = (v: string) => {
  const d = onlyDigits(v).slice(0, 11);
  return d
    .replace(/^(\d{3})(\d)/, "$1.$2")
    .replace(/^(\d{3})\.(\d{3})(\d)/, "$1.$2.$3")
    .replace(/\.(\d{3})(\d)/, ".$1-$2");
};
const formatCnpj = (v: string) => {
  const d = onlyDigits(v).slice(0, 14);
  return d
    .replace(/^(\d{2})(\d)/, "$1.$2")
    .replace(/^(\d{2})\.(\d{3})(\d)/, "$1.$2.$3")
    .replace(/\.(\d{3})(\d)/, ".$1/$2")
    .replace(/(\d{4})(\d)/, "$1-$2");
};

// validaÃ§Ãµes
const validateCPF = (cpf: string) => {
  const s = onlyDigits(cpf);
  if (s.length !== 11 || /^(\d)\1+$/.test(s)) return false;
  let sum = 0, rest = 0;
  for (let i = 1; i <= 9; i++) sum += parseInt(s.substring(i - 1, i)) * (11 - i);
  rest = (sum * 10) % 11; if (rest >= 10) rest = 0;
  if (rest !== parseInt(s.substring(9, 10))) return false;
  sum = 0;
  for (let i = 1; i <= 10; i++) sum += parseInt(s.substring(i - 1, i)) * (12 - i);
  rest = (sum * 10) % 11; if (rest >= 10) rest = 0;
  return rest === parseInt(s.substring(10, 11));
};
const validateCNPJ = (cnpj: string) => {
  const s = onlyDigits(cnpj);
  if (s.length !== 14 || /^(\d)\1+$/.test(s)) return false;
  const calc = (arr: number[]) => {
    let sum = 0;
    const w = arr.length === 12 ? [5,4,3,2,9,8,7,6,5,4,3,2] : [6,5,4,3,2,9,8,7,6,5,4,3,2];
    arr.forEach((v, i) => (sum += v * w[i]));
    const mod = sum % 11;
    return mod < 2 ? 0 : 11 - mod;
  };
  const n = s.split("").map(Number);
  const d1 = calc(n.slice(0, 12));
  const d2 = calc(n.slice(0, 12).concat(d1));
  return d1 === n[12] && d2 === n[13];
};

type Doc = {
  id: number;
  cliente_id: number;
  doc_tipo: "CNPJ" | "CPF";
  doc_numero: string;
  principal: boolean;
  // modelo_nota saiu da UI
  tipo_nota: "MEIA" | "INTEGRAL";
  percentual_nf?: number | null;
};

export default function ClienteDocumentoForm() {
  const { id } = useParams();
  const nav = useNavigate();

  const [docs, setDocs] = useState<Doc[]>([]);
  const [loading, setLoading] = useState(false);

  const [docTipo, setDocTipo] = useState<"CNPJ" | "CPF">("CNPJ");
  const [docNumeroRaw, setDocNumeroRaw] = useState("");
  const [docPrincipal, setDocPrincipal] = useState(true);
  const [percentual, setPercentual] = useState<number>(100);
  const [tipoNota, setTipoNota] = useState<"INTEGRAL" | "MEIA">("INTEGRAL");

  const [savingDoc, setSavingDoc] = useState(false);
  const [errDoc, setErrDoc] = useState<string | null>(null);
  const [okDoc, setOkDoc] = useState<string | null>(null);

  const docNumeroMasked = useMemo(
    () => (docTipo === "CPF" ? formatCpf(docNumeroRaw) : formatCnpj(docNumeroRaw)),
    [docNumeroRaw, docTipo]
  );
  const docNumeroClean = useMemo(() => onlyDigits(docNumeroMasked), [docNumeroMasked]);

  const docInvalido = useMemo(() => {
    if (!docNumeroClean) return true;
    if (docTipo === "CPF") return !validateCPF(docNumeroClean);
    return !validateCNPJ(docNumeroClean);
  }, [docNumeroClean, docTipo]);

  async function load() {
    setLoading(true);
    try {
      const { data } = await api.get(`/clientes/${id}/documentos`);
      setDocs(data?.documentos ?? []);
    } finally {
      setLoading(false);
    }
  }
  useEffect(() => { load(); }, [id]);

  function flash(msg: string, type: "ok" | "err" = "ok") {
    if (type === "ok") { setOkDoc(msg); setTimeout(() => setOkDoc(null), 2500); }
    else { setErrDoc(msg); setTimeout(() => setErrDoc(null), 3500); }
  }

  async function addDoc() {
    setSavingDoc(true);
    setErrDoc(null);
    try {
      await api.post(`/clientes/${id}/documentos`, {
        doc_tipo: docTipo,
        doc_numero: docNumeroClean,
        principal: !!docPrincipal,
        percentual_nf: Math.max(0, Math.min(100, percentual)),
        // modelo_nota removido do payload
        tipo_nota: tipoNota,
      });
      setDocNumeroRaw("");
      setPercentual(100);
      setTipoNota("INTEGRAL");
      setDocPrincipal(true);
      await load();
      flash("Documento adicionado!");
    } catch (e: any) {
      const msg =
        e?.response?.data?.message ||
        (e?.response?.status === 409
          ? "Documento jÃ¡ cadastrado para este cliente"
          : "Falha ao salvar documento.");
      flash(msg, "err");
    } finally {
      setSavingDoc(false);
    }
  }

  async function delDoc(docId: number) {
    if (!confirm("Remover este documento?")) return;
    try {
      await api.delete(`/clientes/${id}/documentos/${docId}`);
      await load();
      flash("Documento removido");
    } catch (e: any) {
      flash(e?.response?.data?.message || "Falha ao remover documento.", "err");
    }
  }

  async function updateField(docId: number, patch: Partial<Doc>, okMsg = "Atualizado") {
    try {
      await api.put(`/clientes/${id}/documentos/${docId}`, patch as any);
      await load();
      flash(okMsg);
    } catch (e: any) {
      flash(e?.response?.data?.message || "Falha ao atualizar.", "err");
    }
  }

  return (
    <div className="space-y-5">
      <div className="flex items-center gap-2">
        <button onClick={() => nav(-1)} className="px-3 py-2 rounded-xl border hover:bg-slate-50">
          â† Voltar
        </button>
        <h1 className="text-xl font-semibold">Documentos do cliente #{id}</h1>
      </div>

      <div className="rounded-2xl border bg-white p-5 space-y-4 shadow-sm">
        <div className="flex items-center justify-between">
          <h2 className="font-medium text-slate-700">Documentos fiscais</h2>
          {okDoc && <span className="text-sm px-2 py-1 rounded bg-emerald-50 text-emerald-700 border border-emerald-200">{okDoc}</span>}
        </div>

        {errDoc && (
          <div className="text-sm text-red-700 bg-red-50 border border-red-200 rounded p-3">
            {errDoc}
          </div>
        )}

        <div className="grid gap-4 md:grid-cols-12">
          <div className="md:col-span-2">
            <label className="text-sm text-slate-600">Tipo</label>
            <select
              className="mt-1 border rounded-xl px-3 py-2 w-full"
              value={docTipo}
              onChange={(e) => setDocTipo((e.target.value as "CNPJ" | "CPF") ?? "CNPJ")}
            >
              <option value="CNPJ">CNPJ</option>
              <option value="CPF">CPF</option>
            </select>
          </div>

          <div className="md:col-span-4">
            <label className="text-sm flex items-center justify-between text-slate-600">
              <span>NÃºmero</span>
              {docNumeroClean && (
                <span
                  className={[
                    "text-xs px-1.5 py-0.5 rounded",
                    docInvalido ? "bg-rose-50 text-rose-700 ring-1 ring-rose-200" : "bg-emerald-50 text-emerald-700 ring-1 ring-emerald-200",
                  ].join(" ")}
                >
                  {docInvalido ? "InvÃ¡lido" : "VÃ¡lido"}
                </span>
              )}
            </label>
            <input
              className={[
                "mt-1 border rounded-xl px-3 py-2 w-full",
                docNumeroClean && docInvalido ? "border-rose-400 ring-rose-200" : "",
              ].join(" ")}
              value={docNumeroMasked}
              onChange={(e) => setDocNumeroRaw(e.target.value)}
              placeholder={docTipo === "CNPJ" ? "00.000.000/0000-00" : "000.000.000-00"}
              inputMode="numeric"
            />
            <p className="text-xs text-slate-500 mt-1">Digite apenas nÃºmeros; a mÃ¡scara Ã© automÃ¡tica.</p>
          </div>

          <div className="md:col-span-2">
            <label className="text-sm text-slate-600">Percentual</label>
            <input
              type="number"
              min={0}
              max={100}
              className="mt-1 border rounded-xl px-3 py-2 w-full"
              value={percentual}
              onChange={(e) => setPercentual(Number(e.target.value))}
              placeholder="0 a 100"
            />
            <p className="text-xs text-slate-500 mt-1">0â€“100%</p>
          </div>

          <div className="md:col-span-2">
            <label className="text-sm text-slate-600">Tipo da nota</label>
            <select
              className="mt-1 border rounded-xl px-3 py-2 w-full"
              value={tipoNota}
              onChange={(e) => setTipoNota((e.target.value as "INTEGRAL" | "MEIA") ?? "INTEGRAL")}
            >
              <option value="INTEGRAL">INTEGRAL</option>
              <option value="MEIA">MEIA</option>
            </select>
            <p className="text-xs text-slate-500 mt-1">CompatÃ­vel com o CHECK do banco.</p>
          </div>

          <label className="md:col-span-12 flex items-center gap-2 pt-1">
            <input
              type="checkbox"
              className="h-4 w-4"
              checked={!!docPrincipal}
              onChange={(e) => setDocPrincipal(e.target.checked)}
            />
            <span className="text-sm">Definir como principal</span>
          </label>
        </div>

        <div className="flex gap-2">
          <button
            onClick={addDoc}
            disabled={savingDoc || !docNumeroClean || docInvalido}
            className="px-4 py-2 rounded-xl bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50"
            title={docInvalido ? "Documento invÃ¡lido" : ""}
          >
            {savingDoc ? "Salvandoâ€¦" : "Adicionar documento"}
          </button>
          <button
            onClick={() => { setDocNumeroRaw(""); setPercentual(100); setTipoNota("INTEGRAL"); setDocPrincipal(true); }}
            className="px-3 py-2 rounded-xl border hover:bg-slate-50"
          >
            Limpar
          </button>
        </div>

        <div className="overflow-x-auto rounded-2xl border">
          <table className="w-full text-sm">
            <thead className="bg-slate-50 sticky top-0 z-10">
              <tr className="text-left">
                <th className="p-2 border w-14">#</th>
                <th className="p-2 border w-20">Tipo</th>
                <th className="p-2 border">NÃºmero</th>
                <th className="p-2 border w-28">Principal</th>
                <th className="p-2 border w-28">Tipo (nota)</th>
                <th className="p-2 border w-40">Percentual</th>
                <th className="p-2 border w-28">AÃ§Ãµes</th>
              </tr>
            </thead>
            <tbody>
              {loading && (
                <tr>
                  <td colSpan={7} className="p-6 text-center text-slate-500">Carregandoâ€¦</td>
                </tr>
              )}

              {!loading && docs.length === 0 && (
                <tr>
                  <td colSpan={7} className="p-10 text-center text-slate-500">
                    Nenhum documento cadastrado. <span className="underline">Adicione o primeiro acima</span>.
                  </td>
                </tr>
              )}

              {!loading && docs.map((d) => (
                <tr key={d.id} className="hover:bg-slate-50">
                  <td className="p-2 border">{d.id}</td>
                  <td className="p-2 border">{d.doc_tipo}</td>
                  <td className="p-2 border">
                    {d.doc_tipo === "CPF" ? formatCpf(d.doc_numero) : formatCnpj(d.doc_numero)}
                  </td>

                  {/* principal */}
                  <td className="p-2 border">
                    <label className="inline-flex items-center gap-2">
                      <input
                        type="radio"
                        name={`principal-${d.id}`}
                        checked={d.principal}
                        onChange={() => updateField(d.id, { principal: true }, "Definido como principal")}
                      />
                      <span>{d.principal ? "Sim" : "NÃ£o"}</span>
                    </label>
                  </td>

                  {/* tipo_nota (inline) */}
                  <td className="p-2 border">
                    <select
                      className="border rounded-lg px-2 py-1"
                      defaultValue={d.tipo_nota || "INTEGRAL"}
                      onBlur={(e) => {
                        const v = (e.currentTarget.value as "INTEGRAL" | "MEIA");
                        if (v !== (d.tipo_nota || "INTEGRAL")) updateField(d.id, { tipo_nota: v });
                      }}
                    >
                      <option value="INTEGRAL">INTEGRAL</option>
                      <option value="MEIA">MEIA</option>
                    </select>
                  </td>

                  {/* percentual (inline) */}
                  <td className="p-2 border">
                    <div className="flex items-center gap-1">
                      <input
                        type="number"
                        min={0}
                        max={100}
                        className="border rounded-lg px-2 py-1 w-24"
                        defaultValue={d.percentual_nf ?? 100}
                        onBlur={(e) => {
                          const val = Math.max(0, Math.min(100, Number(e.currentTarget.value)));
                          if (val !== (d.percentual_nf ?? 100)) updateField(d.id, { percentual_nf: val });
                        }}
                        title="Edite e saia do campo para salvar"
                      />
                      <span>%</span>
                    </div>
                  </td>

                  <td className="p-2 border">
                    <button onClick={() => delDoc(d.id)} className="text-red-700 hover:underline">
                      Remover
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}


----- END frontend\src\components\ClienteDocumentoForm.tsx -----


----- BEGIN frontend\src\components\ClienteForm.tsx -----

import { useCallback, useEffect, useMemo, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import api from "../services/api";

/* ===================== Tipos ===================== */
type ClientePayload = {
  nome_fantasia: string;
  tabela_preco: string;
  grupo_empresa?: string | null;
  whatsapp?: string | null;
  anotacoes?: string | null;
  status?: "ATIVO" | "INATIVO";
  recebe_whatsapp?: boolean;
  transportadora_id?: number | null;
};

type Transportadora = {
  id: number;
  nome?: string;
  nome_fantasia?: string;
  razao_social?: string;
};

const onlyDigits = (s: string) => s.replace(/\D/g, "");

/* ===================== Componente ===================== */
export default function ClienteForm() {
  const { id } = useParams();
  const nav = useNavigate();
  const editing = Boolean(id);

  const [form, setForm] = useState<ClientePayload>({
    nome_fantasia: "",
    tabela_preco: "",
    status: "ATIVO",
    recebe_whatsapp: false,
    transportadora_id: null,
  });

  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string | null>(null);
  const [ok, setOk] = useState(false);

  const [tabelas, setTabelas] = useState<string[]>([]);
  const [transportadoras, setTransportadoras] = useState<Transportadora[]>([]);

  const titulo = useMemo(
    () => (editing ? `Editar cliente #${id}` : "Novo cliente"),
    [editing, id]
  );

  /* ===================== Combos dinÃ¢micos ===================== */
  useEffect(() => {
    let cancel = false;
    (async () => {
      try {
        // tabelas de preÃ§o
        try {
          const { data } = await api.get("/tabelas-preco", { headers: { "x-silent": "1" } });
          if (!cancel) setTabelas((data?.data ?? data ?? []) as string[]);
        } catch {
          const { data } = await api.get("/clientes/tabelas-preco", { headers: { "x-silent": "1" } });
          if (!cancel) setTabelas((data?.data ?? data ?? []) as string[]);
        }
        // transportadoras (ativas)
        try {
          const { data } = await api.get("/transportadoras", {
            params: { status: "ATIVO", limit: 999 },
            headers: { "x-silent": "1" },
          });
          if (!cancel) setTransportadoras(data?.data ?? data ?? []);
        } catch {/* ignore */}
      } catch {/* ignore */}
    })();
    return () => { cancel = true; };
  }, []);

  /* ===================== Carregar para ediÃ§Ã£o ===================== */
  async function load() {
    if (!editing) return;
    setLoading(true);
    setErr(null);
    try {
      const { data } = await api.get(`/clientes/${id}`);
      setForm({
        nome_fantasia: data.nome_fantasia ?? "",
        tabela_preco: data.tabela_preco ?? "",
        grupo_empresa: data.grupo_empresa ?? null,
        whatsapp: data.whatsapp ?? null,
        anotacoes: data.anotacoes ?? null,
        status: data.status ?? "ATIVO",
        recebe_whatsapp: Boolean(data.recebe_whatsapp),
        transportadora_id: data.transportadora_id ?? null,
      });
    } catch (e: any) {
      setErr(e?.response?.data?.message || "Falha ao carregar o cliente.");
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    load();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [id]);

  /* ===================== Salvar ===================== */
  const onSubmit = useCallback(
    async (e: React.FormEvent) => {
      e.preventDefault();
      if (loading) return;

      const nome = form.nome_fantasia?.trim();
      if (!nome) {
        setErr("Informe o nome fantasia.");
        return;
      }

      setLoading(true);
      setErr(null);
      setOk(false);

      const payload: ClientePayload = {
        ...form,
        nome_fantasia: nome,
        tabela_preco: form.tabela_preco?.trim() || "",
        whatsapp: form.whatsapp && onlyDigits(form.whatsapp) ? onlyDigits(form.whatsapp) : null,
        transportadora_id: form.transportadora_id || null,
      };

      try {
        if (editing) {
          await api.put(`/clientes/${id}`, payload);
          setOk(true);
          setTimeout(() => nav(-1), 400);
        } else {
          try {
            const r = await api.post("/clientes", payload);
            const newId = r.data?.id ?? r.data?.data?.id;
            setOk(true);
            setTimeout(() => {
              if (newId) nav(`/clientes/${newId}`);
              else nav(-1);
            }, 400);
          } catch (err: any) {
            // conflito por nome duplicado
            if (err?.response?.status === 409) {
              const exId = err.response.data?.existing_id;
              const confirma = confirm("JÃ¡ existe um cliente com este nome.\nDeseja criar mesmo assim?");
              if (confirma) {
                const r2 = await api.post("/clientes?allowDuplicate=1", payload);
                const newId = r2.data?.id ?? r2.data?.data?.id;
                setOk(true);
                setTimeout(() => {
                  if (newId) nav(`/clientes/${newId}`); else nav(-1);
                }, 400);
                return;
              }
              if (exId) { nav(`/clientes/${exId}`); return; }
              setErr(err.response.data?.message || "Nome jÃ¡ existente.");
              return;
            }
            throw err;
          }
        }
      } catch (e: any) {
        setErr(e?.response?.data?.message || "Falha ao salvar o cliente.");
      } finally {
        setLoading(false);
      }
    },
    [editing, form, id, nav, loading]
  );

  const nomeTransportadora = (t?: Transportadora | null) =>
    (t?.nome_fantasia || t?.razao_social || t?.nome || "").trim();

  /* ===================== UI ===================== */
  return (
    <div className="mx-auto max-w-6xl space-y-6">
      {/* HERO */}
      <section className="rounded-3xl bg-gradient-to-r from-slate-900 via-slate-800 to-slate-700 text-white p-6 shadow">
        <div className="flex flex-wrap items-end justify-between gap-3">
          <div>
            <h1 className="text-2xl font-semibold">{titulo}</h1>
            <p className="text-slate-300">
              Preencha os dados do cliente. Campos com <span className="text-rose-300">*</span> sÃ£o obrigatÃ³rios.
            </p>
          </div>
          <button
            type="button"
            onClick={() => nav(-1)}
            className="rounded-xl bg-white/10 px-4 py-2 text-white ring-1 ring-white/30 hover:bg-white/20"
          >
            â† Voltar
          </button>
        </div>
      </section>

      {/* FORM */}
      <form
        onSubmit={onSubmit}
        onKeyDown={(e) => {
          if ((e.ctrlKey || e.metaKey) && e.key === "Enter") onSubmit(e as any);
        }}
        className="rounded-2xl border bg-white shadow-sm"
      >
        {(err || ok) && (
          <div className="p-4 border-b">
            {err && (
              <div className="text-sm text-rose-700 bg-rose-50 border border-rose-200 rounded-xl p-3">
                {err}
              </div>
            )}
            {ok && (
              <div className="text-sm text-emerald-700 bg-emerald-50 border border-emerald-200 rounded-xl p-3">
                Cliente salvo com sucesso!
              </div>
            )}
          </div>
        )}

        <div className="grid grid-cols-1 gap-6 p-5 lg:grid-cols-12">
          {/* COL ESQUERDA */}
          <div className="lg:col-span-8 space-y-6">
            {/* IdentificaÃ§Ã£o */}
            <section className="rounded-xl border p-4">
              <h2 className="mb-3 text-base font-semibold text-slate-800">IdentificaÃ§Ã£o</h2>
              <div className="grid gap-4 sm:grid-cols-2">
                <div>
                  <label className="text-sm text-slate-600">
                    Nome fantasia <span className="text-rose-600">*</span>
                  </label>
                  <input
                    className="mt-1 w-full rounded-xl border px-3 py-2 outline-none focus:ring-2 focus:ring-blue-200"
                    required
                    value={form.nome_fantasia}
                    onChange={(e) => setForm((s) => ({ ...s, nome_fantasia: e.target.value }))}
                    autoFocus
                    placeholder="ex.: DepÃ³sito JL"
                  />
                </div>
                <div>
                  <label className="text-sm text-slate-600">Grupo empresa</label>
                  <input
                    className="mt-1 w-full rounded-xl border px-3 py-2 outline-none focus:ring-2 focus:ring-blue-200"
                    value={form.grupo_empresa ?? ""}
                    onChange={(e) => setForm((s) => ({ ...s, grupo_empresa: e.target.value || null }))}
                    placeholder="ex.: Grupo XPTO"
                  />
                </div>
              </div>
            </section>

            {/* Contato */}
            <section className="rounded-xl border p-4">
              <h2 className="mb-3 text-base font-semibold text-slate-800">Contato</h2>
              <div className="grid gap-4 sm:grid-cols-2">
                <div>
                  <label className="text-sm text-slate-600">WhatsApp</label>
                  <input
                    className="mt-1 w-full rounded-xl border px-3 py-2 outline-none focus:ring-2 focus:ring-blue-200"
                    value={form.whatsapp ?? ""}
                    onChange={(e) => setForm((s) => ({ ...s, whatsapp: e.target.value || null }))}
                    inputMode="tel"
                    placeholder="(00) 90000-0000"
                  />
                  <p className="mt-1 text-xs text-slate-500">
                    Pode digitar com pontos/traÃ§os; a limpeza Ã© feita ao salvar.
                  </p>
                </div>
              </div>
            </section>

            {/* AnotaÃ§Ãµes */}
            <section className="rounded-xl border p-4">
              <h2 className="mb-3 text-base font-semibold text-slate-800">AnotaÃ§Ãµes</h2>
              <textarea
                className="mt-1 min-h-[140px] w-full rounded-xl border px-3 py-2 outline-none focus:ring-2 focus:ring-blue-200"
                value={form.anotacoes ?? ""}
                onChange={(e) => setForm((s) => ({ ...s, anotacoes: e.target.value || null }))}
                placeholder="ObservaÃ§Ãµes gerais, preferÃªncias, restriÃ§Ãµesâ€¦"
              />
            </section>
          </div>

          {/* COL DIREITA */}
          <div className="lg:col-span-4 space-y-6">
            {/* Comercial */}
            <section className="rounded-xl border p-4">
              <h2 className="mb-3 text-base font-semibold text-slate-800">Comercial</h2>
              <div className="grid gap-4">
                {/* Tabela de preÃ§o (dinÃ¢mica; fallback input) */}
                <div>
                  <label className="text-sm text-slate-600">
                    Tabela de preÃ§o <span className="text-rose-600">*</span>
                  </label>
                  {tabelas.length > 0 ? (
                    <select
                      className="mt-1 w-full rounded-xl border px-3 py-2 outline-none focus:ring-2 focus:ring-blue-200"
                      value={form.tabela_preco}
                      onChange={(e) => setForm((s) => ({ ...s, tabela_preco: e.target.value }))}
                      required
                    >
                      <option value="" disabled>
                        (selecione)
                      </option>
                      {tabelas.map((t) => (
                        <option key={t} value={t}>
                          {t}
                        </option>
                      ))}
                    </select>
                  ) : (
                    <input
                      className="mt-1 w-full rounded-xl border px-3 py-2 outline-none focus:ring-2 focus:ring-blue-200"
                      value={form.tabela_preco}
                      onChange={(e) => setForm((s) => ({ ...s, tabela_preco: e.target.value }))}
                      placeholder="ex.: ESPECIAL"
                      required
                    />
                  )}
                </div>

                {/* Transportadora associada */}
                <div>
                  <label className="text-sm text-slate-600">Transportadora (associada ao cliente)</label>
                  {transportadoras.length > 0 ? (
                    <select
                      className="mt-1 w-full rounded-xl border px-3 py-2 outline-none focus:ring-2 focus:ring-blue-200"
                      value={form.transportadora_id ?? ""}
                      onChange={(e) =>
                        setForm((s) => ({
                          ...s,
                          transportadora_id: e.target.value ? Number(e.target.value) : null,
                        }))
                      }
                    >
                      <option value="">(nenhuma)</option>
                      {transportadoras.map((t) => (
                        <option key={t.id} value={t.id}>
                          {nomeTransportadora(t)}
                        </option>
                      ))}
                    </select>
                  ) : (
                    <div className="mt-1 text-xs text-slate-500">Nenhuma transportadora disponÃ­vel.</div>
                  )}
                </div>

                {/* Status */}
                <div>
                  <label className="text-sm text-slate-600">Status</label>
                  <select
                    className="mt-1 w-full rounded-xl border px-3 py-2 outline-none focus:ring-2 focus:ring-blue-200"
                    value={form.status ?? "ATIVO"}
                    onChange={(e) =>
                      setForm((s) => ({ ...s, status: (e.target.value as "ATIVO" | "INATIVO") ?? "ATIVO" }))
                    }
                  >
                    <option value="ATIVO">ATIVO</option>
                    <option value="INATIVO">INATIVO</option>
                  </select>
                </div>

                {/* NotificaÃ§Ã£o por WhatsApp */}
                <label className="inline-flex items-center gap-2 rounded-lg bg-slate-50 px-3 py-2 ring-1 ring-slate-200">
                  <input
                    id="recebe_wpp"
                    type="checkbox"
                    className="h-4 w-4 rounded border-slate-300"
                    checked={!!form.recebe_whatsapp}
                    onChange={(e) => setForm((s) => ({ ...s, recebe_whatsapp: e.target.checked }))}
                  />
                  <span className="text-sm text-slate-700">Recebe avisos por WhatsApp</span>
                </label>
              </div>
            </section>

            {/* AÃ§Ãµes */}
            <section className="rounded-xl border p-4">
              <div className="flex flex-col gap-2">
                <button
                  type="submit"
                  disabled={loading}
                  className="rounded-xl bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 disabled:opacity-50"
                  title="Ctrl+Enter para salvar"
                >
                  {loading ? "Salvando..." : "Salvar"}
                </button>
                <button
                  type="button"
                  onClick={() => nav(-1)}
                  className="rounded-xl bg-slate-100 px-4 py-2 hover:bg-slate-200"
                >
                  Cancelar
                </button>
              </div>
              {!editing && (
                <p className="mt-3 text-xs text-slate-500">
                  Dica: apÃ³s salvar, vocÃª poderÃ¡ incluir documentos e links do cliente.
                </p>
              )}
            </section>
          </div>
        </div>
      </form>
    </div>
  );
}


----- END frontend\src\components\ClienteForm.tsx -----


----- BEGIN frontend\src\components\Clientes.tsx -----

import { useEffect, useLayoutEffect, useMemo, useRef, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { createPortal } from "react-dom";
import api from "../services/api";

/* ===================== Tipos ===================== */
type Cliente = {
  id: number;
  nome_fantasia: string;
  tabela_preco?: string | null;
  status?: "ATIVO" | "INATIVO";
  ativo?: boolean;
  whatsapp?: string | null;
};

/* ===================== Helpers visuais ===================== */
const NAME_COLORS = [
  "bg-sky-100 text-sky-700 ring-sky-200",
  "bg-violet-100 text-violet-700 ring-violet-200",
  "bg-emerald-100 text-emerald-700 ring-emerald-200",
  "bg-amber-100 text-amber-700 ring-amber-200",
  "bg-rose-100 text-rose-700 ring-rose-200",
  "bg-indigo-100 text-indigo-700 ring-indigo-200",
  "bg-teal-100 text-teal-700 ring-teal-200",
];

function initials(name: string) {
  const parts = (name || "").trim().split(/\s+/).slice(0, 2);
  return parts.map((p) => p[0]?.toUpperCase() || "").join("");
}
function colorFor(id: number) {
  const idx = Math.abs(Number(id || 0)) % NAME_COLORS.length;
  return NAME_COLORS[idx];
}
function waLink(raw?: string | null) {
  if (!raw) return null;
  const phone = raw.replace(/\D/g, "");
  return phone ? `https://wa.me/${phone}` : null;
}

const PAGE_SIZE = 10;

/* =========================================================
   PÃ¡gina
   ========================================================= */
export default function Clientes() {
  const nav = useNavigate();

  const [search, setSearch] = useState("");
  const [status, setStatus] = useState<"" | "ATIVO" | "INATIVO">("");
  const [tabela, setTabela] = useState<string>("");

  const [rows, setRows] = useState<Cliente[]>([]);
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  const [page, setPage] = useState(1);
  const [total, setTotal] = useState(0);

  const [openMenuId, setOpenMenuId] = useState<number | null>(null);
  const [tabelas, setTabelas] = useState<string[]>([]);

  const debounceMs = 400;
  const timerRef = useRef<number | null>(null);
  const debounced = useMemo(() => search.trim(), [search]);

  /* Combos tabela */
  useEffect(() => {
    let cancel = false;
    (async () => {
      try {
        try {
          const { data } = await api.get("/tabelas-preco", { headers: { "x-silent": "1" } });
          if (!cancel) setTabelas((data?.data ?? data ?? []) as string[]);
        } catch {
          const { data } = await api.get("/clientes/tabelas-preco", { headers: { "x-silent": "1" } });
          if (!cancel) setTabelas((data?.data ?? data ?? []) as string[]);
        }
      } catch {
        /* ignore */
      }
    })();
    return () => {
      cancel = true;
    };
  }, []);

  async function load(p = page) {
    setLoading(true);
    setErr(null);
    try {
      const { data } = await api.get("/clientes", {
        params: {
          page: p,
          limit: PAGE_SIZE,
          search: debounced || undefined,
          status: status || undefined,
          tabela_preco: tabela || undefined,
        },
      });

      const list: Cliente[] = data?.data ?? [];
      list.sort((a, b) => (a.nome_fantasia || "").localeCompare(b.nome_fantasia || "", "pt-BR"));

      setRows(list);
      setTotal(Number(data?.total ?? list.length));
      setPage(Number(data?.page ?? p));
      setOpenMenuId(null);
    } catch (e: any) {
      setErr(e?.response?.data?.message || "Falha ao carregar clientes.");
      setRows([]);
    } finally {
      setLoading(false);
    }
  }

  /* Debounce de filtros */
  useEffect(() => {
    if (timerRef.current) window.clearTimeout(timerRef.current);
    timerRef.current = window.setTimeout(() => load(1), debounceMs);
    return () => {
      if (timerRef.current) window.clearTimeout(timerRef.current);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [debounced, status, tabela]);

  async function toggleStatus(c: Cliente) {
    const ativoAtual = (c as any).ativo === true || c.status === "ATIVO";
    const novoStatus = ativoAtual ? "INATIVO" : "ATIVO";
    try {
      await api.put(`/clientes/${c.id}`, { status: novoStatus });
      await load();
    } catch (e: any) {
      alert(e?.response?.data?.message || "Falha ao atualizar status.");
    }
  }

  async function excluir(c: Cliente) {
    if (!confirm(`Excluir o cliente "${c.nome_fantasia}"?\nEsta aÃ§Ã£o nÃ£o pode ser desfeita.`)) return;
    try {
      await api.delete(`/clientes/${c.id}`);
      await load();
    } catch (e: any) {
      alert(e?.response?.data?.message || "Falha ao excluir.");
    }
  }

  const totalPages = Math.max(1, Math.ceil(total / PAGE_SIZE));
  const canPrev = page > 1;
  const canNext = page < totalPages;

  /* Fecha menu ao rolar/redimensionar */
  useEffect(() => {
    const close = () => setOpenMenuId(null);
    window.addEventListener("scroll", close, true);
    window.addEventListener("resize", close);
    return () => {
      window.removeEventListener("scroll", close, true);
      window.removeEventListener("resize", close);
    };
  }, []);

  return (
    <div className="space-y-6">
      {/* Header */}
      <section className="rounded-3xl bg-gradient-to-r from-slate-900 via-slate-800 to-slate-700 text-white p-6 shadow">
        <div className="flex flex-wrap items-end justify-between gap-3">
          <div>
            <h1 className="text-2xl font-semibold">Clientes</h1>
            <p className="text-slate-300">Gerencie cadastro e acesse rapidamente os blocos.</p>
          </div>
          <button
            onClick={() => nav("/clientes/novo")}
            className="rounded-xl bg-white/10 px-4 py-2 text-white ring-1 ring-white/30 hover:bg-white/20"
          >
            Novo cliente
          </button>
        </div>
      </section>

      {/* Filtros */}
      <section className="rounded-2xl border bg-white p-4 shadow-sm">
        <div className="grid gap-4 md:grid-cols-4 items-end">
          <div className="md:col-span-2">
            <label className="text-xs font-semibold text-slate-600">Buscar</label>
            <div className="mt-1 flex gap-2">
              <div className="relative w-full">
                <input
                  className="peer w-full rounded-xl border px-3 py-2 pl-9 outline-none focus:ring-2 focus:ring-blue-200"
                  placeholder="Nome, WhatsAppâ€¦"
                  value={search}
                  onChange={(e) => setSearch(e.target.value)}
                />
                <span className="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 text-slate-400 peer-focus:text-blue-500">
                  ðŸ”Ž
                </span>
              </div>
              {search && (
                <button
                  type="button"
                  className="rounded-xl border px-3 py-2 hover:bg-slate-50"
                  onClick={() => setSearch("")}
                  title="Limpar"
                >
                  Limpar
                </button>
              )}
            </div>
          </div>

          <div>
            <label className="text-xs font-semibold text-slate-600">Status</label>
            <select
              className="mt-1 w-full rounded-xl border px-3 py-2 outline-none focus:ring-2 focus:ring-blue-200"
              value={status}
              onChange={(e) => setStatus((e.target.value as any) || "")}
            >
              <option value="">(todos)</option>
              <option value="ATIVO">ATIVO</option>
              <option value="INATIVO">INATIVO</option>
            </select>
          </div>

          <div>
            <label className="text-xs font-semibold text-slate-600">Tabela de preÃ§o</label>
            <select
              className="mt-1 w-full rounded-xl border px-3 py-2 outline-none focus:ring-2 focus:ring-blue-200"
              value={tabela}
              onChange={(e) => setTabela(e.target.value)}
            >
              <option value="">(todas)</option>
              {tabelas.map((t) => (
                <option key={t} value={t}>
                  {t}
                </option>
              ))}
            </select>
          </div>
        </div>
      </section>

      {/* CabeÃ§alho das colunas (desktop) */}
      <div className="hidden md:grid grid-cols-[minmax(0,1fr)_180px_140px_72px] items-center px-4 py-2 text-xs font-semibold text-slate-600 bg-slate-50 rounded-t-2xl border border-b-0">
        <div>Cliente</div>
        <div>Tabela</div>
        <div>Status</div>
        <div className="text-center">AÃ§Ãµes</div>
      </div>

      {/* Lista com divisÃ³rias visÃ­veis */}
      <section className="rounded-b-2xl md:rounded-t-none border bg-white shadow-sm overflow-hidden">
        <ul className="divide-y divide-slate-200" role="list">
          {/* Loading skeleton */}
          {loading &&
            Array.from({ length: 6 }).map((_, i) => (
              <li key={`sk-${i}`} className="px-4 py-3">
                <div className="grid md:grid-cols-[minmax(0,1fr)_180px_140px_72px] items-start gap-3">
                  <div className="flex items-start gap-3">
                    <div className="h-9 w-9 rounded-full bg-slate-100 animate-pulse" />
                    <div className="space-y-1">
                      <div className="h-4 w-52 rounded bg-slate-100 animate-pulse" />
                      <div className="h-3 w-32 rounded bg-slate-100 animate-pulse" />
                    </div>
                  </div>
                  <div className="h-5 w-20 rounded-full bg-slate-100 animate-pulse" />
                  <div className="h-5 w-16 rounded-full bg-slate-100 animate-pulse" />
                  <div className="mx-auto h-8 w-8 rounded bg-slate-100 animate-pulse" />
                </div>
              </li>
            ))}

          {/* Empty / erro */}
          {!loading && rows.length === 0 && (
            <li className="px-4 py-8 text-center">
              {err ? (
                <div className="inline-block rounded-xl border border-rose-200 bg-rose-50 px-3 py-2 text-rose-700">
                  {err}
                </div>
              ) : (
                <div className="text-slate-500">
                  Nada encontrado. Ajuste os filtros ou{" "}
                  <button onClick={() => nav("/clientes/novo")} className="text-blue-700 underline">
                    crie um cliente
                  </button>
                  .
                </div>
              )}
            </li>
          )}

          {/* Itens */}
          {!loading &&
            rows.map((c, idx) => (
              <RowItem
                key={c.id}
                c={c}
                isOpen={openMenuId === c.id}
                onOpen={() => setOpenMenuId(c.id)}
                onClose={() => setOpenMenuId(null)}
                onToggle={() => toggleStatus(c)}
                onExcluir={() => excluir(c)}
              />
            ))}
        </ul>
      </section>

      {/* PaginaÃ§Ã£o */}
      <section className="flex flex-wrap items-center justify-between gap-3 text-sm">
        <div className="text-slate-600">
          Mostrando <b>{rows.length}</b> de <b>{total}</b>
        </div>
        <div className="flex items-center gap-2">
          <button
            type="button"
            disabled={!canPrev}
            onClick={() => canPrev && load(page - 1)}
            className="rounded-xl border px-3 py-1 hover:bg-slate-50 disabled:opacity-50"
          >
            â€¹ Anterior
          </button>
          <div className="px-2 py-1">PÃ¡gina <b>{page}</b> / {totalPages}</div>
          <button
            type="button"
            disabled={!canNext}
            onClick={() => canNext && load(page + 1)}
            className="rounded-xl border px-3 py-1 hover:bg-slate-50 disabled:opacity-50"
          >
            PrÃ³xima â€º
          </button>
        </div>
      </section>
    </div>
  );
}

/* =========================================================
   Item da lista
   ========================================================= */
function RowItem({
  c,
  isOpen,
  onOpen,
  onClose,
  onToggle,
  onExcluir,
}: {
  c: Cliente;
  isOpen: boolean;
  onOpen: () => void;
  onClose: () => void;
  onToggle: () => void;
  onExcluir: () => void;
}) {
  const btnRef = useRef<HTMLButtonElement>(null);
  const ativo = (c as any).ativo === true || c.status === "ATIVO";
  const wa = waLink(c.whatsapp);

  return (
    <li className="px-4 py-3 hover:bg-slate-50 transition-colors">
      <div className="grid md:grid-cols-[minmax(0,1fr)_180px_140px_72px] items-start gap-3">
        {/* Cliente */}
        <div className="flex items-start gap-3 min-w-0">
          <div
            className={[
              "mt-0.5 grid h-9 w-9 shrink-0 place-items-center rounded-full text-[11px] font-semibold ring-2",
              colorFor(c.id),
            ].join(" ")}
            title={c.nome_fantasia}
            aria-hidden
          >
            {initials(c.nome_fantasia)}
          </div>

          <div className="min-w-0">
            <Link
              to={`/clientes/${c.id}`}
              className="block truncate font-semibold text-slate-800 hover:text-blue-700"
              title={c.nome_fantasia}
            >
              {c.nome_fantasia}
            </Link>

            <div className="mt-0.5 flex flex-wrap items-center gap-2 text-xs">
              {wa ? (
                <a
                  href={wa}
                  target="_blank"
                  rel="noreferrer"
                  className="inline-flex items-center gap-1 text-blue-700 hover:underline"
                  title="Abrir WhatsApp"
                >
                  <svg viewBox="0 0 24 24" className="h-3.5 w-3.5" fill="currentColor" aria-hidden>
                    <path d="M20.52 3.48A11 11 0 0 0 3.3 18.56L2 22l3.56-1.26A11 11 0 1 0 20.52 3.48Zm-8.1 16.06a9.1 9.1 0 0 1-4.64-1.27l-.33-.2-2.06.73.71-2.01-.22-.34a9.08 9.08 0 1 1 6.54 3.09ZM17 14.3c-.1-.15-.39-.24-.82-.43s-.51-.16-.73.13-.28.41-.52.37a6.2 6.2 0 0 1-2.93-1.8 3.38 3.38 0 0 1-.73-1.25c-.08-.25 0-.38.29-.64s.33-.39.49-.65.08-.46 0-.65c-.14-.24-.73-1.77-1-2.42s-.56-.56-.77-.57h-.65a1.25 1.25 0 0 0-.9.42 3.79 3.79 0 0 0-1.2 2.82 6.6 6.6 0 0 0 1.38 3.46 7.58 7.58 0 0 0 3.4 2.77 7.54 7.54 0 0 0 3.6.83c.37 0 .74-.06 1.1-.11a2.54 2.54 0 0 0 1.72-1.18 2.1 2.1 0 0 0 .15-1.15Z" />
                  </svg>
                  {c.whatsapp}
                </a>
              ) : (
                <span className="text-slate-400">sem WhatsApp</span>
              )}
            </div>
          </div>
        </div>

        {/* Tabela */}
        <div className="md:justify-self-start">
          {c.tabela_preco ? (
            <span className="inline-flex items-center rounded-full bg-slate-100 px-2.5 py-1 text-[11px] font-medium text-slate-700 ring-1 ring-slate-200">
              {c.tabela_preco}
            </span>
          ) : (
            <span className="text-slate-400">â€”</span>
          )}
        </div>

        {/* Status */}
        <div>
          <span
            className={[
              "inline-flex items-center gap-1 rounded-full px-2.5 py-1 text-[11px] font-semibold ring-1",
              ativo
                ? "bg-emerald-50 text-emerald-700 ring-emerald-200"
                : "bg-rose-50 text-rose-700 ring-rose-200",
            ].join(" ")}
          >
            <span className="h-1.5 w-1.5 rounded-full bg-current" />
            {ativo ? "ATIVO" : "INATIVO"}
          </span>
        </div>

        {/* AÃ§Ãµes */}
        <div className="text-center md:justify-self-center">
          <button
            ref={btnRef}
            type="button"
            onClick={(e) => {
              e.stopPropagation();
              isOpen ? onClose() : onOpen();
            }}
            className="inline-flex h-8 w-8 items-center justify-center rounded-lg text-slate-600 hover:bg-slate-100 hover:text-slate-900 transition"
            aria-haspopup="menu"
            aria-expanded={isOpen}
            title="AÃ§Ãµes"
          >
            â‹®
          </button>

          {isOpen && (
            <MenuPortal anchorRef={btnRef} onClose={onClose}>
              <MenuItem asLink to={`/clientes/${c.id}`} onClick={onClose} icon="â†—">
                Abrir
              </MenuItem>
              <MenuItem asLink to={`/clientes/${c.id}/editar`} onClick={onClose} icon="âœï¸">
                Editar
              </MenuItem>
              <MenuItem onClick={() => { onClose(); onToggle(); }} icon={(c as any).ativo || c.status === "ATIVO" ? "â¸ï¸" : "â–¶ï¸"} tone="amber">
                {(c as any).ativo || c.status === "ATIVO" ? "Inativar" : "Reativar"}
              </MenuItem>
              <MenuItem onClick={() => { onClose(); onExcluir(); }} icon="ðŸ—‘ï¸" tone="red">
                Excluir
              </MenuItem>
              <MenuItem asLink to={`/blocos?cliente_id=${c.id}`} onClick={onClose} icon="ðŸ§©" tone="emerald">
                Blocos
              </MenuItem>
            </MenuPortal>
          )}
        </div>
      </div>
    </li>
  );
}

/* =========================================================
   Menu / Portal
   ========================================================= */
function MenuPortal({
  anchorRef,
  children,
  onClose,
}: {
  anchorRef: React.RefObject<HTMLElement | null>;
  children: React.ReactNode;
  onClose: () => void;
}) {
  const menuRef = useRef<HTMLDivElement>(null);
  const [pos, setPos] = useState<{ top: number; left: number; openUp: boolean }>({
    top: 0,
    left: 0,
    openUp: false,
  });

  useLayoutEffect(() => {
    const el = anchorRef.current;
    const menuEl = menuRef.current;
    if (!el || !menuEl) return;

    // medir
    const r = el.getBoundingClientRect();
    menuEl.style.visibility = "hidden";
    menuEl.style.display = "block";
    const mh = menuEl.offsetHeight || 200;
    const mw = menuEl.offsetWidth || 192;
    menuEl.style.visibility = "";
    menuEl.style.display = "";

    const spaceBelow = window.innerHeight - r.bottom;
    const openUp = spaceBelow < mh && r.top > spaceBelow;

    const top = (openUp ? r.top - mh : r.bottom) + window.scrollY + 6;
    const left = r.right - mw + window.scrollX;

    setPos({ top, left, openUp });
  }, [anchorRef]);

  useEffect(() => {
    function onDocClick(e: MouseEvent) {
      const target = e.target as Node;
      if (
        menuRef.current &&
        !menuRef.current.contains(target) &&
        anchorRef.current &&
        !anchorRef.current.contains(target)
      ) {
        onClose();
      }
    }
    document.addEventListener("mousedown", onDocClick);
    return () => document.removeEventListener("mousedown", onDocClick);
  }, [onClose, anchorRef]);

  return createPortal(
    <div
      ref={menuRef}
      role="menu"
      className="z-50 w-48 rounded-xl border bg-white/95 shadow-xl backdrop-blur p-1"
      style={{ position: "absolute", top: pos.top, left: pos.left }}
    >
      {children}
    </div>,
    document.body
  );
}

/* MenuItem genÃ©rico com Ã­cone e variaÃ§Ãµes de cor */
function MenuItem(props: {
  asLink?: boolean;
  to?: string;
  onClick?: () => void;
  icon?: string;
  tone?: "red" | "amber" | "emerald" | "default";
  children: React.ReactNode;
}) {
  const { asLink, to = "#", onClick, icon, tone = "default", children } = props;

  const toneCls =
    tone === "red"
      ? "text-rose-700 hover:bg-rose-50"
      : tone === "amber"
      ? "text-amber-700 hover:bg-amber-50"
      : tone === "emerald"
      ? "text-emerald-700 hover:bg-emerald-50"
      : "text-slate-700 hover:bg-slate-50";

  const content = (
    <div className={`flex items-center gap-2 rounded-lg px-3 py-2 ${toneCls}`}>
      {icon && <span className="text-base leading-none">{icon}</span>}
      <span className="text-sm">{children}</span>
    </div>
  );

  if (asLink) {
    return (
      <Link to={to} onClick={onClick} className="block">
        {content}
      </Link>
    );
  }
  return (
    <button type="button" onClick={onClick} className="block w-full text-left">
      {content}
    </button>
  );
}


----- END frontend\src\components\Clientes.tsx -----


----- BEGIN frontend\src\components\DominioForm.tsx -----

// src/components/DominioForm.tsx
import { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import api from "../services/api";

export default function DominioForm() {
  const nav = useNavigate();
  const { id } = useParams();
  const editing = Boolean(id);

  const [chave, setChave] = useState("");
  const [nome, setNome] = useState("");
  const [ativo, setAtivo] = useState(true);

  const [saving, setSaving] = useState(false);
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string | null>(null);
  const [ok, setOk] = useState(false);

  const slugify = (input: string) =>
    input
      .toLowerCase()
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .replace(/[^a-z0-9]+/g, "_")
      .replace(/^_+|_+$/g, "");

  useEffect(() => {
    if (!editing) return;
    (async () => {
      try {
        setLoading(true);
        setErr(null);
        const { data } = await api.get(`/dominios/${id}`);
        setChave(data.chave ?? "");
        setNome(data.nome ?? "");
        setAtivo(Boolean(data.ativo));
      } catch (e: any) {
        setErr(e?.response?.data?.message || "Falha ao carregar domÃ­nio.");
      } finally {
        setLoading(false);
      }
    })();
  }, [editing, id]);

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    setErr(null);
    setOk(false);

    const body = {
      chave: (chave || slugify(nome)).trim(),
      nome: nome.trim(),
      ativo,
    };

    if (!body.nome || !body.chave) {
      setErr("Informe o nome e a chave do domÃ­nio.");
      return;
    }

    setSaving(true);
    try {
      if (editing) {
        await api.put(`/dominios/${id}`, body);
      } else {
        await api.post("/dominios", body);
      }
      setOk(true);
      setTimeout(() => nav("/dominios"), 400);
    } catch (error: any) {
      const msg =
        error?.response?.data?.message ||
        (error?.response?.status === 409
          ? "JÃ¡ existe um domÃ­nio com essa chave."
          : editing
          ? "Erro ao atualizar domÃ­nio."
          : "Erro ao cadastrar domÃ­nio.");
      setErr(msg);
    } finally {
      setSaving(false);
    }
  }

  return (
    <div className="mx-auto max-w-4xl">
      {/* CabeÃ§alho */}
      <div className="mb-4 flex items-center justify-between gap-3">
        <div className="flex items-center gap-2">
          <button
            type="button"
            onClick={() => nav(-1)}
            className="px-3 py-2 rounded border hover:bg-slate-50"
          >
            â† Voltar
          </button>
          <div>
            <h1 className="text-xl font-semibold">
              {editing ? `Editar domÃ­nio #${id}` : "Novo domÃ­nio"}
            </h1>
            <p className="text-sm text-slate-500">
              {editing
                ? "Atualize os dados do domÃ­nio."
                : "Cadastre chaves para listas de valores (formas de pagamento, tipos, etc.)."}
            </p>
          </div>
        </div>
      </div>

      {/* Card */}
      <form
        onSubmit={onSubmit}
        className="rounded-2xl border bg-white shadow-sm"
      >
        {/* Mensagens */}
        {(err || ok) && (
          <div className="p-4 border-b">
            {err && (
              <div className="text-sm text-red-700 bg-red-50 border border-red-200 rounded p-3">
                {err}
              </div>
            )}
            {ok && (
              <div className="text-sm text-emerald-700 bg-emerald-50 border border-emerald-200 rounded p-3">
                DomÃ­nio salvo com sucesso!
              </div>
            )}
          </div>
        )}

        {/* ConteÃºdo */}
        <div className="grid grid-cols-1 gap-6 p-5 lg:grid-cols-12">
          {/* Coluna esquerda */}
          <section className="lg:col-span-8 space-y-4">
            <div className="grid gap-4 sm:grid-cols-2">
              <div className="sm:col-span-2">
                <label className="text-sm text-slate-700">
                  Nome <span className="text-red-600">*</span>
                </label>
                <input
                  className="mt-1 w-full rounded border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-200"
                  value={nome}
                  onChange={(e) => setNome(e.target.value)}
                  placeholder="Ex.: CondiÃ§Ãµes de Pagamento"
                  autoFocus
                />
                <p className="mt-1 text-xs text-slate-500">
                  Dica: usamos o nome para sugerir a chave, se ela estiver vazia.
                </p>
              </div>

              <div className="sm:col-span-2">
                <label className="text-sm text-slate-700">
                  Chave <span className="text-red-600">*</span>
                </label>
                <div className="mt-1 flex gap-2">
                  <input
                    className="flex-1 rounded border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-200"
                    value={chave}
                    onChange={(e) => setChave(e.target.value)}
                    placeholder="Ex.: CONDICOES_DE_PAGAMENTO"
                  />
                  {!editing && (
                    <button
                      type="button"
                      className="rounded border px-3 py-2 text-sm hover:bg-slate-50"
                      onClick={() => setChave(slugify(nome).toUpperCase())}
                      title="Gerar a partir do nome"
                    >
                      Gerar
                    </button>
                  )}
                </div>
              </div>
            </div>
          </section>

          {/* Coluna direita */}
          <section className="lg:col-span-4 space-y-4">
            <div className="rounded-xl border p-4">
              <h3 className="text-sm font-semibold text-slate-800 mb-3">
                Status
              </h3>
              <label className="flex items-center gap-2 select-none">
                <input
                  type="checkbox"
                  className="h-4 w-4"
                  checked={ativo}
                  onChange={(e) => setAtivo(e.target.checked)}
                />
                <span className="text-sm text-slate-700">Ativo</span>
              </label>
            </div>

            <div className="rounded-xl border p-4">
              <h3 className="text-sm font-semibold text-slate-800 mb-2">
                PrÃ©-visualizaÃ§Ã£o
              </h3>
              <div className="text-xs text-slate-500">Chave sugerida</div>
              <div className="mt-1 font-mono text-sm">
                {(chave || slugify(nome)).toUpperCase() || "â€”"}
              </div>
            </div>
          </section>
        </div>

        {/* AÃ§Ãµes */}
        <div className="flex items-center gap-2 border-t p-4">
          <button
            type="submit"
            disabled={saving || loading}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
          >
            {saving ? "Salvandoâ€¦" : "Salvar"}
          </button>
          <button
            type="button"
            onClick={() => nav("/dominios")}
            className="px-4 py-2 bg-slate-100 rounded-md hover:bg-slate-200"
          >
            Cancelar
          </button>
          {loading && (
            <span className="ml-2 text-sm text-slate-500">Carregandoâ€¦</span>
          )}
        </div>
      </form>
    </div>
  );
}


----- END frontend\src\components\DominioForm.tsx -----


----- BEGIN frontend\src\components\DominioItemForm.tsx -----

// src/components/DominioItemForm.tsx
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import api from "../services/api";

interface DominioItemFormProps {
  dominioId: string | number;
  /** callback para recarregar a lista apÃ³s criar */
  onCreated?: () => void;
}

const Badge = ({ children }: { children: React.ReactNode }) => (
  <span className="inline-flex items-center rounded-full px-2 py-0.5 text-xs font-medium bg-emerald-50 text-emerald-700 ring-1 ring-emerald-200">
    {children}
  </span>
);

const DominioItemForm: React.FC<DominioItemFormProps> = ({ dominioId, onCreated }) => {
  const [valor, setValor] = useState("");
  const [codigo, setCodigo] = useState("");
  const [ordem, setOrdem] = useState<string>("0");
  const [ativo, setAtivo] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [saving, setSaving] = useState(false);
  const navigate = useNavigate();

  const toIntOrZero = (s: string) => {
    const n = parseInt(s, 10);
    return Number.isNaN(n) ? 0 : n;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);

    if (!valor.trim()) {
      setError("Informe o valor do item.");
      return;
    }

    try {
      setSaving(true);

      await api.post(`/dominios/${dominioId}/itens`, {
        valor: valor.trim(),
        codigo: codigo.trim() || undefined,
        ordem: toIntOrZero(ordem),
        ativo,
      });

      // limpa formulÃ¡rio
      setValor("");
      setCodigo("");
      setOrdem("0");
      setAtivo(true);

      // avisa o pai para recarregar
      onCreated?.();
    } catch (err: any) {
      if (err?.response?.status === 401) {
        navigate("/login");
        return;
      }
      setError(
        err?.response?.data?.message ||
          "Erro ao cadastrar item do domÃ­nio. Verifique se jÃ¡ nÃ£o existe um item com esse valor."
      );
      // eslint-disable-next-line no-console
      console.error("Erro ao cadastrar item do domÃ­nio:", err);
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="bg-white shadow rounded-lg p-4 space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-semibold">Novo item do domÃ­nio</h2>
        {ativo && <Badge>Ativo</Badge>}
      </div>

      {error && (
        <div className="rounded border border-red-200 bg-red-50 px-3 py-2 text-sm text-red-700">
          {error}
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="valor" className="block text-sm font-medium text-slate-700">
            Valor *
          </label>
          <input
            id="valor"
            type="text"
            placeholder="Ex.: BOLETO 30/60/90"
            className="mt-1 w-full rounded border px-3 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            value={valor}
            onChange={(e) => setValor(e.target.value)}
          />
        </div>

        <div>
          <label htmlFor="codigo" className="block text-sm font-medium text-slate-700">
            CÃ³digo (opcional)
          </label>
          <input
            id="codigo"
            type="text"
            placeholder="Ex.: COD-BOLETO-306090"
            className="mt-1 w-full rounded border px-3 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            value={codigo}
            onChange={(e) => setCodigo(e.target.value)}
          />
        </div>

        <div>
          <label htmlFor="ordem" className="block text-sm font-medium text-slate-700">
            Ordem
          </label>
          <input
            id="ordem"
            type="number"
            min={0}
            className="mt-1 w-full rounded border px-3 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            value={ordem}
            onChange={(e) => setOrdem(e.target.value)}
          />
        </div>

        <div className="flex items-center gap-2">
          <input
            id="ativo"
            type="checkbox"
            className="h-4 w-4"
            checked={ativo}
            onChange={(e) => setAtivo(e.target.checked)}
          />
          <label htmlFor="ativo" className="text-sm font-medium text-slate-700">
            Ativo
          </label>
        </div>

        <div className="flex gap-2">
          <button
            type="submit"
            disabled={saving}
            className="rounded bg-blue-600 px-4 py-2 font-semibold text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-60"
          >
            {saving ? "Salvando..." : "Salvar"}
          </button>
          <button
            type="button"
            onClick={() => {
              setValor("");
              setCodigo("");
              setOrdem("0");
              setAtivo(true);
              setError(null);
            }}
            className="rounded border px-4 py-2 hover:bg-slate-50"
          >
            Limpar
          </button>
        </div>
      </form>
    </div>
  );
};

export default DominioItemForm;


----- END frontend\src\components\DominioItemForm.tsx -----


----- BEGIN frontend\src\components\DominioItens.tsx -----

// src/components/DominioItens.tsx
import { useEffect, useMemo, useState } from "react";
import { useParams } from "react-router-dom";
import api from "../services/api";
import DominioItemForm from "./DominioItemForm";

type Item = {
  id: number;
  valor: string;
  codigo?: string | null;
  ordem: number;
  descricao?: string | null; // novo
  ativo: boolean;
};

export default function DominioItens() {
  const { id } = useParams();
  const dominioId = Number(id);

  const [items, setItems] = useState<Item[]>([]);
  const [loading, setLoading] = useState(false);
  const [query, setQuery] = useState("");
  const [err, setErr] = useState<string | null>(null);

  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
    if (!q) return items;
    return items.filter(
      (it) =>
        it.valor.toLowerCase().includes(q) ||
        (it.codigo ?? "").toLowerCase().includes(q) ||
        (it.descricao ?? "").toLowerCase().includes(q)
    );
  }, [items, query]);

  async function load() {
    setLoading(true);
    setErr(null);
    try {
      const { data } = await api.get(`/dominios/${dominioId}/itens`);
      setItems(data?.data ?? data ?? []);
    } catch (e: any) {
      setErr(e?.response?.data?.message || "Falha ao carregar itens.");
      setItems([]);
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    if (Number.isFinite(dominioId)) load();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [dominioId]);

  async function removeItem(itemId: number) {
    if (!confirm("Remover este item?")) return;
    try {
      await api.delete(`/dominios/${dominioId}/itens/${itemId}`);
      await load();
    } catch (e: any) {
      alert(e?.response?.data?.message || "Falha ao remover item.");
    }
  }

  return (
    <div className="space-y-4">
      <div className="flex items-end justify-between gap-2">
        <h1 className="text-xl font-semibold">Itens do domÃ­nio #{dominioId}</h1>
        <div className="flex items-end gap-2">
          <div>
            <label className="text-sm">Buscar</label>
            <input
              className="border rounded px-3 py-2"
              placeholder="Valor, cÃ³digo ou descriÃ§Ã£oâ€¦"
              value={query}
              onChange={(e) => setQuery(e.target.value)}
            />
          </div>
        </div>
      </div>

      {/* NÃƒO passo mais onCreated (para nÃ£o quebrar o seu form existente) */}
      <DominioItemForm dominioId={String(dominioId)} />

      <div className="rounded border bg-white">
        <table className="w-full text-sm">
          <thead className="bg-gray-50">
            <tr>
              <th className="p-2 border text-left">#</th>
              <th className="p-2 border text-left">Valor</th>
              <th className="p-2 border text-left">CÃ³digo</th>
              <th className="p-2 border text-left">Ordem</th>
              <th className="p-2 border text-left">DescriÃ§Ã£o</th>
              <th className="p-2 border text-left">Ativo</th>
              <th className="p-2 border text-left">AÃ§Ãµes</th>
            </tr>
          </thead>
          <tbody>
            {filtered.map((it) => (
              <tr key={it.id} className="hover:bg-gray-50">
                <td className="p-2 border">{it.id}</td>
                <td className="p-2 border">{it.valor}</td>
                <td className="p-2 border">{it.codigo ?? "-"}</td>
                <td className="p-2 border">{it.ordem}</td>
                <td className="p-2 border">{it.descricao ?? "-"}</td>
                <td className="p-2 border">{it.ativo ? "Sim" : "NÃ£o"}</td>
                <td className="p-2 border">
                  <button
                    onClick={() => removeItem(it.id)}
                    className="px-2 py-1 bg-red-600 text-white rounded"
                  >
                    Remover
                  </button>
                </td>
              </tr>
            ))}

            {!loading && filtered.length === 0 && (
              <tr>
                <td colSpan={7} className="p-4 text-center text-gray-500">
                  Nenhum item encontrado
                </td>
              </tr>
            )}
            {loading && (
              <tr>
                <td colSpan={7} className="p-4 text-center">
                  Carregandoâ€¦
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {err && (
        <div className="rounded border border-red-200 bg-red-50 px-3 py-2 text-sm text-red-700">
          {err}
        </div>
      )}
    </div>
  );
}


----- END frontend\src\components\DominioItens.tsx -----


----- BEGIN frontend\src\components\Dominios.tsx -----

// src/components/Dominios.tsx
import { useEffect, useMemo, useState } from "react";
import { Link } from "react-router-dom";
import api from "../services/api";

type Dominio = {
  id: number;
  chave: string;
  nome: string;
  descricao?: string | null; // novo
  ativo: boolean;
};

export default function Dominios() {
  const [rows, setRows] = useState<Dominio[]>([]);
  const [loading, setLoading] = useState(false);
  const [query, setQuery] = useState("");
  const [onlyStatus, setOnlyStatus] = useState<"" | "ATIVOS" | "INATIVOS">("");

  async function load() {
    setLoading(true);
    try {
      const { data } = await api.get("/dominios");
      setRows(data?.data ?? data ?? []);
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    load();
  }, []);

  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
    let list = rows;
    if (onlyStatus === "ATIVOS") list = list.filter((d) => d.ativo);
    if (onlyStatus === "INATIVOS") list = list.filter((d) => !d.ativo);
    if (!q) return list;
    return list.filter(
      (d) =>
        d.nome.toLowerCase().includes(q) ||
        d.chave.toLowerCase().includes(q) ||
        (d.descricao ?? "").toLowerCase().includes(q) ||
        String(d.id).includes(q)
    );
  }, [rows, query, onlyStatus]);

  return (
    <div className="space-y-4">
      <div className="flex flex-wrap gap-2 justify-between">
        <h1 className="text-xl font-semibold">DomÃ­nios</h1>
        <div className="flex items-end gap-2">
          <div>
            <label className="text-sm">Buscar</label>
            <input
              className="border rounded px-3 py-2"
              placeholder="nome, chave, descriÃ§Ã£o ou #idâ€¦"
              value={query}
              onChange={(e) => setQuery(e.target.value)}
            />
          </div>
          <div>
            <label className="text-sm">Status</label>
            <select
              className="border rounded px-3 py-2"
              value={onlyStatus}
              onChange={(e) =>
                setOnlyStatus(e.target.value as "" | "ATIVOS" | "INATIVOS")
              }
            >
              <option value="">(todos)</option>
              <option value="ATIVOS">Ativos</option>
              <option value="INATIVOS">Inativos</option>
            </select>
          </div>
          <Link
            to="/dominios/novo"
            className="px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
          >
            Novo
          </Link>
        </div>
      </div>

      <div className="rounded border bg-white overflow-hidden">
        <table className="w-full text-sm">
          <thead className="bg-gray-50">
            <tr>
              <th className="p-2 border text-left">#</th>
              <th className="p-2 border text-left">Chave</th>
              <th className="p-2 border text-left">Nome</th>
              <th className="p-2 border text-left">DescriÃ§Ã£o</th>
              <th className="p-2 border text-left">Status</th>
              <th className="p-2 border text-left">AÃ§Ãµes</th>
            </tr>
          </thead>
          <tbody>
            {filtered.map((d) => (
              <tr key={d.id} className="hover:bg-gray-50">
                <td className="p-2 border">{d.id}</td>
                <td className="p-2 border font-mono">{d.chave}</td>
                <td className="p-2 border">{d.nome}</td>
                <td className="p-2 border">{d.descricao ?? "-"}</td>
                <td className="p-2 border">
                  <span
                    className={`inline-flex items-center rounded-full px-2 py-0.5 text-xs font-medium ${
                      d.ativo
                        ? "bg-emerald-50 text-emerald-700 ring-1 ring-emerald-200"
                        : "bg-rose-50 text-rose-700 ring-1 ring-rose-200"
                    }`}
                  >
                    {d.ativo ? "Ativo" : "Inativo"}
                  </span>
                </td>
                <td className="p-2 border">
                  <div className="flex gap-3">
                    <Link
                      to={`/dominios/${d.id}/itens`}
                      className="text-blue-600 underline"
                    >
                      Itens
                    </Link>
                    <Link
                      to={`/dominios/${d.id}/editar`}
                      className="text-emerald-700 underline"
                    >
                      Editar
                    </Link>
                  </div>
                </td>
              </tr>
            ))}

            {!loading && filtered.length === 0 && (
              <tr>
                <td colSpan={6} className="p-4 text-center text-gray-500">
                  Nenhum domÃ­nio
                </td>
              </tr>
            )}
            {loading && (
              <tr>
                <td colSpan={6} className="p-4 text-center">
                  Carregandoâ€¦
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}


----- END frontend\src\components\Dominios.tsx -----


----- BEGIN frontend\src\components\ErrorBoundary.tsx -----

// src/components/ErrorBoundary.tsx
import React from "react";
import { Link } from "react-router-dom";

type State = {
  hasError: boolean;
  error?: any;
  errorInfo?: { componentStack?: string } | null;
  showDetails: boolean;
  copied: boolean;
};

export default class ErrorBoundary extends React.Component<React.PropsWithChildren, State> {
  constructor(props: any) {
    super(props);
    this.state = { hasError: false, errorInfo: null, showDetails: false, copied: false };
  }

  static getDerivedStateFromError(error: any) {
    return { hasError: true, error };
  }

  componentDidCatch(error: any, info: any) {
    console.error("ErrorBoundary:", error, info);
    this.setState({ errorInfo: info });
  }

  private handleReload = () => {
    window.location.reload();
  };

  private handleBack = () => {
    if (window.history.length > 1) window.history.back();
    else this.handleReload();
  };

  private toggleDetails = () => {
    this.setState((s) => ({ showDetails: !s.showDetails, copied: false }));
  };

  private copyDetails = async () => {
    const { error, errorInfo } = this.state;
    const payload = [
      `Mensagem: ${String(error)}`,
      error?.stack ? `\nStack:\n${error.stack}` : "",
      errorInfo?.componentStack ? `\nReact stack:\n${errorInfo.componentStack}` : "",
      `\nURL: ${window.location.href}`,
      `UserAgent: ${navigator.userAgent}`,
      `Quando: ${new Date().toISOString()}`,
    ].join("\n");

    try {
      await navigator.clipboard.writeText(payload);
      this.setState({ copied: true });
    } catch {
      this.setState({ copied: false });
    }
  };

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-[60vh] grid place-items-center p-6">
          <div className="w-full max-w-2xl rounded-xl border bg-white p-6 shadow">
            <div className="flex items-start gap-4">
              <div className="text-4xl">ðŸ’¥</div>
              <div className="flex-1">
                <h1 className="text-xl font-semibold text-slate-900">Ops, algo deu errado.</h1>
                <p className="mt-1 text-sm text-slate-600">
                  Isso nÃ£o era para acontecer. VocÃª pode recarregar a pÃ¡gina ou voltar para continuar trabalhando.
                </p>

                <div className="mt-4 flex flex-wrap gap-2">
                  <button onClick={this.handleBack} className="px-3 py-2 rounded-md border bg-white hover:bg-slate-50">
                    Voltar
                  </button>
                  <button onClick={this.handleReload} className="px-3 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700">
                    Recarregar
                  </button>
                  <Link to="/" className="px-3 py-2 rounded-md bg-emerald-600 text-white hover:bg-emerald-700">
                    Ir para InÃ­cio
                  </Link>
                  <button onClick={this.toggleDetails} className="px-3 py-2 rounded-md border bg-white hover:bg-slate-50">
                    {this.state.showDetails ? "Ocultar detalhes" : "Mostrar detalhes"}
                  </button>
                  {this.state.showDetails && (
                    <button onClick={this.copyDetails} className="px-3 py-2 rounded-md border bg-white hover:bg-slate-50">
                      {this.state.copied ? "Copiado âœ“" : "Copiar detalhes"}
                    </button>
                  )}
                </div>

                {this.state.showDetails && (
                  <div className="mt-4">
                    <h2 className="text-sm font-medium text-slate-700">Detalhes tÃ©cnicos</h2>
                    <pre className="mt-2 max-h-64 overflow-auto rounded-md bg-slate-50 p-3 text-xs text-slate-800">
{String(this.state.error)}
{this.state.error?.stack ? `\n\n${this.state.error.stack}` : ""}
{this.state.errorInfo?.componentStack ? `\n\nReact stack:\n${this.state.errorInfo.componentStack}` : ""}
                    </pre>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      );
    }
    return this.props.children;
  }
}


----- END frontend\src\components\ErrorBoundary.tsx -----


----- BEGIN frontend\src\components\FinanceiroReceber.tsx -----

// src/components/FinanceiroReceber.tsx
import { useEffect, useMemo, useState } from "react";
import { listarTitulos, estornarTitulo, type Titulo } from "../services/financeiro";
import BaixaModal from "./financeiro/BaixaModal";
import StatusBadge from "./ui/StatusBadge";
import { ensureClientNames, getClientName } from "../utils/clientNameCache";

const money = (n: number) =>
  Number(n || 0).toLocaleString("pt-BR", { style: "currency", currency: "BRL" });

const initials = (name: string) =>
  (name || "").trim().split(/\s+/).slice(0, 2).map((p) => p[0]?.toUpperCase() || "").join("");

// diferenÃ§a em dias entre bom_para e hoje (positivo = futuro; 0 = hoje; negativo = atraso)
function daysToDue(date?: string | null): number {
  if (!date) return Number.POSITIVE_INFINITY;
  const d = new Date(date);
  const today = new Date();
  d.setHours(0, 0, 0, 0);
  today.setHours(0, 0, 0, 0);
  return Math.round((d.getTime() - today.getTime()) / 86400000); // <-- divide antes, depois arredonda
}

function dueBadge(date?: string | null) {
  if (!date) return <span className="text-slate-400">â€”</span>;
  const diff = Math.round(daysToDue(date));
  if (diff === 0) {
    return (
      <span className="inline-flex items-center gap-1 rounded-full bg-amber-50 px-2 py-0.5 text-[11px] font-medium text-amber-700 ring-1 ring-amber-200">
        Hoje
      </span>
    );
  }
  if (diff < 0) {
    return (
      <span className="inline-flex items-center gap-1 rounded-full bg-rose-50 px-2 py-0.5 text-[11px] font-medium text-rose-700 ring-1 ring-rose-200">
        {Math.abs(diff)} dia{Math.abs(diff) > 1 ? "s" : ""} em atraso
      </span>
    );
  }
  return (
    <span className="inline-flex items-center gap-1 rounded-full bg-slate-50 px-2 py-0.5 text-[11px] font-medium text-slate-700 ring-1 ring-slate-200">
      D-{diff}
    </span>
  );
}

type PrazoFiltro = "ALL" | "D0" | "D1" | "D2" | "D3" | "ATE7" | "ATRASO" | "SEM_DATA";
type TipoFiltro = "all" | "BOLETO" | "CHEQUE";
type Ordenar = "BOM_PARA_ASC" | "BOM_PARA_DESC" | "DIAS_ASC" | "PENDENTE_DESC";

export default function FinanceiroReceber() {
  const [items, setItems] = useState<Titulo[]>([]);
  const [loading, setLoading] = useState(false);

  // FILTROS (servidor)
  const [status, setStatus] = useState<"ABERTO" | "PARCIAL" | "BAIXADO" | "all" | "ABERTO,PARCIAL">("ABERTO,PARCIAL");
  const [from, setFrom] = useState<string>("");
  const [to, setTo] = useState<string>("");
  const [q, setQ] = useState("");

  // FILTROS (cliente)
  const [prazo, setPrazo] = useState<PrazoFiltro>("ALL");
  const [tipo, setTipo] = useState<TipoFiltro>("all");
  const [ordenar, setOrdenar] = useState<Ordenar>("BOM_PARA_ASC");

  // BAIXA
  const [showBaixa, setShowBaixa] = useState(false);
  const [tituloSel, setTituloSel] = useState<{ id: number; pendente: number } | null>(null);

  async function load(override?: { status?: string; from?: string; to?: string; q?: string }) {
    setLoading(true);
    try {
      const resp = await listarTitulos({
        status: (override?.status ?? status) === "all" ? undefined : (override?.status ?? status),
        from: override?.from ?? (from || undefined),
        to: override?.to ?? (to || undefined),
        q: override?.q ?? (q || undefined),
        pageSize: 500,
      });

      const list = (resp.data ?? []) as Titulo[];

      // garantir nome dos clientes (cache)
      const ids = Array.from(new Set(list.map((t) => Number(t.cliente_id)).filter(Boolean)));
      await ensureClientNames(ids);

      setItems(
        list.map((t) => ({
          ...t,
          cliente_nome: getClientName(t.cliente_id as any, (t as any).cliente_nome),
        }))
      );
    } finally {
      setLoading(false);
    }
  }

  // 1Âª carga
  useEffect(() => {
    load();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // auto-recarregar quando trocar o STATUS (chips)
  useEffect(() => {
    load({ status });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [status]);

  // totais (sobre a lista carregada)
  const totalAberto = useMemo(
    () => items.reduce((acc, t) => acc + Math.max(0, t.valor_bruto - t.valor_baixado), 0),
    [items]
  );
  const totalHoje = useMemo(() => {
    const today = new Date().toISOString().slice(0, 10);
    return items
      .filter((t) => t.bom_para?.slice(0, 10) === today && t.status !== "BAIXADO")
      .reduce((acc, t) => acc + Math.max(0, t.valor_bruto - t.valor_baixado), 0);
  }, [items]);
  const totalAtraso = useMemo(
    () =>
      items
        .filter((t) => daysToDue(t.bom_para) < 0 && t.status !== "BAIXADO")
        .reduce((acc, t) => acc + Math.max(0, t.valor_bruto - t.valor_baixado), 0),
    [items]
  );
  const totalBaixadoPeriodo = useMemo(
    () => items.reduce((acc, t) => acc + Number(t.valor_baixado || 0), 0),
    [items]
  );

  // lista filtrada + ordenada (client side)
  const viewItems = useMemo(() => {
    const getPendente = (t: Titulo) => Math.max(0, t.valor_bruto - t.valor_baixado);

    let list = [...items];
    if (tipo !== "all") list = list.filter((t) => t.tipo === tipo);

    if (prazo !== "ALL") {
      list = list.filter((t) => {
        const d = Math.round(daysToDue(t.bom_para));
        switch (prazo) {
          case "D0": return d === 0;
          case "D1": return d === 1;
          case "D2": return d === 2;
          case "D3": return d === 3;
          case "ATE7": return d >= 0 && d <= 7;
          case "ATRASO": return d < 0 && t.status !== "BAIXADO";
          case "SEM_DATA": return !t.bom_para;
          default: return true;
        }
      });
    }

    list.sort((a, b) => {
      const aDias = Math.round(daysToDue(a.bom_para));
      const bDias = Math.round(daysToDue(b.bom_para));
      const aTime = a.bom_para ? new Date(a.bom_para).getTime() : Number.POSITIVE_INFINITY;
      const bTime = b.bom_para ? new Date(b.bom_para).getTime() : Number.POSITIVE_INFINITY;
      const aPend = getPendente(a);
      const bPend = getPendente(b);

      if (ordenar === "BOM_PARA_ASC") {
        if (aTime !== bTime) return aTime - bTime;
        if (aPend !== bPend) return bPend - aPend;
        return String(a.cliente_nome ?? "").localeCompare(String(b.cliente_nome ?? ""));
      }
      if (ordenar === "BOM_PARA_DESC") {
        if (aTime !== bTime) return bTime - aTime;
        if (aPend !== bPend) return bPend - aPend;
        return String(a.cliente_nome ?? "").localeCompare(String(b.cliente_nome ?? ""));
      }
      if (ordenar === "DIAS_ASC") {
        if (aDias !== bDias) return aDias - bDias;
        if (aPend !== bPend) return bPend - aPend;
        return String(a.cliente_nome ?? "").localeCompare(String(b.cliente_nome ?? ""));
      }
      if (ordenar === "PENDENTE_DESC") {
        if (aPend !== bPend) return bPend - aPend;
        if (aTime !== bTime) return aTime - bTime;
        return String(a.cliente_nome ?? "").localeCompare(String(b.cliente_nome ?? ""));
      }
      return 0;
    });

    return list;
  }, [items, prazo, tipo, ordenar]);

  async function handleEstornar(id: number) {
    const ok = window.confirm("Confirmar estorno deste tÃ­tulo? Ele voltarÃ¡ para 'A receber'.");
    if (!ok) return;
    await estornarTitulo(id);
    await load();
  }

  return (
    <div className="space-y-4">
      {/* TÃ­tulo */}
      <div className="flex items-center gap-3">
        <h1 className="text-2xl font-semibold tracking-tight">Contas a Receber</h1>
      </div>

      {/* Resumo */}
      <div className="grid gap-3 sm:grid-cols-2 lg:grid-cols-4">
        <CardResumo label="A receber" value={money(totalAberto)} tone="rose" />
        <CardResumo label="Vencem hoje" value={money(totalHoje)} tone="amber" />
        <CardResumo label="Em atraso" value={money(totalAtraso)} tone="red" />
        <CardResumo label="Baixado no perÃ­odo" value={money(totalBaixadoPeriodo)} tone="emerald" />
      </div>

      {/* Filtros */}
      <div className="rounded-2xl border bg-white p-3 shadow-sm space-y-3">
        <div className="flex flex-wrap items-end gap-3">
          {/* STATUS (servidor) */}
          <div className="flex items-center gap-1">
            {[
              // { v: "ABERTO,PARCIAL", label: "Abertos + Parciais" },
              { v: "ABERTO", label: "Abertos" },
              // { v: "PARCIAL", label: "Apenas parciais" },
              { v: "BAIXADO", label: "Baixados" },
              { v: "all", label: "Todos" },
            ].map((s) => (
              <button
                key={s.v}
                onClick={() => setStatus(s.v as any)}
                className={[
                  "rounded-full px-3 py-1 text-xs ring-1 transition-colors",
                  status === (s.v as any)
                    ? "bg-slate-900 text-white ring-slate-900"
                    : "bg-white text-slate-700 ring-slate-200 hover:bg-slate-50",
                ].join(" ")}
              >
                {s.label}
              </button>
            ))}
          </div>

          <label className="text-sm">
            <span className="block text-slate-600">De</span>
            <input
              type="date"
              className="mt-1 rounded-lg border px-3 py-2"
              value={from}
              onChange={(e) => setFrom(e.target.value)}
            />
          </label>

          <label className="text-sm">
            <span className="block text-slate-600">AtÃ©</span>
            <input
              type="date"
              className="mt-1 rounded-lg border px-3 py-2"
              value={to}
              onChange={(e) => setTo(e.target.value)}
            />
          </label>

          <label className="flex-1 text-sm min-w-[220px]">
            <span className="block text-slate-600">Busca rÃ¡pida</span>
            <input
              className="mt-1 w-full rounded-lg border px-3 py-2"
              placeholder="nÂº doc, observaÃ§Ã£oâ€¦"
              value={q}
              onChange={(e) => setQ(e.target.value)}
              onKeyDown={(e) => { if (e.key === "Enter") load(); }}
            />
          </label>

          <button onClick={() => load()} className="h-10 rounded-lg bg-blue-600 px-4 text-white hover:bg-blue-700">
            Aplicar
          </button>

          <div className="ml-auto text-sm">
            <span className="font-medium">A receber: </span>
            <span className="font-semibold text-rose-600">{money(totalAberto)}</span>
          </div>
        </div>

        {/* Linha 2: Prazo / Tipo / Ordenar (client side) */}
        <div className="flex flex-wrap items-end gap-3">
          <div className="flex items-center gap-1">
            <span className="mr-1 text-sm text-slate-600">Prazo:</span>
            {(
              [
                { v: "ALL", label: "Todos" },
                { v: "D0", label: "Hoje (D-0)" },
                { v: "D1", label: "D-1" },
                { v: "D2", label: "D-2" },
                { v: "D3", label: "D-3" },
                { v: "ATE7", label: "AtÃ© 7 dias" },
                { v: "ATRASO", label: "Atrasados" },
                { v: "SEM_DATA", label: "Sem data" },
              ] as const
            ).map((p) => (
              <button
                key={p.v}
                onClick={() => setPrazo(p.v)}
                className={[
                  "rounded-full px-3 py-1 text-xs ring-1 transition-colors",
                  prazo === p.v
                    ? "bg-slate-900 text-white ring-slate-900"
                    : "bg-white text-slate-700 ring-slate-200 hover:bg-slate-50",
                ].join(" ")}
              >
                {p.label}
              </button>
            ))}
          </div>

          <div className="flex items-center gap-1">
            <span className="ml-1 mr-1 text-sm text-slate-600">Tipo:</span>
            {(
              [
                { v: "all", label: "Todos" },
                { v: "BOLETO", label: "Boletos" },
                { v: "CHEQUE", label: "Cheques" },
              ] as const
            ).map((p) => (
              <button
                key={p.v}
                onClick={() => setTipo(p.v)}
                className={[
                  "rounded-full px-3 py-1 text-xs ring-1 transition-colors",
                  tipo === p.v
                    ? "bg-slate-900 text-white ring-slate-900"
                    : "bg-white text-slate-700 ring-slate-200 hover:bg-slate-50",
                ].join(" ")}
              >
                {p.label}
              </button>
            ))}
          </div>

          <label className="text-sm">
            <span className="block text-slate-600">Ordenar por</span>
            <select
              className="mt-1 rounded-lg border px-3 py-2"
              value={ordenar}
              onChange={(e) => setOrdenar(e.target.value as Ordenar)}
            >
              <option value="BOM_PARA_ASC">Bom para (mais cedo â†’ mais tarde)</option>
              <option value="BOM_PARA_DESC">Bom para (mais tarde â†’ mais cedo)</option>
              <option value="DIAS_ASC">Dias (D-1, D-2, D-3â€¦ crescente)</option>
              <option value="PENDENTE_DESC">Valor pendente (maior â†’ menor)</option>
            </select>
          </label>
        </div>
      </div>

      {/* Lista */}
      <div className="overflow-auto rounded-2xl border bg-white shadow-sm">
        <table className="w-full text-sm">
          <thead className="sticky top-0 bg-slate-50">
            <tr className="text-left">
              <th className="p-2 border">Cliente</th>
              <th className="p-2 border">Tipo</th>
              <th className="p-2 border">NÂº Doc</th>
              <th className="p-2 border">Bom para</th>
              <th className="p-2 border text-right">Valor</th>
              <th className="p-2 border text-right">Baixado</th>
              <th className="p-2 border">Status</th>
              <th className="p-2 border w-28">AÃ§Ãµes</th>
            </tr>
          </thead>

        <tbody className="[&>tr:nth-child(even)]:bg-slate-50/40">
          {loading && (
            <tr><td colSpan={8} className="p-6 text-center">Carregandoâ€¦</td></tr>
          )}

          {!loading && viewItems.length === 0 && (
            <tr><td colSpan={8} className="p-8 text-center text-slate-500">Sem tÃ­tulos</td></tr>
          )}

          {!loading && viewItems.map((t) => {
            const pendente = Math.max(0, t.valor_bruto - t.valor_baixado);
            const name = getClientName(t.cliente_id as any, (t as any).cliente_nome);
            return (
              <tr key={t.id} className="hover:bg-slate-50">
                <td className="p-2 border">
                  <div className="flex items-center gap-2 min-w-0">
                    <div className="grid h-8 w-8 shrink-0 place-items-center rounded-full bg-slate-100 text-xs font-medium text-slate-700">
                      {initials(name)}
                    </div>
                    <div className="truncate" title={name}>
                      <div className="truncate font-medium">{name}</div>
                    </div>
                  </div>
                </td>

                <td className="p-2 border">
                  <span className="inline-flex items-center gap-1 rounded-full bg-slate-100 px-2 py-0.5 text-[11px] font-medium text-slate-700">
                    {t.tipo === "BOLETO" ? "ðŸ§¾" : t.tipo === "CHEQUE" ? "ðŸ’³" : "ðŸ“„"} {t.tipo}
                  </span>
                </td>

                <td className="p-2 border">{t.numero_doc || "â€”"}</td>

                <td className="p-2 border">
                  <div className="flex items-center gap-2">
                    <span>{t.bom_para ? new Date(t.bom_para).toLocaleDateString() : "â€”"}</span>
                    {dueBadge(t.bom_para)}
                  </div>
                </td>

                <td className="p-2 border text-right whitespace-nowrap">{money(t.valor_bruto)}</td>
                <td className="p-2 border text-right whitespace-nowrap">{money(t.valor_baixado)}</td>

                <td className="p-2 border"><StatusBadge value={t.status} /></td>

                <td className="p-2 border">
                  {t.status === "BAIXADO" ? (
                    <button
                      className="w-full rounded-md border border-rose-600 bg-rose-600 px-2 py-1 text-xs text-white hover:bg-rose-700 focus:outline-none focus:ring-2 focus:ring-rose-400/50 transition-colors"
                      onClick={() => handleEstornar(t.id)}
                    >
                      Estornar
                    </button>
                  ) : pendente > 0 ? (
                    <button
                      className="w-full rounded-md border border-emerald-600 bg-emerald-600 px-2 py-1 text-xs text-white hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-emerald-400/50 transition-colors"
                      onClick={() => {
                        setTituloSel({ id: t.id, pendente });
                        setShowBaixa(true);
                      }}
                    >
                      Baixar
                    </button>
                  ) : (
                    <span className="text-slate-400 text-xs">â€”</span>
                  )}
                </td>

              </tr>
            );
          })}
        </tbody>

        {!loading && viewItems.length > 0 && (
          <tfoot>
            <tr className="bg-slate-100/60">
              <td className="p-2 border font-medium text-right" colSpan={4}>Totais (lista exibida):</td>
              <td className="p-2 border font-semibold text-right">
                {money(viewItems.reduce((a, t) => a + t.valor_bruto, 0))}
              </td>
              <td className="p-2 border font-semibold text-right">
                {money(viewItems.reduce((a, t) => a + t.valor_baixado, 0))}
              </td>
              <td className="p-2 border" colSpan={2}></td>
            </tr>
          </tfoot>
        )}
        </table>
      </div>

      {showBaixa && tituloSel && (
        <BaixaModal
          open={showBaixa}
          onClose={() => setShowBaixa(false)}
          tituloId={tituloSel.id}
          pendente={tituloSel.pendente}
          onDone={() => load()}
        />
      )}
    </div>
  );
}

function CardResumo({
  label, value, tone,
}: { label: string; value: string; tone: "rose" | "amber" | "red" | "emerald"; }) {
  const cls =
    tone === "amber" ? "from-amber-50 to-white ring-amber-200 text-amber-900"
    : tone === "red" ? "from-rose-50 to-white ring-rose-200 text-rose-900"
    : tone === "emerald" ? "from-emerald-50 to-white ring-emerald-200 text-emerald-900"
    : "from-rose-50 to-white ring-rose-200 text-rose-900";
  return (
    <div className={`rounded-2xl bg-gradient-to-br px-4 py-3 ring-1 ${cls} shadow-sm`}>
      <div className="text-xs text-slate-600">{label}</div>
      <div className="text-xl font-semibold tracking-tight">{value}</div>
    </div>
  );
}


----- END frontend\src\components\FinanceiroReceber.tsx -----


----- BEGIN frontend\src\components\HistoricoPagamentos.tsx -----

// src/components/HistoricoPagamentos.tsx
import { useEffect, useMemo, useRef, useState } from "react";
import api from "../services/api";
import { ensureClientNames, getClientName } from "../utils/clientNameCache";

/* ==================== ÃCONES INLINE ==================== */
function IconSearch({ size = 16, className = "" }: { size?: number; className?: string }) {
  return (
    <svg className={className} width={size} height={size} viewBox="0 0 24 24" fill="none"
      stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" aria-hidden="true">
      <circle cx="11" cy="11" r="8" /><line x1="21" y1="21" x2="16.65" y2="16.65" />
    </svg>
  );
}
function IconDownload({ size = 18, className = "" }: { size?: number; className?: string }) {
  return (
    <svg className={className} width={size} height={size} viewBox="0 0 24 24" fill="none"
      stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" aria-hidden="true">
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" /><path d="M7 10l5 5 5-5" /><path d="M12 15V3" />
    </svg>
  );
}
function IconRefresh({ size = 18, className = "" }: { size?: number; className?: string }) {
  return (
    <svg className={className} width={size} height={size} viewBox="0 0 24 24" fill="none"
      stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" aria-hidden="true">
      <polyline points="23 4 23 10 17 10" /><polyline points="1 20 1 14 7 14" />
      <path d="M3.51 9a9 9 0 0114.13-3.36L23 10M1 14l5.36 4.36A9 9 0 0020.49 15" />
    </svg>
  );
}

/* ==================== Tipos ==================== */
type RowAPI = {
  id: number;
  cliente_id: number;
  valor: number;                   // backend pode mandar sempre positivo
  forma_pagamento: string;
  criado_em: string;               // ISO
  observacao?: string | null;
  cliente_nome?: string | null;

  // Ã s vezes o backend jÃ¡ manda o sentido:
  tipo?: string | null;            // "ENTRADA" | "SAIDA"
  natureza?: string | null;        // "ENTRADA" | "SAIDA" | "E" | "S"
  movimento?: string | null;       // idem
};

type Row = RowAPI & {
  /** ConvenÃ§Ã£o do sistema:
   *  SAÃDA = +valor   |   ENTRADA = âˆ’valor
   */
  valor_assinado: number;
  direcao: "ENTRADA" | "SAIDA";
};

type Cliente = { id: number; nome_fantasia: string };

/* ==================== Helpers ==================== */
const money = (n: number) => Number(n || 0).toLocaleString("pt-BR", { style: "currency", currency: "BRL" });
const dtBR = (d: string | Date) =>
  new Date(d).toLocaleString("pt-BR", { day: "2-digit", month: "2-digit", year: "numeric", hour: "2-digit", minute: "2-digit" });

const initials = (name?: string | null) =>
  (name || "").trim().split(/\s+/).slice(0, 2).map((p) => p[0]?.toUpperCase() || "").join("");

const formaTone = (f: string) => {
  const s = (f || "").toUpperCase();
  if (s.includes("PIX") || s.includes("DINHEIRO")) return "emerald";
  if (s.includes("BOLETO")) return "indigo";
  if (s.includes("CHEQUE")) return "sky";
  if (s.includes("ESTORNO") || s.includes("DEVOL") || s.includes("TROCO")) return "rose";
  if (s.includes("SALDO")) return "slate";
  if (s.includes("PEDIDO")) return "amber";
  return "amber";
};

function Badge({ tone, children }: { tone: "emerald" | "indigo" | "sky" | "slate" | "amber" | "rose"; children: React.ReactNode }) {
  const cls =
    tone === "emerald" ? "bg-emerald-50 text-emerald-700 ring-emerald-200"
    : tone === "indigo" ? "bg-indigo-50 text-indigo-700 ring-indigo-200"
    : tone === "sky" ? "bg-sky-50 text-sky-700 ring-sky-200"
    : tone === "rose" ? "bg-rose-50 text-rose-700 ring-rose-200"
    : tone === "amber" ? "bg-amber-50 text-amber-700 ring-amber-200"
    : "bg-slate-50 text-slate-700 ring-slate-200";
  return <span className={`inline-flex items-center rounded-full px-2 py-0.5 text-[11px] font-medium ring-1 ${cls}`}>{children}</span>;
}

function useDebounce<T>(value: T, ms = 300) {
  const [v, setV] = useState(value);
  useEffect(() => { const t = setTimeout(() => setV(value), ms); return () => clearTimeout(t); }, [value, ms]);
  return v;
}

/* ==================== NormalizaÃ§Ã£o (ENTRADA = âˆ’ | SAÃDA = +) ==================== */

function isSaidaByObs(obs?: string | null) {
  const s = (obs || "").toUpperCase();
  return s.includes("BAIXA") || s.includes("ESTORNO") || s.includes("DEVOLU");
}

function isSaidaByForma(forma?: string | null) {
  const f = (forma || "").toUpperCase();
  return f.includes("ESTORNO") || f.includes("TROCO");
}

function isEntradaByForma(forma?: string | null) {
  const f = (forma || "").toUpperCase();
  return (
    f.includes("SALDO") ||
    f.includes("PEDIDO") ||
    f.includes("PIX") ||
    f.includes("BOLETO") ||
    f.includes("CHEQUE") ||
    f.includes("DEPOS") ||
    f.includes("DINHEIRO") ||
    f.includes("CART")
  );
}

/** Aplica a convenÃ§Ã£o do sistema:
 *  SAÃDA = +valor   |   ENTRADA = âˆ’valor
 */
function normalizeRow(r: RowAPI): Row {
  const abs = Math.abs(Number(r.valor) || 0);

  // 1) campos explÃ­citos do backend tÃªm prioridade
  const t = (r.tipo || r.natureza || r.movimento || "").toString().toUpperCase();
  if (t === "SAIDA" || t === "S") return { ...r, direcao: "SAIDA", valor_assinado: +abs };
  if (t === "ENTRADA" || t === "E") return { ...r, direcao: "ENTRADA", valor_assinado: -abs };

  // 2) heurÃ­stica por observaÃ§Ã£o/forma
  const saidaObs = isSaidaByObs(r.observacao);
  const saidaForma = isSaidaByForma(r.forma_pagamento);
  const entradaForma = isEntradaByForma(r.forma_pagamento);

  if (saidaObs || saidaForma) return { ...r, direcao: "SAIDA", valor_assinado: +abs };
  if (entradaForma) return { ...r, direcao: "ENTRADA", valor_assinado: -abs };

  // 3) fallback seguro: considerar ENTRADA (âˆ’)
  return { ...r, direcao: "ENTRADA", valor_assinado: -abs };
}

/* ==================== Componente ==================== */
export default function HistoricoPagamentos() {
  // dados crus (normalizados) e dados filtrados para exibir
  const [sourceRows, setSourceRows] = useState<Row[]>([]);
  const [rows, setRows] = useState<Row[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // cliente (autocomplete)
  const [clienteInput, setClienteInput] = useState("");
  const [clienteId, setClienteId] = useState<number | "">("");
  const debounced = useDebounce(clienteInput, 250);
  const [cliOpts, setCliOpts] = useState<Cliente[]>([]);
  const [cliOpen, setCliOpen] = useState(false);
  const cliRef = useRef<HTMLDivElement>(null);

  // busca, perÃ­odo, tipo e ordenaÃ§Ã£o
  const [q, setQ] = useState("");
  const [from, setFrom] = useState("");
  const [to, setTo] = useState("");
  const [range, setRange] = useState<"today" | "7d" | "30d" | "month" | "all" | null>(null);
  const [tipoFilter, setTipoFilter] = useState<"ALL" | "ENTRADA" | "SAIDA">("ALL");
  const [sort, setSort] = useState<"date_desc" | "date_asc" | "value_desc" | "value_asc">("date_desc");

  useEffect(() => {
    function close(e: MouseEvent) { if (!cliRef.current?.contains(e.target as Node)) setCliOpen(false); }
    document.addEventListener("mousedown", close);
    return () => document.removeEventListener("mousedown", close);
  }, []);

  // autocomplete
  useEffect(() => {
    let active = true;
    (async () => {
      if (debounced.trim().length < 2 || clienteId !== "") { setCliOpts([]); return; }
      try {
        const { data } = await api.get("/clientes", { params: { search: debounced, limit: 10 } });
        if (!active) return;
        const list: Cliente[] = (data?.data ?? data ?? []).slice(0, 10);
        setCliOpts(list); setCliOpen(list.length > 0);
      } catch {}
    })();
    return () => { active = false; };
  }, [debounced, clienteId]);

  function selectCliente(c: Cliente) { setClienteInput(c.nome_fantasia); setClienteId(c.id); setCliOpen(false); }
  function clearCliente() { setClienteInput(""); setClienteId(""); setCliOpts([]); setCliOpen(false); }

  // ---- fetch cru + resolver nomes + normalizar entradas/saÃ­das
  async function reload() {
    setLoading(true); setError(null);
    try {
      const { data } = await api.get("/pagamentos/historico"); // traz tudo
      const listAPI: RowAPI[] = data?.data ?? data ?? [];
      const ids = Array.from(new Set(listAPI.map((r) => Number(r.cliente_id)).filter(Boolean)));
      await ensureClientNames(ids);

      const normalized: Row[] = listAPI.map((r) => {
        const n = normalizeRow(r);
        return { ...n, cliente_nome: getClientName(n.cliente_id, n.cliente_nome) };
      });

      setSourceRows(normalized);
      applyFilters(normalized); // aplica filtros atuais
    } catch (e: any) {
      setError(e?.response?.data?.message || "Falha ao carregar histÃ³rico.");
    } finally { setLoading(false); }
  }
  useEffect(() => { reload(); }, []); // primeira carga

  // ---- aplica filtros no front (inclusivo por dia)
  function applyFilters(base: Row[] = sourceRows, opts?: Partial<{
    from: string; to: string; clienteId: number | ""; q: string; tipo: "ALL"|"ENTRADA"|"SAIDA"; sort: typeof sort;
  }>) {
    const f = (opts?.from ?? from) || "";
    const t = (opts?.to ?? to) || "";
    const cid = opts?.clienteId ?? clienteId;
    const qq = (opts?.q ?? q).trim().toLowerCase();
    const tipo = opts?.tipo ?? tipoFilter;
    const ord  = opts?.sort ?? sort;

    const fromTS = f ? new Date(`${f}T00:00:00`).getTime() : -Infinity;
    const toTS   = t ? new Date(`${t}T23:59:59.999`).getTime() : Infinity;

    let filtered = base.filter((r) => {
      const ts = new Date(r.criado_em).getTime();
      if (ts < fromTS || ts > toTS) return false;
      if (cid !== "" && Number(r.cliente_id) !== Number(cid)) return false;
      if (tipo !== "ALL" && r.direcao !== tipo) return false;
      if (qq) {
        const hay = ((r.observacao || "") + " " + (r.forma_pagamento || "")).toLowerCase();
        if (!hay.includes(qq)) return false;
      }
      return true;
    });

    // ordenaÃ§Ã£o
    filtered.sort((a, b) => {
      if (ord === "date_desc") return +new Date(b.criado_em) - +new Date(a.criado_em);
      if (ord === "date_asc")  return +new Date(a.criado_em) - +new Date(b.criado_em);
      if (ord === "value_desc") return Math.abs(b.valor_assinado) - Math.abs(a.valor_assinado);
      return Math.abs(a.valor_assinado) - Math.abs(b.valor_assinado);
    });

    setRows(filtered);
  }

  // chips de perÃ­odo (auto-aplica + destaque)
  function quickRange(kind: "today" | "7d" | "30d" | "month" | "all") {
    setRange(kind);
    const now = new Date();
    if (kind === "today") {
      const iso = now.toISOString().slice(0, 10);
      setFrom(iso); setTo(iso);
      applyFilters(sourceRows, { from: iso, to: iso });
    } else if (kind === "7d") {
      const d = new Date(now); d.setDate(d.getDate() - 6);
      const f = d.toISOString().slice(0, 10), t = now.toISOString().slice(0, 10);
      setFrom(f); setTo(t); applyFilters(sourceRows, { from: f, to: t });
    } else if (kind === "30d") {
      const d = new Date(now); d.setDate(d.getDate() - 29);
      const f = d.toISOString().slice(0, 10), t = now.toISOString().slice(0, 10);
      setFrom(f); setTo(t); applyFilters(sourceRows, { from: f, to: t });
    } else if (kind === "month") {
      const first = new Date(now.getFullYear(), now.getMonth(), 1);
      const last  = new Date(now.getFullYear(), now.getMonth() + 1, 0);
      const f = first.toISOString().slice(0, 10), t = last.toISOString().slice(0, 10);
      setFrom(f); setTo(t); applyFilters(sourceRows, { from: f, to: t });
    } else {
      setFrom(""); setTo(""); applyFilters(sourceRows, { from: "", to: "" });
    }
  }

  // alteraÃ§Ãµes manuais limpam chip ativo (usa botÃ£o Filtrar)
  function onChangeFrom(v: string) { setFrom(v); setRange(null); }
  function onChangeTo(v: string) { setTo(v); setRange(null); }

  /* ===== mÃ©tricas (com a convenÃ§Ã£o ENTRADA=âˆ’ / SAÃDA=+) ===== */
  function sumTotals(list: Row[]) {
    const entradas = list.filter(r => r.direcao === "ENTRADA").reduce((a, r) => a + Math.abs(r.valor_assinado), 0);
    const saidas   = list.filter(r => r.direcao === "SAIDA").reduce((a, r) => a + Math.abs(r.valor_assinado), 0);
    return { entradas, saidas };
  }

  const stats = useMemo(() => {
    const { entradas, saidas } = sumTotals(rows);
    return {
      count: rows.length,
      totalEntradas: entradas,
      totalSaidas: saidas,
    };
  }, [rows]);

  const saldo = stats.totalEntradas - stats.totalSaidas; // saldo do recorte (Entradas âˆ’ SaÃ­das)

  // saldo inicial (antes do perÃ­odo) e final (inicial + movimento)
  const saldoInicial = useMemo(() => {
    if (!from) return 0;
    const ts = new Date(`${from}T00:00:00`).getTime();
    const prev = sourceRows.filter(r => +new Date(r.criado_em) < ts);
    const { entradas, saidas } = sumTotals(prev);
    return entradas - saidas;
  }, [from, sourceRows]);

  const saldoFinal = saldoInicial + saldo;

  // resumo por forma (do que estÃ¡ filtrado)
  const resumoPorForma = useMemo(() => {
    const map = new Map<string, { entradas: number; saidas: number; count: number }>();
    for (const r of rows) {
      const key = (r.forma_pagamento || "â€”").toUpperCase();
      if (!map.has(key)) map.set(key, { entradas: 0, saidas: 0, count: 0 });
      const obj = map.get(key)!;
      obj.count += 1;
      if (r.direcao === "ENTRADA") obj.entradas += Math.abs(r.valor_assinado);
      else obj.saidas += Math.abs(r.valor_assinado);
    }
    return Array.from(map.entries()).sort(
      (a, b) => (b[1].entradas + b[1].saidas) - (a[1].entradas + a[1].saidas)
    ).slice(0, 8);
  }, [rows]);

  // exporta o que estÃ¡ na tela (filtrado) â€” mantÃ©m o sinal do sistema
  function exportCsv() {
    const header = ["cliente", "direcao", "valor", "forma", "data", "observacao"];
    const lines = rows.map((r) => [
      getClientName(r.cliente_id, r.cliente_nome),
      r.direcao,
      String(r.valor_assinado).replace(".", ","), // ENTRADA negativa, SAÃDA positiva
      r.forma_pagamento,
      dtBR(r.criado_em),
      (r.observacao ?? "").replaceAll('"', '""'),
    ]);
    const csv = header.join(";") + "\n" + lines.map((l) => l.map((v) => `"${String(v)}"`).join(";")).join("\n");
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a"); a.href = url; a.download = "historico_pagamentos.csv"; a.click();
    URL.revokeObjectURL(url);
  }

  return (
    <div className="mx-auto max-w-6xl space-y-5">
      {/* Header escuro */}
      <div className="rounded-3xl bg-gradient-to-br from-slate-900 to-slate-700 p-6 shadow">
        <div className="flex flex-wrap items-center justify-between gap-3">
          <div className="text-white">
            <h1 className="text-2xl font-semibold tracking-tight">HistÃ³rico de pagamentos</h1>
            <p className="text-slate-300 text-sm">SaÃ­das <b>(+ verde)</b>, Entradas <b>(âˆ’ vermelho)</b>, filtros e exportaÃ§Ã£o.</p>
          </div>
          <div className="flex items-center gap-2">
            <button onClick={reload}
              className="inline-flex items-center gap-2 rounded-xl border border-white/20 bg-white/10 px-4 py-2 text-white hover:bg-white/20">
              <IconRefresh /> Recarregar
            </button>
            <button onClick={exportCsv} disabled={rows.length === 0}
              className="inline-flex items-center gap-2 rounded-xl bg-emerald-500/90 px-4 py-2 text-white hover:bg-emerald-600 disabled:opacity-50">
              <IconDownload /> Exportar
            </button>
          </div>
        </div>

        <div className="mt-4 grid gap-3 sm:grid-cols-2 lg:grid-cols-4">
          <StatCardDark title="LanÃ§amentos" value={String(stats.count)} />
          <StatCardDark title="Entradas (âˆ’)" value={money(stats.totalEntradas)} tone="rose" />
          <StatCardDark title="SaÃ­das (+)" value={money(stats.totalSaidas)} tone="emerald" />
          <StatCardDark title="Saldo (Entradas âˆ’ SaÃ­das)" value={money(saldo)} tone={saldo >= 0 ? "emerald" : "rose"} />
        </div>

        {(from || to) && (
          <div className="mt-3 grid gap-3 sm:grid-cols-3 text-[12px] text-slate-200">
            <div className="rounded-xl bg-white/5 px-3 py-2">Saldo inicial do perÃ­odo: <b>{money(saldoInicial)}</b></div>
            <div className="rounded-xl bg-white/5 px-3 py-2">Movimento no perÃ­odo: <b>{money(saldo)}</b></div>
            <div className="rounded-xl bg-white/5 px-3 py-2">Saldo final (estimado): <b>{money(saldoFinal)}</b></div>
          </div>
        )}
      </div>

      {/* Filtros */}
      <div className="rounded-2xl border bg-white p-4 shadow-sm">
        {/* Linha 1: Cliente + busca */}
        <div className="grid gap-3 md:grid-cols-2">
          <div ref={cliRef}>
            <label className="text-xs font-medium text-slate-600">Cliente</label>
            <div className="relative">
              <input
                className="mt-1 w-full rounded-xl border px-3 py-2 pr-24"
                placeholder="Digite para buscar pelo nomeâ€¦"
                value={clienteInput}
                onChange={(e) => { setClienteInput(e.target.value); if (clienteId !== "") setClienteId(""); }}
                onFocus={() => cliOpts.length && setCliOpen(true)}
              />
              {(clienteInput || clienteId !== "") && (
                <div className="absolute right-2 top-1/2 -translate-y-1/2 flex gap-1">
                  <button className="rounded border bg-white px-2 py-1 text-xs hover:bg-slate-50" onClick={clearCliente}>Limpar</button>
                  <button className="rounded border bg-white px-2 py-1 text-xs hover:bg-slate-50" onClick={() => { clearCliente(); applyFilters(); }}>
                    Todos
                  </button>
                </div>
              )}
              {cliOpen && cliOpts.length > 0 && (
                <div className="absolute z-10 mt-1 max-h-64 w-full overflow-auto rounded-md border bg-white shadow-lg">
                  {cliOpts.map((c) => (
                    <button key={c.id} className="block w-full px-3 py-2 text-left hover:bg-slate-50" type="button"
                      onClick={() => { selectCliente(c); applyFilters(sourceRows, { clienteId: c.id }); }}>
                      {c.nome_fantasia}
                    </button>
                  ))}
                </div>
              )}
            </div>
            {clienteId !== "" && <div className="mt-1 text-xs text-slate-600">Filtrando por: <b>#{clienteId}</b></div>}
          </div>

          <div>
            <label className="text-xs font-medium text-slate-600">Busca rÃ¡pida</label>
            <div className="relative">
              <IconSearch className="pointer-events-none absolute left-2 top-1/2 -translate-y-1/2 text-slate-400" />
              <input
                className="mt-1 w-full rounded-xl border px-8 py-2"
                placeholder="observaÃ§Ã£o, formaâ€¦"
                value={q}
                onChange={(e) => { setQ(e.target.value); }}
                onKeyDown={(e) => { if (e.key === "Enter") applyFilters(); }}
              />
            </div>
          </div>
        </div>

        {/* Linha 2: Datas, tipo e ordenaÃ§Ã£o */}
        <div className="mt-3 grid gap-3 md:grid-cols-2 lg:grid-cols-4">
          <div>
            <label className="text-xs font-medium text-slate-600">De</label>
            <input type="date" className="mt-1 w-full rounded-xl border px-4 py-2" value={from} onChange={(e) => onChangeFrom(e.target.value)} />
          </div>
          <div>
            <label className="text-xs font-medium text-slate-600">AtÃ©</label>
            <input type="date" className="mt-1 w-full rounded-xl border px-4 py-2" value={to} onChange={(e) => onChangeTo(e.target.value)} />
          </div>

          <div>
            <label className="text-xs font-medium text-slate-600">Tipo</label>
            <div className="mt-1 flex rounded-xl border p-1 text-xs">
              {(["ALL","ENTRADA","SAIDA"] as const).map((k) => (
                <button key={k}
                  className={`flex-1 rounded-lg px-3 py-1 ${tipoFilter===k ? "bg-slate-900 text-white" : "hover:bg-slate-50"}`}
                  onClick={() => { setTipoFilter(k); applyFilters(sourceRows, { tipo: k }); }}>
                  {k === "ALL" ? "Todos" : k === "ENTRADA" ? "Entradas (âˆ’)" : "SaÃ­das (+)"}
                </button>
              ))}
            </div>
          </div>

          <div>
            <label className="text-xs font-medium text-slate-600">Ordenar por</label>
            <select
              className="mt-1 w-full rounded-xl border px-3 py-2 text-sm"
              value={sort}
              onChange={(e) => { const v = e.target.value as typeof sort; setSort(v); applyFilters(sourceRows, { sort: v }); }}
            >
              <option value="date_desc">Data (recente â†’ antigo)</option>
              <option value="date_asc">Data (antigo â†’ recente)</option>
              <option value="value_desc">Valor (maior â†’ menor)</option>
              <option value="value_asc">Valor (menor â†’ maior)</option>
            </select>
          </div>
        </div>

        {/* Linha 3: Chips de perÃ­odo e botÃ£o Filtrar */}
        <div className="mt-3 flex flex-wrap items-center gap-2">
          {[
            { k: "today", label: "Hoje" },
            { k: "7d", label: "Ãšltimos 7d" },
            { k: "30d", label: "Ãšltimos 30d" },
            { k: "month", label: "Este mÃªs" },
            { k: "all", label: "Tudo" },
          ].map((b) => {
            const active = range === (b.k as any);
            return (
              <button key={b.k} onClick={() => quickRange(b.k as any)}
                className={[
                  "rounded-full px-3 py-1 text-xs transition-colors",
                  active ? "border-slate-900 bg-slate-900 text-white shadow-sm"
                         : "border border-slate-200 bg-white text-slate-700 hover:bg-slate-50",
                ].join(" ")}>
                {b.label}
              </button>
            );
          })}

          <div className="ml-auto flex items-center gap-3">
            <div className="text-xs text-slate-500">{rows.length} resultado(s)</div>
            <button onClick={() => applyFilters()} className="rounded-xl bg-blue-600 px-5 py-2 text-white hover:bg-blue-700 disabled:opacity-50" disabled={loading}>
              {loading ? "Carregandoâ€¦" : "Filtrar"}
            </button>
          </div>
        </div>
      </div>

      {/* Resumo por forma */}
      {rows.length > 0 && (
        <div className="rounded-2xl border bg-white p-4 shadow-sm">
          <div className="mb-2 text-sm font-semibold text-slate-700">Resumo por forma (visÃ£o atual)</div>
          <div className="grid gap-3 sm:grid-cols-2 lg:grid-cols-4">
            {resumoPorForma.map(([forma, v]) => (
              <div key={forma} className="rounded-xl border p-3">
                <div className="mb-1 flex items-center justify-between">
                  <Badge tone={formaTone(forma)}>{forma}</Badge>
                  <span className="text-[11px] text-slate-500">{v.count} reg.</span>
                </div>
                <div className="text-xs text-slate-600">
                  Entradas: <b className="text-rose-700">- {money(v.entradas)}</b>
                </div>
                <div className="text-xs text-slate-600">
                  SaÃ­das: <b className="text-emerald-700">+ {money(v.saidas)}</b>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Tabela */}
      <div className="overflow-auto rounded-2xl border bg-white shadow-sm">
        {error && <div className="border-b bg-rose-50 px-4 py-3 text-sm text-rose-700">{error}</div>}

        <table className="w-full text-sm">
          <thead className="sticky top-0 bg-slate-50">
            <tr className="text-left">
              <th className="border p-2">Cliente</th>
              <th className="border p-2">DireÃ§Ã£o</th>
              <th className="border p-2">Valor</th>
              <th className="border p-2">Forma</th>
              <th className="border p-2">Data</th>
              <th className="border p-2">Obs</th>
            </tr>
          </thead>
          <tbody className="[&>tr:nth-child(even)]:bg-slate-50/40">
            {loading &&
              Array.from({ length: 6 }).map((_, i) => (
                <tr key={`sk-${i}`} className="animate-pulse">
                  {Array.from({ length: 6 }).map((__, j) => (
                    <td key={j} className="border p-2"><div className="h-4 w-full max-w-[180px] rounded bg-slate-100" /></td>
                  ))}
                </tr>
              ))}

            {!loading &&
              rows.map((r) => {
                const nome = getClientName(r.cliente_id, r.cliente_nome);
                const isSaida = r.direcao === "SAIDA";
                const sign = isSaida ? "+" : "âˆ’";
                return (
                  <tr key={r.id} className="hover:bg-slate-50">
                    <td className="border p-2">
                      <div className="flex items-center gap-2">
                        <div className="grid h-8 w-8 shrink-0 place-items-center rounded-full bg-gradient-to-br from-slate-100 to-white text-xs font-medium ring-1 ring-slate-200">
                          {initials(nome)}
                        </div>
                        <div className="truncate font-medium">{nome || "â€”"}</div>
                      </div>
                    </td>
                    <td className="border p-2 whitespace-nowrap">
                      {isSaida ? <Badge tone="emerald">SAÃDA (+)</Badge> : <Badge tone="rose">ENTRADA (âˆ’)</Badge>}
                    </td>
                    <td className={`border p-2 font-semibold whitespace-nowrap ${isSaida ? "text-emerald-700" : "text-rose-700"}`}>
                      {sign} {money(Math.abs(r.valor_assinado))}
                    </td>
                    <td className="border p-2"><Badge tone={formaTone(r.forma_pagamento)}>{r.forma_pagamento}</Badge></td>
                    <td className="border p-2 whitespace-nowrap">{dtBR(r.criado_em)}</td>
                    <td className="border p-2">
                      {r.observacao ? <span className="line-clamp-2" title={r.observacao ?? ""}>{r.observacao}</span> : <span className="text-slate-400">â€”</span>}
                    </td>
                  </tr>
                );
              })}

            {!loading && rows.length === 0 && (
              <tr><td colSpan={6} className="p-10 text-center text-slate-500">Nenhum lanÃ§amento encontrado.</td></tr>
            )}
          </tbody>

          {!loading && rows.length > 0 && (
            <tfoot>
              <tr className="bg-slate-100/60">
                <td className="border p-2 text-right font-medium" colSpan={2}>
                  Totais ({rows.length} {rows.length === 1 ? "lanÃ§amento" : "lanÃ§amentos"}):
                </td>
                <td className={`border p-2 font-semibold ${saldo >= 0 ? "text-emerald-700" : "text-rose-700"}`}>
                  {saldo >= 0 ? "+" : "âˆ’"} {money(Math.abs(saldo))}
                </td>
                <td className="border p-2" colSpan={3}></td>
              </tr>
            </tfoot>
          )}
        </table>
      </div>
    </div>
  );
}

/* ==================== Visuais ==================== */
function StatCardDark({
  title,
  value,
  tone = "slate",
}: { title: string; value: string; tone?: "slate" | "emerald" | "rose"; }) {
  const tones: Record<string, string> = {
    slate: "bg-white/5 ring-white/10",
    emerald: "bg-emerald-400/10 ring-emerald-300/20",
    rose: "bg-rose-400/10 ring-rose-300/20",
  };
  return (
    <div className={`rounded-2xl px-4 py-3 ring-1 shadow-sm ${tones[tone]}`}>
      <div className="text-[11px] font-medium text-slate-300">{title}</div>
      <div className="mt-1 text-[22px] font-semibold tracking-tight text-white">{value}</div>
    </div>
  );
}


----- END frontend\src\components\HistoricoPagamentos.tsx -----


----- BEGIN frontend\src\components\Home.tsx -----

// src/components/Home.tsx
import { Link, useNavigate } from "react-router-dom";
import { useEffect, useMemo, useState, useCallback } from "react";
import api from "../services/api";

import Button from "./ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import Badge from "./ui/badge";

/** ======================= types & helpers ======================= */
type BlocoItem = {
  id: number;
  codigo: string;
  cliente?: string;
  status: "ABERTO" | "FECHADO";
  aberto_em?: string;
};

type SaldosBloco = {
  // possÃ­veis aliases retornados pelo backend
  saldo_bloco?: number;
  saldo?: number;
  saldo_total?: number;
  saldoDoBloco?: number;
  a_receber?: number;
  aReceber?: number;
  em_aberto?: number;
  emAberto?: number;
};

const currency = (n: number) =>
  Number(n || 0).toLocaleString("pt-BR", { style: "currency", currency: "BRL" });

function extractTotal(resp: any): number {
  const h = resp?.headers;
  const fromHeader = h?.["x-total-count"] ?? h?.["X-Total-Count"];
  if (fromHeader) return Number(fromHeader) || 0;
  const d = resp?.data;
  if (d && typeof d.total === "number") return d.total;
  if (d && typeof d.count === "number") return d.count;
  return Array.isArray(d) ? d.length : 0;
}

const formatDateTime = (iso?: string) =>
  iso
    ? new Date(iso).toLocaleString("pt-BR", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
      })
    : undefined;

const safeNumber = (v: any) => {
  const n = Number(v);
  return Number.isFinite(n) ? n : 0;
};

function pickNumber(o: any, ...aliases: string[]) {
  for (const k of aliases) {
    if (o && Object.prototype.hasOwnProperty.call(o, k)) {
      const n = safeNumber(o[k]);
      if (Number.isFinite(n)) return n;
    }
  }
  return 0;
}

/** ======================= pequenos componentes ======================= */

function SkeletonBox({ className = "" }: { className?: string }) {
  return <div className={`animate-pulse rounded-md bg-slate-200/70 ${className}`} />;
}

function MetricCard(props: {
  title: string;
  value: React.ReactNode;
  linkTo?: string;
  linkText?: string;
  icon?: React.ReactNode;
  loading?: boolean;
  "aria-live"?: "polite" | "assertive" | "off";
  tooltip?: string;
}) {
  const { title, value, linkTo, linkText = "ver", icon, loading, tooltip, ...a11y } = props;

  return (
    <Card aria-busy={loading} className="overflow-hidden">
      <CardHeader className="pb-2">
        <CardTitle className="text-slate-500 flex items-center gap-2">
          {icon && <span aria-hidden className="text-lg">{icon}</span>}
          <span title={tooltip}>{title}</span>
        </CardTitle>
      </CardHeader>

      <CardContent className="flex items-end justify-between pb-5">
        {/* altura maior + alinhamento pelo baseline para evitar â€œcorteâ€ */}
        <div className="min-h-[56px] sm:min-h-[64px] flex items-end overflow-visible" {...a11y}>
          {loading ? (
            <div className="w-32">
              <SkeletonBox className="h-8 w-full" />
            </div>
          ) : (
            <div className="font-extrabold leading-none tracking-tight break-words text-[clamp(1.25rem,2.6vw,2rem)]">
              {value}
            </div>
          )}
        </div>

        {linkTo && (
          <Link to={linkTo} className="text-blue-600 hover:underline text-sm">
            {linkText}
          </Link>
        )}
      </CardContent>
    </Card>
  );
}

function Shortcut({ to, label, icon }: { to: string; label: string; icon: React.ReactNode }) {
  const navigate = useNavigate();
  return (
    <Button
      variant="ghost"
      onClick={() => navigate(to)}
      className="flex items-center gap-2 px-3"
      title={label}
    >
      <span aria-hidden>{icon}</span>
      {label}
    </Button>
  );
}

/** ======== Charts ======== */

// Barras verticais (top 5 por exposiÃ§Ã£o)
function BarsChart({
  data,
  width = 420,
  height = 110,
}: {
  data: number[];
  width?: number;
  height?: number;
}) {
  if (!data.length) return null;

  const maxAbs = Math.max(1, ...data.map((v) => Math.abs(v)));
  const midY = height / 2;
  const barW = Math.max(6, Math.floor((width - 24) / data.length) - 8);

  return (
    <svg width={width} height={height} className="block">
      <line x1="0" y1={midY} x2={width} y2={midY} stroke="#e2e8f0" />
      {data.map((v, i) => {
        const x = 12 + i * (barW + 8);
        const h = (Math.abs(v) / maxAbs) * (height / 2 - 10);
        const isPos = v >= 0;
        const y = isPos ? midY - h : midY;
        const fill = isPos ? "#10b981" : "#ef4444";
        return <rect key={i} x={x} y={y} width={barW} height={h} rx="3" fill={fill} opacity="0.9" />;
      })}
    </svg>
  );
}

// Donut simples (mostra a composiÃ§Ã£o do total financeiro)
function DonutChart({
  a,
  b,
  size = 180,
  labels = ["DÃ©bito blocos", "A receber"],
}: {
  a: number; // dÃ©bito positivo
  b: number; // a receber
  size?: number;
  labels?: [string, string] | string[];
}) {
  const total = Math.max(0, a) + Math.max(0, b);
  const r = size / 2;
  const stroke = 18;
  const radius = r - stroke / 2;
  const circumference = 2 * Math.PI * radius;
  const aLen = total ? (Math.max(0, a) / total) * circumference : 0;
  const bLen = total ? (Math.max(0, b) / total) * circumference : 0;

  return (
    <div className="flex flex-col md:flex-row md:items-center gap-4">
      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>
        <circle cx={r} cy={r} r={radius} stroke="#e2e8f0" strokeWidth={stroke} fill="none" />
        {/* A (DÃ©bito) */}
        <circle
          cx={r}
          cy={r}
          r={radius}
          stroke="#ef4444"
          strokeWidth={stroke}
          fill="none"
          strokeDasharray={`${aLen} ${circumference - aLen}`}
          strokeDashoffset={circumference * 0.25}
        />
        {/* B (A receber) */}
        <circle
          cx={r}
          cy={r}
          r={radius}
          stroke="#f59e0b"
          strokeWidth={stroke}
          fill="none"
          strokeDasharray={`${bLen} ${circumference - bLen}`}
          strokeDashoffset={circumference * 0.25 - aLen}
        />
        <text x="50%" y="50%" dominantBaseline="central" textAnchor="middle" fontSize="14" fill="#334155">
          {currency(total)}
        </text>
      </svg>

      <div className="space-y-2 text-sm">
        <div className="flex items-center gap-2">
          <span className="inline-block h-3 w-3 rounded-sm" style={{ background: "#ef4444" }} />
          <span className="text-slate-600">{labels[0]}:</span>
          <strong className="text-slate-800">{currency(a)}</strong>
        </div>
        <div className="flex items-center gap-2">
          <span className="inline-block h-3 w-3 rounded-sm" style={{ background: "#f59e0b" }} />
          <span className="text-slate-600">{labels[1]}:</span>
          <strong className="text-slate-800">{currency(b)}</strong>
        </div>
        <div className="pt-1 text-xs text-slate-500">
          Total = {currency(total)} (bate com â€œFinanceiro (abertos)â€)
        </div>
      </div>
    </div>
  );
}

/** ======================= pÃ¡gina ======================= */

export default function Home() {
  const navigate = useNavigate();

  const [clientesTotal, setClientesTotal] = useState<number>(0);
  const [blocosAbertosTotal, setBlocosAbertosTotal] = useState<number>(0);

  // totais (TODOS os blocos ABERTOS)
  const [saldoBlocoTotal, setSaldoBlocoTotal] = useState<number>(0);
  const [debitoBlocoTotal, setDebitoBlocoTotal] = useState<number>(0); // |saldo negativo|
  const [financeiroTotal, setFinanceiroTotal] = useState<number>(0); // **DEBITO + A_RECEBER**
  const [aReceberTotal, setAReceberTotal] = useState<number>(0);

  // UI
  const [blocosRecentes, setBlocosRecentes] = useState<BlocoItem[]>([]);
  const [bars, setBars] = useState<number[]>([]);

  const [loading, setLoading] = useState<boolean>(true);
  const [err, setErr] = useState<string | null>(null);

  /** ====== data ====== */

  async function fetchAllBlocosAbertos(limit = 50): Promise<any[]> {
    let page = 1;
    let total = 0;
    const all: any[] = [];

    const first = await api.get("/blocos", {
      params: { status: "ABERTO", page, limit, sortBy: "aberto_em", sortDir: "DESC" },
    });
    total = extractTotal(first);
    all.push(...(first.data?.data ?? first.data ?? []));

    const pages = Math.ceil(total / limit);
    while (page < pages) {
      page += 1;
      const r = await api.get("/blocos", {
        params: { status: "ABERTO", page, limit, sortBy: "aberto_em", sortDir: "DESC" },
        headers: { "x-silent": "1" },
      });
      all.push(...(r.data?.data ?? r.data ?? []));
    }

    const recentes = (all.slice(0, 5) as any[]).map((b) => ({
      id: b.id,
      codigo: b.codigo,
      cliente: b.cliente_nome ?? b.cliente?.nome_fantasia ?? b.cliente ?? "",
      status: b.status,
      aberto_em: formatDateTime(b.aberto_em),
    })) as BlocoItem[];
    setBlocosRecentes(recentes);

    setBlocosAbertosTotal(total || all.length);
    return all;
  }

  type Row = { blocoId: number; saldoBloco: number; aReceber: number; exposicao: number };

  async function fetchFinanceiroRows(blocosAbertos: any[]): Promise<Row[]> {
    const saldosResp = await Promise.allSettled(
      blocosAbertos.map((b: any) => api.get(`/blocos/${b.id}/saldos`, { headers: { "x-silent": "1" } }))
    );

    const rows: Row[] = [];

    saldosResp.forEach((r, i) => {
      if (r.status !== "fulfilled") return;
      const raw = (r.value?.data ?? {}) as SaldosBloco;

      const saldoBloco = pickNumber(raw, "saldo_bloco", "saldoDoBloco", "saldo_total", "saldo");
      const aReceberBloco = pickNumber(raw, "a_receber", "aReceber", "em_aberto", "emAberto");

      // â€œexposiÃ§Ã£oâ€ por bloco, usada no grÃ¡fico Top 5
      const exposicao = Math.max(0, -saldoBloco) + aReceberBloco;

      rows.push({
        blocoId: blocosAbertos[i].id,
        saldoBloco,
        aReceber: aReceberBloco,
        exposicao,
      });
    });

    return rows;
  }

  async function fetchAReceberTotal(): Promise<number> {
    try {
      const r = await api.get("/financeiro/receber/resumo", {
        params: { status: "ABERTO,PARCIAL" },
        headers: { "x-silent": "1" },
      });
      const v = pickNumber(r.data, "a_receber", "aReceber", "total", "valor", "valor_total") || 0;
      if (v > 0) return v;
    } catch {
      /* ignore */
    }

    // fallback por paginaÃ§Ã£o (se nÃ£o existir /resumo)
    async function sumFrom(path: string): Promise<number> {
      const limit = 100;
      let page = 1;
      let total = 0;
      let soma = 0;

      const sumPage = (resp: any) => {
        const rows = resp?.data?.data ?? resp?.data ?? [];
        for (const it of rows) {
          const pronto = pickNumber(it, "em_aberto", "emAberto", "a_receber", "aReceber");
          if (pronto) {
            soma += pronto;
            continue;
          }
          const bruto = pickNumber(it, "valor_bruto", "valorBruto", "valor");
          const baixado = pickNumber(it, "valor_baixado", "valorBaixado", "baixado");
          soma += Math.max(0, bruto - baixado);
        }
      };

      const first = await api.get(path, {
        params: { page, limit, status: "ABERTO,PARCIAL" },
        headers: { "x-silent": "1" },
      });
      total = extractTotal(first);
      sumPage(first);

      const pages = Math.ceil(total / limit);
      while (page < pages) {
        page += 1;
        const resp = await api.get(path, {
          params: { page, limit, status: "ABERTO,PARCIAL" },
          headers: { "x-silent": "1" },
        });
        sumPage(resp);
      }
      return soma;
    }

    try {
      const v = await sumFrom("/financeiro/receber");
      if (v > 0) return v;
    } catch {}
    try {
      const v = await sumFrom("/financeiro/titulos");
      if (v > 0) return v;
    } catch {}

    return 0;
  }

  const carregarDashboard = useCallback(async () => {
    setLoading(true);
    setErr(null);
    try {
      // 1) total de clientes
      const respClientes = await api.get("/clientes", { params: { page: 1, limit: 1 } });
      setClientesTotal(extractTotal(respClientes));

      // 2) blocos abertos (todos)
      const blocosAbertos = await fetchAllBlocosAbertos(50);

      // 3) saldos por bloco + total a receber (global)
      const [rows, totalARec] = await Promise.all([fetchFinanceiroRows(blocosAbertos), fetchAReceberTotal()]);
      setAReceberTotal(totalARec);

      // totais de blocos
      const totalSaldoBloco = rows.reduce((sum, r) => sum + r.saldoBloco, 0);
      const totalDebito = rows.reduce((sum, r) => sum + Math.max(0, -r.saldoBloco), 0);

      setSaldoBlocoTotal(totalSaldoBloco);
      setDebitoBlocoTotal(totalDebito);

      // *** REGRA SOLICITADA ***
      // Financeiro (abertos) = DÃ©bito dos blocos (positivo) + A receber (abertos)
      setFinanceiroTotal(totalDebito + totalARec);

      // Top 5 por exposiÃ§Ã£o (usa cÃ¡lculo por bloco)
      const top5 = rows
        .slice()
        .sort((a, b) => Math.abs(b.exposicao) - Math.abs(a.exposicao))
        .slice(0, 5)
        .map((r) => r.exposicao);
      setBars(top5);
    } catch (e: any) {
      console.error("Erro no dashboard:", e);
      const msg = e?.response?.data?.message || e?.message || "Falha ao carregar o dashboard.";
      setErr(msg);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    carregarDashboard();
  }, [carregarDashboard]);

  const resumo = useMemo(
    () => ({
      clientes: clientesTotal,
      blocosAbertos: blocosAbertosTotal,
      saldoBlocoTotal,
      financeiroTotal,
      aReceberTotal,
      debitoBlocoTotal,
    }),
    [clientesTotal, blocosAbertosTotal, saldoBlocoTotal, financeiroTotal, aReceberTotal, debitoBlocoTotal]
  );

  return (
    <div className="space-y-8">
      {/* hero */}
      <section className="rounded-3xl bg-gradient-to-r from-slate-900 via-slate-800 to-slate-700 text-white px-6 py-6 shadow-md">
        <div className="flex flex-col gap-6 md:flex-row md:items-end md:justify-between">
          <div>
            <h2 className="text-2xl font-semibold tracking-tight">Bem-vindo</h2>
            <p className="mt-1 text-slate-300">VisÃ£o geral do financeiro e acessos rÃ¡pidos.</p>
          </div>
          <div className="flex gap-3">
            <Button
              variant="outline"
              className="bg-white/10 text-white hover:bg-white/20 border-white/30"
              onClick={() => navigate("/blocos")}
            >
              Abrir blocos
            </Button>
            <Button className="bg-blue-600 hover:bg-blue-700" onClick={() => navigate("/financeiro/receber")}>
              Ir ao Financeiro
            </Button>
          </div>
        </div>
      </section>

      {/* erro com aÃ§Ã£o */}
      {err && (
        <div className="rounded-lg border border-red-200 bg-red-50 p-3 text-red-700 flex items-center justify-between gap-3">
          <span>{err}</span>
          <Button variant="outline" onClick={carregarDashboard}>
            Tentar novamente
          </Button>
        </div>
      )}

      {/* mÃ©tricas */}
      <section className="grid gap-5 [grid-template-columns:repeat(auto-fit,minmax(220px,1fr))]">
        <MetricCard
          title="Clientes"
          icon="ðŸ‘¥"
          loading={loading}
          value={<p className="text-3xl md:text-4xl font-bold whitespace-nowrap">{resumo.clientes}</p>}
          linkTo="/clientes"
          linkText="Ver clientes"
          aria-live="polite"
        />

        <MetricCard
          title="Blocos abertos"
          icon="ðŸ§©"
          loading={loading}
          value={<p className="text-3xl md:text-4xl font-bold whitespace-nowrap">{resumo.blocosAbertos}</p>}
          linkTo="/blocos"
          linkText="Ver blocos"
          aria-live="polite"
        />

        <MetricCard
          title="Saldo do bloco (abertos)"
          icon="ðŸ“Š"
          loading={loading}
          value={
            <span className={saldoBlocoTotal < 0 ? "text-rose-600" : "text-emerald-600"}>
              {currency(saldoBlocoTotal)}
            </span>
          }
        />

        <MetricCard
          title="Financeiro (abertos)"
          icon="ðŸ’°"
          loading={loading}
          tooltip="DÃ©bito dos blocos (|saldo negativo|) + A receber (abertos)."
          value={<span className="text-emerald-600">{currency(resumo.financeiroTotal)}</span>}
        />

        <MetricCard
          title="A receber (abertos)"
          icon="ðŸ“¥"
          loading={loading}
          value={<span className="text-amber-700">{currency(resumo.aReceberTotal)}</span>}
        />
      </section>

      {/* ComposiÃ§Ã£o do financeiro (deve bater com o card) */}
      <section>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-slate-600">ComposiÃ§Ã£o do financeiro (abertos)</CardTitle>
          </CardHeader>
          <CardContent className="pt-2">
            {loading ? (
              <SkeletonBox className="h-44 w-full" />
            ) : (
              <DonutChart a={resumo.debitoBlocoTotal} b={resumo.aReceberTotal} />
            )}
          </CardContent>
        </Card>
      </section>

      {/* grÃ¡fico rÃ¡pido â€“ Top 5 blocos por exposiÃ§Ã£o */}
      <section>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-slate-600">Top 5 blocos por exposiÃ§Ã£o (financeiro)</CardTitle>
          </CardHeader>
          <CardContent className="pt-1">
            {loading ? (
              <SkeletonBox className="h-28 w-full" />
            ) : bars.length ? (
              <div className="overflow-x-auto">
                <BarsChart data={bars} />
                <div className="mt-2 flex items-center gap-3 text-xs text-slate-500">
                  <span className="inline-flex items-center gap-1">
                    <span className="inline-block h-2 w-2 rounded bg-emerald-500" /> positivo
                  </span>
                  <span className="inline-flex items-center gap-1">
                    <span className="inline-block h-2 w-2 rounded bg-rose-500" /> negativo
                  </span>
                </div>
              </div>
            ) : (
              <div className="text-slate-500">Sem dados para exibir.</div>
            )}
          </CardContent>
        </Card>
      </section>

      {/* atalhos */}
      <section>
        <Card>
          <CardHeader>
            <CardTitle className="text-slate-600">Acessos rÃ¡pidos</CardTitle>
          </CardHeader>
          <CardContent className="flex flex-wrap gap-3">
            <Shortcut to="/blocos" label="Blocos" icon="ðŸ§©" />
            <Shortcut to="/clientes" label="Clientes" icon="ðŸ‘¥" />
            <Shortcut to="/financeiro/receber" label="Financeiro" icon="ðŸ’¸" />
            <Shortcut to="/conferencia" label="ConferÃªncia" icon="âœ…" />
            <Shortcut to="/transportadoras" label="Transportadoras" icon="ðŸšš" />
          </CardContent>
        </Card>
      </section>

      {/* blocos recentes */}
      <section>
        <div className="mb-3 flex items-center justify-between">
          <h3 className="text-lg font-semibold text-slate-800">Blocos abertos (recentes)</h3>
          <Link to="/blocos" className="text-sm text-blue-600 hover:underline">
            ver todos
          </Link>
        </div>

        <Card>
          <CardContent className="p-0">
            {/* Tabela desktop */}
            <div className="hidden overflow-x-auto sm:block">
              <table className="min-w-full text-sm">
                <thead>
                  <tr className="border-b border-slate-200 bg-slate-50 text-left text-slate-600">
                    <th className="px-4 py-3">Cliente</th>
                    <th className="px-4 py-3">Status</th>
                    <th className="px-4 py-3">Aberto em</th>
                    <th className="w-28 px-4 py-3">AÃ§Ãµes</th>
                  </tr>
                </thead>
                <tbody>
                  {loading &&
                    Array.from({ length: 3 }).map((_, i) => (
                      <tr key={`sk-${i}`} className="border-b last:border-0">
                        <td className="px-4 py-3">
                          <SkeletonBox className="h-4 w-48" />
                        </td>
                        <td className="px-4 py-3">
                          <SkeletonBox className="h-6 w-20 rounded-full" />
                        </td>
                        <td className="px-4 py-3">
                          <SkeletonBox className="h-4 w-36" />
                        </td>
                        <td className="px-4 py-3">
                          <SkeletonBox className="h-4 w-14" />
                        </td>
                      </tr>
                    ))}

                  {!loading &&
                    blocosRecentes.map((b) => (
                      <tr key={b.id} className="border-b last:border-0 hover:bg-slate-50">
                        <td className="px-4 py-3">{b.cliente ?? "-"}</td>
                        <td className="px-4 py-3">
                          <Badge tone={b.status === "ABERTO" ? "success" : "neutral"}>{b.status}</Badge>
                        </td>
                        <td className="px-4 py-3 text-slate-600">{b.aberto_em ?? "-"}</td>
                        <td className="px-4 py-3">
                          <Link to={`/blocos/${b.id}`} className="text-blue-600 hover:underline">
                            Abrir
                          </Link>
                        </td>
                      </tr>
                    ))}

                  {!loading && blocosRecentes.length === 0 && (
                    <tr>
                      <td className="px-4 py-6 text-slate-500" colSpan={6}>
                        Nenhum bloco aberto encontrado.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>

            {/* Lista mobile */}
            <div className="divide-y sm:hidden">
              {loading &&
                Array.from({ length: 3 }).map((_, i) => (
                  <div key={`skm-${i}`} className="p-4 space-y-2">
                    <SkeletonBox className="h-4 w-40" />
                    <SkeletonBox className="h-4 w-24" />
                    <SkeletonBox className="h-8 w-20 rounded-md" />
                  </div>
                ))}

              {!loading &&
                blocosRecentes.map((b) => (
                  <div key={b.id} className="p-4">
                    <div className="font-medium">{b.cliente ?? "-"}</div>
                    <div className="mt-1 text-sm text-slate-600">{b.aberto_em ?? "-"}</div>
                    <div className="mt-3 flex items-center justify-between">
                      <Badge tone={b.status === "ABERTO" ? "success" : "neutral"}>{b.status}</Badge>
                      <Button size="sm" variant="outline" onClick={() => navigate(`/blocos/${b.id}`)}>
                        Abrir
                      </Button>
                    </div>
                  </div>
                ))}

              {!loading && blocosRecentes.length === 0 && (
                <div className="p-6 text-slate-500">Nenhum bloco aberto encontrado.</div>
              )}
            </div>
          </CardContent>
        </Card>
      </section>
    </div>
  );
}


----- END frontend\src\components\Home.tsx -----


----- BEGIN frontend\src\components\Login.tsx -----

// src/components/Login.tsx
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import api from "../services/api";
import { useAuth } from "../contexts/AuthContext";

const Login: React.FC = () => {
  const [email, setEmail] = useState("");
  const [senha, setSenha] = useState("");
  const [error, setError] = useState<string>("");
  const [loading, setLoading] = useState(false);

  const navigate = useNavigate();
  const auth = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setLoading(true);

    try {
      const { data } = await api.post("/auth/login", { email, senha });
      const { token, user } = data;

      localStorage.setItem("token", token);
      localStorage.setItem("user", JSON.stringify(user));

      auth?.setIsAuthenticated(true);
      auth?.setUser(user);

      navigate("/");
    } catch (err: any) {
      const msg =
        err?.response?.data?.message ||
        err?.response?.data?.error ||
        err?.message ||
        "Credenciais invÃ¡lidas";
      setError(msg);
      console.error("Erro no login:", err);
    } finally {
      setLoading(false);
    }
  };

  const apiBase = api.defaults.baseURL ?? "";

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Acesse sua conta
        </h2>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          <form className="space-y-6" onSubmit={handleSubmit}>
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <div className="mt-1">
                <input
                  id="email"
                  name="email"
                  type="email"
                  autoComplete="email"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                />
              </div>
            </div>

            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Senha
              </label>
              <div className="mt-1">
                <input
                  id="password"
                  name="password"
                  type="password"
                  autoComplete="current-password"
                  required
                  value={senha}
                  onChange={(e) => setSenha(e.target.value)}
                  className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                />
              </div>
            </div>

            {error && (
              <p className="text-sm text-red-600 bg-red-50 border border-red-200 rounded p-2">
                {error}
              </p>
            )}

            <div>
              <button
                type="submit"
                disabled={loading}
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white
                           bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500
                           disabled:opacity-70 disabled:cursor-not-allowed"
              >
                {loading ? "Entrando..." : "Entrar"}
              </button>
            </div>
          </form>

          <p className="mt-4 text-xs text-gray-400 text-center">
            API: <code>{apiBase}</code>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Login;


----- END frontend\src\components\Login.tsx -----


----- BEGIN frontend\src\components\PagamentoForm.tsx -----

// src/components/PagamentoForm.tsx
import { useEffect, useMemo, useRef, useState } from "react";
import api from "../services/api";

type Cliente = { id: number; nome_fantasia: string };
// aceita tanto o formato com "nome" quanto "descricao" e (opcional) "ativo"
type Forma = { id: number; nome?: string; descricao?: string; ativo?: boolean };

export default function PagamentoForm() {
  // ====== estado principal ======
  const [clienteInput, setClienteInput] = useState("");
  const [clienteId, setClienteId] = useState<number | "">("");
  const [valor, setValor] = useState<string>(""); // string para facilitar digitaÃ§Ã£o
  const [forma, setForma] = useState<string>("PIX");
  const [obs, setObs] = useState("");
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [ok, setOk] = useState(false);

  // ====== auto-complete de cliente ======
  const [cliOpen, setCliOpen] = useState(false);
  const [cliOpts, setCliOpts] = useState<Cliente[]>([]);
  const cliBoxRef = useRef<HTMLDivElement>(null);
  const debouncedSearch = useDebounce(clienteInput, 250);

  useEffect(() => {
    function onClickOutside(e: MouseEvent) {
      if (!cliBoxRef.current?.contains(e.target as Node)) setCliOpen(false);
    }
    document.addEventListener("mousedown", onClickOutside);
    return () => document.removeEventListener("mousedown", onClickOutside);
  }, []);

  useEffect(() => {
    if (debouncedSearch.trim().length < 2 || clienteId !== "") {
      setCliOpts([]);
      return;
    }
    let cancel = false;
    (async () => {
      try {
        const { data } = await api.get("/clientes", {
          params: { search: debouncedSearch, limit: 10 },
        });
        if (cancel) return;
        const list: Cliente[] = (data?.data ?? data ?? []).slice(0, 10);
        setCliOpts(list);
        setCliOpen(list.length > 0);
      } catch {
        // silencioso
      }
    })();
    return () => {
      cancel = true;
    };
  }, [debouncedSearch, clienteId]);

  function selectCliente(c: Cliente) {
    setClienteInput(c.nome_fantasia);
    setClienteId(c.id);
    setCliOpen(false);
  }
  function clearCliente() {
    setClienteInput("");
    setClienteId("");
    setCliOpts([]);
    setCliOpen(false);
  }

  // ====== formas (carrega do backend; cai no default se falhar) ======
  const [formas, setFormas] = useState<string[]>([]);
  useEffect(() => {
    (async () => {
      try {
        const { data } = await api.get("/pagamentos/formas");
        const list = (data?.data ?? data ?? []) as Forma[];

        const valores = list
          .filter((f) => (f.ativo === undefined ? true : !!f.ativo))
          .map((f) => (f.nome ?? f.descricao ?? "").trim())
          .filter(Boolean);

        if (valores.length) {
          setFormas(valores);
          setForma((prev) => (valores.includes(prev) ? prev : valores[0]));
          return;
        }
      } catch {
        /* falhou -> fallback abaixo */
      }

      const fallback = ["PIX", "BOLETO", "DINHEIRO"];
      setFormas(fallback);
      setForma((prev) => (fallback.includes(prev) ? prev : fallback[0]));
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // ====== submit ======
  const valorNumber = useMemo(() => {
    const normalized = valor.replace(/\./g, "").replace(",", ".").trim();
    const n = Number(normalized);
    return Number.isFinite(n) ? n : NaN;
  }, [valor]);

  async function save(e: React.FormEvent) {
    e.preventDefault();
    setError(null);
    setOk(false);

    if (clienteId === "") {
      setError("Selecione um cliente.");
      return;
    }
    if (!valor || Number.isNaN(valorNumber) || valorNumber <= 0) {
      setError("Informe um valor vÃ¡lido.");
      return;
    }

    setSaving(true);
    try {
      await api.post("/pagamentos", {
        cliente_id: Number(clienteId),
        valor: valorNumber,
        forma_pagamento: forma,
        observacao: obs || null,
      });
      clearCliente();
      setValor("");
      setObs("");
      setOk(true);
    } catch (e: any) {
      setError(e?.response?.data?.message || "Falha ao lanÃ§ar pagamento.");
    } finally {
      setSaving(false);
    }
  }

  function onValorBlur() {
    const n = valorNumber;
    if (!Number.isNaN(n) && n >= 0) {
      setValor(
        n.toLocaleString("pt-BR", {
          minimumFractionDigits: 2,
          maximumFractionDigits: 2,
        })
      );
    }
  }

  return (
    <div className="mx-auto max-w-3xl">
      <div className="mb-4">
        <h1 className="text-xl font-semibold">LanÃ§ar pagamento</h1>
        <p className="text-sm text-slate-500">Selecione o cliente, informe o valor e a forma de pagamento.</p>
      </div>

      <form onSubmit={save} className="rounded-2xl border bg-white shadow-sm">
        {(error || ok) && (
          <div className="p-4 border-b">
            {error && <div className="text-sm text-red-700 bg-red-50 border border-red-200 rounded p-3">{error}</div>}
            {ok && (
              <div className="text-sm text-emerald-700 bg-emerald-50 border-emerald-200 border rounded p-3">
                Pagamento lanÃ§ado com sucesso!
              </div>
            )}
          </div>
        )}

        <div className="grid grid-cols-1 gap-6 p-5 lg:grid-cols-12">
          {/* Cliente */}
          <section className="lg:col-span-12 space-y-2" ref={cliBoxRef}>
            <label className="text-sm text-slate-700">Cliente</label>
            <div className="relative">
              <input
                className="mt-1 border rounded px-3 py-2 w-full pr-24 focus:outline-none focus:ring-2 focus:ring-blue-200"
                placeholder="Digite para buscar pelo nomeâ€¦"
                value={clienteInput}
                onChange={(e) => {
                  setClienteInput(e.target.value);
                  if (clienteId !== "") setClienteId("");
                }}
                onFocus={() => {
                  if (cliOpts.length > 0) setCliOpen(true);
                }}
                required
              />
              {(clienteId !== "" || clienteInput) && (
                <button
                  type="button"
                  className="absolute right-2 top-1/2 -translate-y-1/2 text-xs px-2 py-1 rounded border bg-white hover:bg-slate-50"
                  onClick={clearCliente}
                  title="Limpar"
                >
                  Limpar
                </button>
              )}
              {cliOpen && cliOpts.length > 0 && (
                <div className="absolute z-10 mt-1 w-full rounded-md border bg-white shadow-lg max-h-64 overflow-auto">
                  {cliOpts.map((c) => (
                    <button
                      key={c.id}
                      type="button"
                      className="block w-full text-left px-3 py-2 hover:bg-slate-50"
                      onClick={() => selectCliente(c)}
                    >
                      <div className="font-medium">{c.nome_fantasia}</div>
                      <div className="text-xs text-slate-500">#{c.id}</div>
                    </button>
                  ))}
                </div>
              )}
            </div>
            {clienteId !== "" && (
              <div className="text-xs text-slate-600">
                Selecionado: <b>#{clienteId}</b>
              </div>
            )}
          </section>

          {/* Valor / Forma */}
          <section className="lg:col-span-6 space-y-2">
            <label className="text-sm text-slate-700">Valor</label>
            <input
              className="mt-1 border rounded px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-200"
              inputMode="decimal"
              placeholder="0,00"
              value={valor}
              onChange={(e) => setValor(e.target.value)}
              onBlur={onValorBlur}
              required
            />
            <p className="text-xs text-slate-500">Use vÃ­rgula ou ponto para decimais.</p>
          </section>

          <section className="lg:col-span-6 space-y-2">
            <label className="text-sm text-slate-700">Forma</label>
            <select className="mt-1 border rounded px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-200" value={forma} onChange={(e) => setForma(e.target.value)}>
              {formas.map((f) => (
                <option key={f} value={f}>
                  {f}
                </option>
              ))}
            </select>
          </section>

          {/* ObservaÃ§Ã£o */}
          <section className="lg:col-span-12 space-y-2">
            <label className="text-sm text-slate-700">ObservaÃ§Ã£o</label>
            <input className="mt-1 border rounded px-3 py-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-200" value={obs} onChange={(e) => setObs(e.target.value)} placeholder="opcional" />
          </section>
        </div>

        <div className="flex items-center gap-2 border-t p-4">
          <button type="submit" disabled={saving} className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50">
            {saving ? "Salvandoâ€¦" : "Salvar"}
          </button>
          <button
            type="button"
            onClick={() => {
              clearCliente();
              setValor("");
              setObs("");
              setError(null);
              setOk(false);
            }}
            className="px-4 py-2 bg-slate-100 rounded-md hover:bg-slate-200"
          >
            Limpar
          </button>
        </div>
      </form>
    </div>
  );
}

/** Debounce simples para texto */
function useDebounce<T>(value: T, ms = 300) {
  const [v, setV] = useState(value);
  useEffect(() => {
    const t = setTimeout(() => setV(value), ms);
    return () => clearTimeout(t);
  }, [value, ms]);
  return v;
}


----- END frontend\src\components\PagamentoForm.tsx -----


----- BEGIN frontend\src\components\PedidoParametrosPage.tsx -----

import { useEffect, useMemo, useState } from "react";
import api from "../services/api";

type TipoParam = "ENTRADA" | "SAIDA";
type Param = {
  id: number;
  tipo: TipoParam;
  descricao: string;
  ativo: boolean;
  exige_bom_para?: boolean;
  exige_tipo_cheque?: boolean;
  created_at?: string;
};

export default function PedidoParametrosPage() {
  const [rows, setRows] = useState<Param[]>([]);
  const [descricao, setDescricao] = useState("");
  const [tipoNovo, setTipoNovo] = useState<TipoParam>("ENTRADA");
  const [tab, setTab] = useState<"todos" | TipoParam>("todos");
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [filter, setFilter] = useState("");
  const [flagBomPara, setFlagBomPara] = useState(false);
  const [flagTipoCheque, setFlagTipoCheque] = useState(false);

  const filtered = useMemo(() => {
    const q = filter.trim().toLowerCase();
    return rows
      .filter((r) => (tab === "todos" ? true : r.tipo === tab))
      .filter((r) =>
        !q
          ? true
          : r.descricao.toLowerCase().includes(q) ||
            String(r.id).includes(q) ||
            r.tipo.toLowerCase().includes(q) ||
            (r.ativo ? "sim" : "nÃ£o").includes(q)
      );
  }, [rows, filter, tab]);

  async function load() {
    setLoading(true);
    setError(null);
    try {
      const params = new URLSearchParams();
      if (tab !== "todos") params.set("tipo", tab);
      params.set("ativo", "all");
      const { data } = await api.get(`/pedido-parametros?${params.toString()}`);
      setRows(Array.isArray(data) ? data : data?.data ?? []);
    } catch (e: any) {
      setError(e?.response?.data?.message || "Falha ao carregar parÃ¢metros.");
      setRows([]);
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    load();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [tab]);

  async function save() {
    if (!descricao.trim()) return;
    setSaving(true);
    setError(null);
    try {
      await api.post("/pedido-parametros", {
        tipo: tipoNovo,
        descricao: descricao.trim(),
        exige_bom_para: flagBomPara,
        exige_tipo_cheque: flagTipoCheque,
      });
      setDescricao("");
      setFlagBomPara(false);
      setFlagTipoCheque(false);
      await load();
    } catch (e: any) {
      const msg =
        e?.response?.data?.message ||
        (e?.response?.status === 409
          ? "JÃ¡ existe um parÃ¢metro com essa descriÃ§Ã£o."
          : "NÃ£o foi possÃ­vel cadastrar.");
      setError(msg);
    } finally {
      setSaving(false);
    }
  }

  async function toggleAtivo(p: Param) {
    const prev = [...rows];
    setRows((list) => list.map((x) => (x.id === p.id ? { ...x, ativo: !x.ativo } : x)));
    try {
      await api.patch(`/pedido-parametros/${p.id}/toggle`);
    } catch {
      setRows(prev);
      alert("NÃ£o foi possÃ­vel atualizar o status. Tente novamente.");
    }
  }

  async function handleDelete(p: Param) {
    const ok = confirm(
      `Excluir o parÃ¢metro "${p.descricao}" (${p.tipo})?\n\nEsta aÃ§Ã£o Ã© irreversÃ­vel.`
    );
    if (!ok) return;
    try {
      await api.delete(`/pedido-parametros/${p.id}`);
      await load();
    } catch (e: any) {
      alert(e?.response?.data?.message || "NÃ£o foi possÃ­vel excluir o parÃ¢metro.");
    }
  }

  function onKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {
    if (e.key === "Enter" && descricao.trim() && !saving) save();
  }

  const chipTipo = (tipo: TipoParam) =>
    [
      "inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold border",
      tipo === "SAIDA"
        ? "bg-emerald-50 text-emerald-700 border-emerald-200"
        : "bg-rose-50 text-rose-700 border-rose-200",
    ].join(" ");

  const pill = (yes: boolean) =>
    [
      "inline-flex items-center justify-center rounded-full px-2.5 py-0.5 text-xs font-semibold border",
      yes
        ? "bg-indigo-50 text-indigo-700 border-indigo-200"
        : "bg-slate-100 text-slate-600 border-slate-200",
    ].join(" ");

  return (
    <div className="space-y-5">
      {/* header */}
      <div className="flex flex-wrap items-center justify-between gap-3">
        <div className="flex items-center gap-3">
          <div className="h-9 w-9 rounded-xl bg-gradient-to-br from-indigo-500 to-violet-600 text-white grid place-items-center shadow-sm">
            <svg width="18" height="18" viewBox="0 0 24 24" className="opacity-95">
              <path
                fill="currentColor"
                d="M3 5a2 2 0 0 1 2-2h3.5a2 2 0 0 1 1.6.8l1.8 2.4H19a2 2 0 0 1 2 2v9.8A2 2 0 0 1 19 20H5a2 2 0 0 1-2-2V5Z"
              />
            </svg>
          </div>
          <div>
            <h1 className="text-xl font-semibold text-slate-900">ParÃ¢metros do pedido</h1>
            <p className="text-xs text-slate-500">Organize os tipos de lanÃ§amento usados nos blocos</p>
          </div>
        </div>

        <div className="relative">
          <input
            className="border border-slate-200 rounded-xl px-3.5 py-2.5 pr-10 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500/40 focus:border-indigo-500/60 placeholder:text-slate-400"
            placeholder="Filtrar (id, tipo, descriÃ§Ã£o, ativo)"
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
          />
          <span className="absolute right-2.5 top-1/2 -translate-y-1/2 text-slate-400">
            <svg width="18" height="18" viewBox="0 0 24 24">
              <path
                fill="currentColor"
                d="m21 20.3l-5.4-5.4a7.4 7.4 0 1 0-1.7 1.7L20.3 22L21 20.3ZM5.5 10a4.5 4.5 0 1 1 9 0a4.5 4.5 0 0 1-9 0Z"
              />
            </svg>
          </span>
        </div>
      </div>

      {/* abas */}
      <div className="flex gap-2">
        {(["todos", "ENTRADA", "SAIDA"] as const).map((t) => {
          const isActive = tab === t;
          const base =
            "px-3.5 py-2 rounded-xl text-sm font-medium border transition-all shadow-sm";
          const styles =
            t === "SAIDA"
              ? isActive
                ? "bg-emerald-600 text-white border-emerald-600"
                : "bg-emerald-50 text-emerald-700 border-emerald-200 hover:bg-emerald-100"
              : t === "ENTRADA"
              ? isActive
                ? "bg-rose-600 text-white border-rose-600"
                : "bg-rose-50 text-rose-700 border-rose-200 hover:bg-rose-100"
              : isActive
              ? "bg-slate-900 text-white border-slate-900"
              : "bg-white text-slate-700 border-slate-200 hover:bg-slate-50";
          return (
            <button key={t} onClick={() => setTab(t)} className={`${base} ${styles}`}>
              {t === "todos" ? "Todos" : t}
            </button>
          );
        })}
      </div>

      {/* formulÃ¡rio */}
      <div className="rounded-2xl border border-slate-200 bg-white shadow-sm overflow-hidden">
        <div className="h-1 w-full bg-gradient-to-r from-indigo-500 via-violet-500 to-fuchsia-500" />
        <div className="p-4 md:p-5 space-y-3">
          {error && (
            <div className="rounded-xl border border-rose-200 bg-rose-50 p-2.5 text-sm text-rose-700">
              {error}
            </div>
          )}
          <div className="flex flex-wrap items-end gap-3">
            <select
              className="border border-slate-200 rounded-xl px-3 py-2.5 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500/40"
              value={tipoNovo}
              onChange={(e) => setTipoNovo(e.target.value as TipoParam)}
              disabled={saving}
            >
              <option value="ENTRADA">ENTRADA</option>
              <option value="SAIDA">SAÃDA</option>
            </select>

            <input
              className="border border-slate-200 rounded-xl px-3 py-2.5 flex-1 min-w-[240px] text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500/40"
              placeholder="DescriÃ§Ã£o (ex.: PIX, Boleto 30/60/90..., Frete, Imposto...)"
              value={descricao}
              onChange={(e) => setDescricao(e.target.value)}
              onKeyDown={onKeyDown}
              disabled={saving}
            />

            <label className="flex items-center gap-2 text-sm text-slate-700">
              <input type="checkbox" checked={flagBomPara} onChange={(e) => setFlagBomPara(e.target.checked)} />
              Exige â€œbom/paraâ€
            </label>

            <label className="flex items-center gap-2 text-sm text-slate-700">
              <input type="checkbox" checked={flagTipoCheque} onChange={(e) => setFlagTipoCheque(e.target.checked)} />
              Exige tipo de cheque
            </label>

            <button
              onClick={save}
              className="px-4 py-2.5 rounded-xl text-sm font-semibold bg-indigo-600 text-white hover:bg-indigo-700 disabled:opacity-50 shadow-sm"
              disabled={!descricao.trim() || saving}
            >
              {saving ? "Salvando..." : "Adicionar"}
            </button>
          </div>
        </div>
      </div>

      {/* grid */}
      <div className="rounded-2xl border border-slate-200 bg-white shadow-sm overflow-hidden">
        <table className="w-full text-sm">
          <thead className="bg-slate-50">
            <tr className="text-slate-600">
              <th className="p-2.5 border w-28">Tipo</th>
              <th className="p-2.5 border text-left">DescriÃ§Ã£o</th>
              <th className="p-2.5 border w-28">Bom/para</th>
              <th className="p-2.5 border w-32">Tipo Cheque</th>
              <th className="p-2.5 border w-20">Ativo</th>
              <th className="p-2.5 border w-56">AÃ§Ãµes</th>
            </tr>
          </thead>
          <tbody>
            {loading && (
              <tr>
                <td colSpan={6} className="p-6 text-center text-slate-500">
                  Carregandoâ€¦
                </td>
              </tr>
            )}

            {!loading &&
              filtered.map((p) => (
                <tr key={p.id} className="hover:bg-slate-50/70">
                  <td className="p-2.5 border text-center">
                    <span className={chipTipo(p.tipo)}>{p.tipo}</span>
                  </td>
                  <td className="p-2.5 border">{p.descricao}</td>
                  <td className="p-2.5 border text-center">
                    <span className={pill(!!p.exige_bom_para)}>{p.exige_bom_para ? "Sim" : "NÃ£o"}</span>
                  </td>
                  <td className="p-2.5 border text-center">
                    <span className={pill(!!p.exige_tipo_cheque)}>{p.exige_tipo_cheque ? "Sim" : "NÃ£o"}</span>
                  </td>
                  <td className="p-2.5 border text-center">
                    <span
                      className={[
                        "inline-flex items-center justify-center rounded-full px-2.5 py-0.5 text-xs font-semibold border",
                        p.ativo
                          ? "bg-emerald-50 text-emerald-700 border-emerald-200"
                          : "bg-slate-100 text-slate-600 border-slate-200",
                      ].join(" ")}
                    >
                      {p.ativo ? "Sim" : "NÃ£o"}
                    </span>
                  </td>
                  <td className="p-2.5 border">
                    <div className="flex justify-center gap-2">
                      <button
                        onClick={() => toggleAtivo(p)}
                        className={[
                          "px-3 py-1.5 rounded-xl text-sm font-medium border shadow-sm transition-colors",
                          p.ativo
                            ? "bg-white text-slate-700 border-slate-200 hover:bg-slate-50"
                            : "bg-emerald-600 text-white border-emerald-600 hover:bg-emerald-700",
                        ].join(" ")}
                        title={p.ativo ? "Desativar" : "Ativar"}
                      >
                        {p.ativo ? "Desativar" : "Ativar"}
                      </button>

                      <button
                        onClick={() => handleDelete(p)}
                        className="px-3 py-1.5 rounded-xl text-sm font-medium border shadow-sm transition-colors bg-rose-600 text-white border-rose-600 hover:bg-rose-700"
                        title="Excluir definitivamente"
                      >
                        Excluir
                      </button>
                    </div>
                  </td>
                </tr>
              ))}

            {!loading && filtered.length === 0 && (
              <tr>
                <td colSpan={6} className="p-8 text-center text-slate-500">
                  {rows.length === 0 ? "Sem parÃ¢metros cadastrados" : "Nenhum resultado para o filtro"}
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}


----- END frontend\src\components\PedidoParametrosPage.tsx -----


----- BEGIN frontend\src\components\ProtectedRoute.tsx -----

// src/components/ProtectedRoute.tsx
import type { ReactElement } from "react";
import { Navigate, useLocation } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";

type Props = {
  children: ReactElement;
  /** opcional: restringe por permissÃ£o do usuÃ¡rio */
  requiredRoles?: Array<"admin" | "financeiro" | "vendedor">;
};

export default function ProtectedRoute({ children, requiredRoles }: Props) {
  const location = useLocation();
  const { isAuthenticated, loadingAuth, user } = useAuth();

  if (loadingAuth) {
    return <div className="p-6 text-sm text-slate-600">Carregandoâ€¦</div>;
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" replace state={{ from: location.pathname + location.search }} />;
  }

  if (requiredRoles && requiredRoles.length > 0) {
    const hasRole = requiredRoles.includes(user?.permissao as any);
    if (!hasRole) {
      return <Navigate to="/" replace />;
    }
  }

  return children;
}


----- END frontend\src\components\ProtectedRoute.tsx -----


----- BEGIN frontend\src\components\Register.tsx -----

import { useState } from "react";
import api from "../services/api";
import { useNavigate } from "react-router-dom";

export default function Register() {
  const nav = useNavigate();
  const [nome, setNome] = useState("");
  const [email, setEmail] = useState("");
  const [senha, setSenha] = useState("");
  const [loading, setLoading] = useState(false);

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    setLoading(true);
    try {
      await api.post("/auth/register", { nome, email, senha, permissao: "vendedor" });
      alert("UsuÃ¡rio criado. FaÃ§a login.");
      nav("/login");
    } finally { setLoading(false); }
  }

  return (
    <div className="min-h-[60vh] grid place-items-center">
      <form onSubmit={onSubmit} className="w-full max-w-sm space-y-4 border rounded p-6 bg-white">
        <h1 className="text-xl font-semibold">Criar conta</h1>
        <input className="border rounded px-3 py-2 w-full" placeholder="Nome" value={nome} onChange={(e)=>setNome(e.target.value)} />
        <input className="border rounded px-3 py-2 w-full" placeholder="E-mail" value={email} onChange={(e)=>setEmail(e.target.value)} />
        <input type="password" className="border rounded px-3 py-2 w-full" placeholder="Senha" value={senha} onChange={(e)=>setSenha(e.target.value)} />
        <button disabled={loading} className="w-full px-4 py-2 bg-blue-600 text-white rounded disabled:opacity-50">
          {loading ? "Enviandoâ€¦" : "Registrar"}
        </button>
      </form>
    </div>
  );
}


----- END frontend\src\components\Register.tsx -----


----- BEGIN frontend\src\components\TransportadoraForm.tsx -----

// src/components/TransportadoraForm.tsx
import { useEffect, useMemo, useState } from "react";
import api from "../services/api";

/* ===================== Tipos ===================== */
type Transp = {
  id: number;
  razao_social: string;
  cnpj?: string | null;
  forma_envio?: string | null;
  telefone?: string | null;
  endereco?: string | null;
  referencia?: string | null;
  ativo: boolean;
};
type Page<T> = { data: T[]; total: number; page: number; limit: number };

/* ===================== Helpers ===================== */
const toStr = (v?: string | null) => v ?? "";
const onlyDigits = (s: string) => (s || "").replace(/\D+/g, "");
const initials = (name: string) =>
  name
    .trim()
    .split(/\s+/)
    .slice(0, 2)
    .map((p) => p[0])
    .join("")
    .toUpperCase();

const maskCNPJ = (v: string) =>
  onlyDigits(v)
    .slice(0, 14)
    .replace(/^(\d{2})(\d)/, "$1.$2")
    .replace(/^(\d{2})\.(\d{3})(\d)/, "$1.$2.$3")
    .replace(/\.(\d{3})(\d)/, ".$1/$2")
    .replace(/(\d{4})(\d)/, "$1-$2");

const maskPhone = (v: string) => {
  const d = onlyDigits(v).slice(0, 11);
  if (d.length <= 10) {
    return d.replace(/^(\d{2})(\d)/, "($1) $2").replace(/(\d{4})(\d)/, "$1-$2");
  }
  return d.replace(/^(\d{2})(\d)/, "($1) $2").replace(/(\d{5})(\d)/, "$1-$2");
};

/* Paleta leve para avatares */
const hue = (s: string) =>
  (Array.from(s).reduce((a, c) => a + c.charCodeAt(0), 0) % 10) * 36;

/* ===================== Componente ===================== */
export default function TransportadoraForm() {
  /* -------- listagem -------- */
  const [rows, setRows] = useState<Transp[]>([]);
  const [loading, setLoading] = useState(false);
  const [page, setPage] = useState(1);
  const [limit, setLimit] = useState(10);
  const [total, setTotal] = useState(0);
  const [search, setSearch] = useState("");

  /* -------- criaÃ§Ã£o -------- */
  const [showCreate, setShowCreate] = useState(false);
  const [nzRazao, setNzRazao] = useState("");
  const [nzCnpj, setNzCnpj] = useState("");
  const [nzForma, setNzForma] = useState("");
  const [nzTel, setNzTel] = useState("");
  const [nzEnd, setNzEnd] = useState("");
  const [nzRef, setNzRef] = useState("");
  const [savingNew, setSavingNew] = useState(false);

  /* -------- ediÃ§Ã£o inline -------- */
  const [editingId, setEditingId] = useState<number | null>(null);
  const [edit, setEdit] = useState<Transp | null>(null);
  const isEditing = (id: number) => editingId === id;

  async function load(opts?: { keepPage?: boolean }) {
    setLoading(true);
    try {
      const { data } = await api.get<Page<Transp>>("/transportadoras", {
        params: { page: opts?.keepPage ? page : 1, limit, search: search.trim() || undefined },
      });
      setRows(data?.data ?? []);
      setTotal(Number(data?.total ?? 0));
      if (!opts?.keepPage) setPage(Number(data?.page ?? 1));
    } finally {
      setLoading(false);
    }
  }

  // debounce do filtro
  useEffect(() => {
    const t = setTimeout(() => load(), 350);
    return () => clearTimeout(t);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [search, limit]);

  useEffect(() => {
    load({ keepPage: true });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [page]);

  /* -------- criar -------- */
  async function create() {
    if (!nzRazao.trim()) return;
    setSavingNew(true);
    try {
      const payload: Partial<Transp> = {
        razao_social: nzRazao.trim(),
        ativo: true,
        cnpj: nzCnpj ? onlyDigits(nzCnpj) : undefined,
        forma_envio: nzForma || undefined,
        telefone: nzTel ? onlyDigits(nzTel) : undefined,
        endereco: nzEnd || undefined,
        referencia: nzRef || undefined,
      };
      await api.post("/transportadoras", payload);
      setNzRazao("");
      setNzCnpj("");
      setNzForma("");
      setNzTel("");
      setNzEnd("");
      setNzRef("");
      setShowCreate(false);
      await load();
    } catch (e: any) {
      alert(e?.response?.data?.message ?? "NÃ£o foi possÃ­vel criar.");
      console.error(e);
    } finally {
      setSavingNew(false);
    }
  }

  /* -------- editar -------- */
  function startEdit(t: Transp) {
    setEditingId(t.id);
    setEdit({ ...t });
  }
  function cancelEdit() {
    setEditingId(null);
    setEdit(null);
  }
  async function saveEdit() {
    if (!edit) return;
    setLoading(true);
    try {
      const { id, ...body } = {
        ...edit,
        cnpj: edit.cnpj ? onlyDigits(edit.cnpj) : null,
        telefone: edit.telefone ? onlyDigits(edit.telefone) : null,
      };
      await api.put(`/transportadoras/${id}`, body);
      await load({ keepPage: true });
      cancelEdit();
    } catch (e: any) {
      alert(e?.response?.data?.message ?? "Falha ao atualizar.");
      console.error(e);
    } finally {
      setLoading(false);
    }
  }

  /* -------- ativar/inativar -------- */
  async function toggleActive(t: Transp) {
    const prev = [...rows];
    setRows((list) => list.map((x) => (x.id === t.id ? { ...x, ativo: !x.ativo } : x)));
    try {
      await api.put(`/transportadoras/${t.id}`, { ativo: !t.ativo });
    } catch (e) {
      setRows(prev);
      alert("NÃ£o foi possÃ­vel atualizar o status.");
      console.error(e);
    }
  }

  /* -------- excluir -------- */
  async function remove(t: Transp) {
    if (!confirm(`Excluir "${t.razao_social}"?`)) return;
    setLoading(true);
    try {
      await api.delete(`/transportadoras/${t.id}`);
      if (rows.length === 1 && page > 1) setPage((p) => p - 1);
      await load({ keepPage: true });
    } catch (e: any) {
      alert(e?.response?.data?.message ?? "Falha ao excluir.");
      console.error(e);
    } finally {
      setLoading(false);
    }
  }

  const totalPages = useMemo(
    () => Math.max(1, Math.ceil(total / Math.max(1, limit))),
    [total, limit]
  );

  return (
    <div className="space-y-6">
      {/* HERO dark */}
      <div className="rounded-3xl bg-gradient-to-b from-slate-900 to-slate-800 text-white shadow-lg ring-1 ring-black/10">
        <div className="flex flex-col gap-4 p-6 md:flex-row md:items-center md:justify-between">
          <div>
            <h1 className="text-2xl font-semibold tracking-tight">Transportadoras</h1>
            <p className="text-sm/6 text-slate-300">
              Cadastre e gerencie empresas de transporte.
            </p>
          </div>

          <div className="flex flex-wrap items-center gap-2">
            <div className="relative">
              <input
                className="w-80 rounded-xl bg-white/10 px-3 py-2 pl-9 text-white placeholder:text-slate-300/70 outline-none ring-1 ring-white/15 focus:ring-2 focus:ring-white/40"
                placeholder="Buscar (razÃ£o social, CNPJ, telefone)"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
              />
              <span className="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 opacity-70">
                ðŸ”Ž
              </span>
            </div>

            <select
              className="rounded-xl bg-white/10 px-3 py-2 outline-none ring-1 ring-white/15 focus:ring-2 focus:ring-white/40"
              value={limit}
              onChange={(e) => setLimit(Number(e.target.value))}
            >
              {[10, 20, 50, 100].map((n) => (
                <option key={n} value={n}>
                  {n}/pÃ¡gina
                </option>
              ))}
            </select>

            <button
              onClick={() => setShowCreate((v) => !v)}
              className="rounded-xl bg-white px-4 py-2 font-medium text-slate-900 hover:bg-slate-100 active:bg-slate-200"
            >
              {showCreate ? "Ocultar cadastro" : "Novo cadastro"}
            </button>
          </div>
        </div>
      </div>

      {/* Card de cadastro (toggle) */}
      {showCreate && (
        <div className="rounded-2xl border bg-white p-5 shadow-sm">
          <h2 className="mb-3 text-sm font-semibold text-slate-700">Nova transportadora</h2>

          <div className="grid gap-4 md:grid-cols-2">
            <div className="md:col-span-2">
              <label className="text-xs font-medium text-slate-600">RazÃ£o social *</label>
              <input
                className="mt-1 w-full rounded-xl border px-3 py-2"
                value={nzRazao}
                onChange={(e) => setNzRazao(e.target.value)}
                placeholder="Ex.: Trans Metal LTDA"
              />
            </div>

            <div>
              <label className="text-xs font-medium text-slate-600">CNPJ</label>
              <input
                className="mt-1 w-full rounded-xl border px-3 py-2"
                value={nzCnpj}
                onChange={(e) => setNzCnpj(maskCNPJ(e.target.value))}
                placeholder="00.000.000/0000-00"
                inputMode="numeric"
              />
            </div>

            <div>
              <label className="text-xs font-medium text-slate-600">Forma de envio</label>
              <input
                className="mt-1 w-full rounded-xl border px-3 py-2"
                value={nzForma}
                onChange={(e) => setNzForma(e.target.value)}
                placeholder="RodoviÃ¡rio, Retira, Motoboyâ€¦"
              />
            </div>

            <div>
              <label className="text-xs font-medium text-slate-600">Telefone</label>
              <input
                className="mt-1 w-full rounded-xl border px-3 py-2"
                value={nzTel}
                onChange={(e) => setNzTel(maskPhone(e.target.value))}
                placeholder="(00) 00000-0000"
                inputMode="tel"
              />
            </div>

            <div>
              <label className="text-xs font-medium text-slate-600">ReferÃªncia (p/ motorista)</label>
              <input
                className="mt-1 w-full rounded-xl border px-3 py-2"
                value={nzRef}
                onChange={(e) => setNzRef(e.target.value)}
                placeholder="PrÃ³ximo ao galpÃ£o azul"
              />
            </div>

            <div className="md:col-span-2">
              <label className="text-xs font-medium text-slate-600">EndereÃ§o</label>
              <input
                className="mt-1 w-full rounded-xl border px-3 py-2"
                value={nzEnd}
                onChange={(e) => setNzEnd(e.target.value)}
                placeholder="Rua/Av, nÂº, bairro, cidade/UF"
              />
            </div>
          </div>

          <div className="pt-3">
            <button
              onClick={create}
              disabled={savingNew || !nzRazao.trim()}
              className="rounded-xl bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 disabled:opacity-50"
            >
              {savingNew ? "Salvandoâ€¦" : "Salvar"}
            </button>
          </div>
        </div>
      )}

      {/* Lista */}
      <div className="overflow-hidden rounded-2xl border bg-white shadow-sm">
        <div className="overflow-x-auto">
          <table className="w-full text-sm">
            <thead className="sticky top-0 z-10 bg-slate-50">
              <tr className="text-left text-slate-600">
                <th className="p-3 border">RazÃ£o social</th>
                <th className="p-3 border w-44">CNPJ</th>
                <th className="p-3 border w-40">Forma envio</th>
                <th className="p-3 border w-40">Telefone</th>
                <th className="p-3 border">EndereÃ§o</th>
                <th className="p-3 border w-[220px]">ReferÃªncia</th>
                <th className="p-3 border w-28">Status</th>
                <th className="p-3 border w-[220px]">AÃ§Ãµes</th>
              </tr>
            </thead>
            <tbody>
              {loading &&
                Array.from({ length: 5 }).map((_, i) => (
                  <tr key={`sk-${i}`} className="animate-pulse">
                    {Array.from({ length: 8 }).map((__, j) => (
                      <td key={j} className="p-3 border">
                        <div className="h-4 w-full max-w-[180px] rounded bg-slate-100" />
                      </td>
                    ))}
                  </tr>
                ))}

              {!loading &&
                rows.map((t, idx) => (
                  <tr
                    key={t.id}
                    className={["transition-colors", idx % 2 ? "bg-slate-50/40" : "", "hover:bg-slate-50"].join(
                      " "
                    )}
                  >
                    {/* RazÃ£o social com avatar */}
                    <td className="p-3 border align-top">
                      <div className="flex items-start gap-3">
                        <span
                          className="grid h-8 w-8 shrink-0 place-items-center rounded-full text-xs font-semibold text-white"
                          style={{ backgroundColor: `hsl(${hue(t.razao_social)} 80% 45%)` as any }}
                        >
                          {initials(t.razao_social)}
                        </span>
                        {isEditing(t.id) ? (
                          <input
                            className="mt-0.5 w-full rounded border px-2 py-1"
                            value={toStr(edit?.razao_social)}
                            onChange={(e) =>
                              setEdit((s) => ({ ...(s as Transp), razao_social: e.target.value }))
                            }
                          />
                        ) : (
                          <div className="min-w-0">
                            <div className="truncate font-medium text-slate-900">
                              {t.razao_social}
                            </div>
                            {t.referencia && (
                              <div className="truncate text-xs text-slate-500">{t.referencia}</div>
                            )}
                          </div>
                        )}
                      </div>
                    </td>

                    {/* CNPJ */}
                    <td className="p-3 border align-top">
                      {isEditing(t.id) ? (
                        <input
                          className="w-full rounded border px-2 py-1"
                          value={toStr(edit?.cnpj ?? "")}
                          onChange={(e) =>
                            setEdit((s) => ({ ...(s as Transp), cnpj: maskCNPJ(e.target.value) }))
                          }
                          inputMode="numeric"
                        />
                      ) : t.cnpj ? (
                        maskCNPJ(t.cnpj)
                      ) : (
                        "â€”"
                      )}
                    </td>

                    {/* Forma envio */}
                    <td className="p-3 border align-top">
                      {isEditing(t.id) ? (
                        <input
                          className="w-full rounded border px-2 py-1"
                          value={toStr(edit?.forma_envio)}
                          onChange={(e) =>
                            setEdit((s) => ({ ...(s as Transp), forma_envio: e.target.value }))
                          }
                        />
                      ) : (
                        t.forma_envio ?? "â€”"
                      )}
                    </td>

                    {/* Telefone */}
                    <td className="p-3 border align-top">
                      {isEditing(t.id) ? (
                        <input
                          className="w-full rounded border px-2 py-1"
                          value={toStr(edit?.telefone ?? "")}
                          onChange={(e) =>
                            setEdit((s) => ({ ...(s as Transp), telefone: maskPhone(e.target.value) }))
                          }
                          inputMode="tel"
                        />
                      ) : t.telefone ? (
                        <a
                          className="text-blue-700 underline decoration-1 underline-offset-2"
                          href={`tel:${onlyDigits(t.telefone)}`}
                        >
                          {maskPhone(t.telefone)}
                        </a>
                      ) : (
                        "â€”"
                      )}
                    </td>

                    {/* EndereÃ§o */}
                    <td className="p-3 border align-top">
                      {isEditing(t.id) ? (
                        <input
                          className="w-full rounded border px-2 py-1"
                          value={toStr(edit?.endereco)}
                          onChange={(e) => setEdit((s) => ({ ...(s as Transp), endereco: e.target.value }))}
                        />
                      ) : (
                        t.endereco ?? "â€”"
                      )}
                    </td>

                    {/* ReferÃªncia (col resumida na tabela, jÃ¡ mostramos no tÃ­tulo) */}
                    <td className="p-3 border align-top">{t.referencia ?? "â€”"}</td>

                    {/* Status */}
                    <td className="p-3 border align-top">
                      <span
                        className={[
                          "inline-flex items-center rounded-full px-2 py-0.5 text-xs font-medium ring-1",
                          t.ativo
                            ? "bg-emerald-50 text-emerald-700 ring-emerald-200"
                            : "bg-slate-200 text-slate-700 ring-0",
                        ].join(" ")}
                      >
                        {t.ativo ? "ATIVO" : "INATIVO"}
                      </span>
                    </td>

                    {/* AÃ§Ãµes */}
                    <td className="p-3 border align-top">
                      {isEditing(t.id) ? (
                        <div className="flex flex-wrap gap-2">
                          <button
                            className="rounded-lg bg-blue-600 px-3 py-1.5 text-white hover:bg-blue-700"
                            onClick={saveEdit}
                          >
                            Salvar
                          </button>
                          <button
                            className="rounded-lg border px-3 py-1.5 hover:bg-slate-50"
                            onClick={cancelEdit}
                          >
                            Cancelar
                          </button>
                        </div>
                      ) : (
                        <div className="flex flex-wrap gap-2">
                          <button
                            className="rounded-lg border px-3 py-1.5 hover:bg-slate-50"
                            onClick={() => startEdit(t)}
                          >
                            Editar
                          </button>
                          <button
                            className={[
                              "rounded-lg px-3 py-1.5",
                              t.ativo
                                ? "border text-amber-700 hover:bg-amber-50"
                                : "bg-emerald-600 text-white hover:bg-emerald-700",
                            ].join(" ")}
                            onClick={() => toggleActive(t)}
                          >
                            {t.ativo ? "Inativar" : "Ativar"}
                          </button>
                          <button
                            className="rounded-lg border px-3 py-1.5 text-red-700 hover:bg-rose-50"
                            onClick={() => remove(t)}
                          >
                            Excluir
                          </button>
                        </div>
                      )}
                    </td>
                  </tr>
                ))}

              {!loading && rows.length === 0 && (
                <tr>
                  <td colSpan={8} className="p-10 text-center text-slate-500">
                    Nenhuma transportadora encontrada.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        {/* Footer da lista */}
        <div className="flex flex-wrap items-center justify-between gap-3 border-t bg-slate-50 px-4 py-3 text-sm">
          <div className="text-slate-600">
            Mostrando <b>{rows.length}</b> de <b>{total}</b> registro(s).
          </div>
          <div className="flex items-center gap-2">
            <button
              className="rounded-xl border px-3 py-1.5 hover:bg-white disabled:opacity-50"
              onClick={() => setPage((p) => Math.max(1, p - 1))}
              disabled={page <= 1 || loading}
            >
              â€¹ Anterior
            </button>
            <div className="px-1">
              PÃ¡gina <b>{page}</b> / {Math.max(1, totalPages)}
            </div>
            <button
              className="rounded-xl border px-3 py-1.5 hover:bg-white disabled:opacity-50"
              onClick={() => setPage((p) => Math.min(totalPages, p + 1))}
              disabled={page >= totalPages || loading}
            >
              PrÃ³xima â€º
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}


----- END frontend\src\components\TransportadoraForm.tsx -----


----- BEGIN frontend\src\contexts\AuthContext.tsx -----

// src/contexts/AuthContext.tsx
import React, {
  createContext, useState, useContext, useEffect, useRef, type ReactNode
} from "react";
import api from "../services/api";

type Permissao = "admin" | "financeiro" | "vendedor";

interface User {
  id: number;
  nome: string;
  email: string;
  permissao: Permissao | string;
}

interface AuthContextType {
  isAuthenticated: boolean;
  user: User | null;
  loadingAuth: boolean;
  login: (token: string, user: User) => void;
  logout: () => void;
  setUser: React.Dispatch<React.SetStateAction<User | null>>;
  setIsAuthenticated: React.Dispatch<React.SetStateAction<boolean>>;
}

export const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Guard para evitar bootstrap duplicado no StrictMode (apenas DEV)
let didBootstrap = false;

function isTokenExpired(token: string): boolean {
  try {
    const payloadBase64 = token.split(".")[1];
    const payloadJson = atob(payloadBase64);
    const payload = JSON.parse(payloadJson);
    const exp = payload.exp as number | undefined;
    if (!exp) return true;
    const now = Math.floor(Date.now() / 1000);
    return exp <= now;
  } catch {
    return true;
  }
}

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loadingAuth, setLoadingAuth] = useState(true);

  // executa 1x mesmo com StrictMode no DEV
  useEffect(() => {
    const bootstrap = async () => {
      if (import.meta.env.DEV && didBootstrap) {
        // evita repetir no StrictMode (monta/desmonta)
        setLoadingAuth(false);
        return;
      }
      didBootstrap = true;

      const token = localStorage.getItem("token");
      const rawUser = localStorage.getItem("user");

      if (token) api.defaults.headers.common.Authorization = `Bearer ${token}`;

      if (!token || !rawUser) {
        // sem sessÃ£o
        setUser(null);
        setIsAuthenticated(false);
        setLoadingAuth(false);
        return;
      }

      try {
        const parsed = JSON.parse(rawUser) as User;

        // se estiver expirado, apenas limpa sessÃ£o
        // (vocÃª pode implementar /auth/refresh depois)
        if (isTokenExpired(token)) {
          localStorage.removeItem("token");
          localStorage.removeItem("user");
          delete api.defaults.headers.common.Authorization;
          setUser(null);
          setIsAuthenticated(false);
          setLoadingAuth(false);
          return;
        }

        setUser(parsed);
        setIsAuthenticated(true);
      } catch {
        setUser(null);
        setIsAuthenticated(false);
      } finally {
        setLoadingAuth(false);
      }
    };

    bootstrap();
  }, []);

  const login = (token: string, u: User) => {
    localStorage.setItem("token", token);
    localStorage.setItem("user", JSON.stringify(u));
    api.defaults.headers.common.Authorization = `Bearer ${token}`;
    setUser(u);
    setIsAuthenticated(true);
  };

  const logout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("user");
    delete api.defaults.headers.common.Authorization;
    setUser(null);
    setIsAuthenticated(false);
  };

  return (
    <AuthContext.Provider
      value={{ isAuthenticated, user, loadingAuth, login, logout, setUser, setIsAuthenticated }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const ctx = useContext(AuthContext);
  if (!ctx) throw new Error("useAuth must be used within an AuthProvider");
  return ctx;
};


----- END frontend\src\contexts\AuthContext.tsx -----


----- BEGIN frontend\src\lib\notify-bridge.tsx -----

// src/lib/notify-bridge.tsx
import { useEffect } from "react";
import { useToast } from "./toast";
import { bindNotifier } from "../services/api";

/**
 * Liga o interceptor do axios (notify) ao nosso toast UI.
 * Renderize <NotifyBridge /> dentro de <ToasterProvider>.
 */
export function NotifyBridge() {
  const { show } = useToast();
  useEffect(() => {
    bindNotifier((type, message) => show({ type, message }));
  }, [show]);
  return null;
}


----- END frontend\src\lib\notify-bridge.tsx -----


----- BEGIN frontend\src\lib\toast.tsx -----

// src/lib/toast.tsx
import React, { createContext, useContext, useEffect, useMemo, useRef, useState } from "react";

type ToastBase = {
  type: "success" | "error" | "info";
  message: string;
  /** tempo em ms (default 3500) */
  duration?: number;
};

type Toast = ToastBase & { id: number };

type Ctx = {
  show: (t: ToastBase) => void;
  /** atalhos semÃ¢ntico-opcionais */
  success: (message: string, opts?: Omit<ToastBase, "type" | "message">) => void;
  error: (message: string, opts?: Omit<ToastBase, "type" | "message">) => void;
  info: (message: string, opts?: Omit<ToastBase, "type" | "message">) => void;
  /** fecha manualmente (ex.: apÃ³s retry) */
  dismiss: (id: number) => void;
};

const ToastCtx = createContext<Ctx | null>(null);

export function ToasterProvider({
  children,
  maxQueue = 5,
  defaultDuration = 3500,
}: {
  children: React.ReactNode;
  /** mÃ¡ximo de toasts simultÃ¢neos */
  maxQueue?: number;
  /** duraÃ§Ã£o padrÃ£o em ms */
  defaultDuration?: number;
}) {
  const [items, setItems] = useState<Toast[]>([]);
  const timers = useRef<Record<number, number>>({}); // ids de setTimeout

  // teclado: ESC fecha o Ãºltimo
  useEffect(() => {
    const onKey = (e: KeyboardEvent) => {
      if (e.key === "Escape") {
        setItems((prev) => {
          const last = prev.at(-1);
          if (!last) return prev;
          clearTimeout(timers.current[last.id]);
          const next = prev.slice(0, -1);
          return next;
        });
      }
    };
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, []);

  const dismiss = (id: number) => {
    clearTimeout(timers.current[id]);
    setItems((prev) => prev.filter((i) => i.id !== id));
  };

  const push = (t: ToastBase) => {
    const id = Date.now() + Math.random();
    const toast: Toast = { id, ...t, duration: t.duration ?? defaultDuration };

    setItems((prev) => {
      const next = [...prev, toast];
      // corta a fila no inÃ­cio se exceder o limite
      return next.length > maxQueue ? next.slice(next.length - maxQueue) : next;
    });

    timers.current[id] = window.setTimeout(() => {
      dismiss(id);
    }, toast.duration);
  };

  const value = useMemo<Ctx>(
    () => ({
      show: push,
      success: (message, opts) => push({ type: "success", message, ...opts }),
      error: (message, opts) => push({ type: "error", message, ...opts }),
      info: (message, opts) => push({ type: "info", message, ...opts }),
      dismiss,
    }),
    []
  );

  // limpa timers ao desmontar
  useEffect(() => {
    return () => {
      Object.values(timers.current).forEach(clearTimeout);
      timers.current = {};
    };
  }, []);

  return (
    <ToastCtx.Provider value={value}>
      {children}

      {/* container */}
      <div
        className="pointer-events-none fixed top-4 right-4 z-50 flex w-[min(92vw,380px)] flex-col gap-2"
        aria-live="polite"
        role="status"
      >
        {items.map((i) => (
          <ToastItem key={i.id} toast={i} onClose={() => dismiss(i.id)} />
        ))}
      </div>
    </ToastCtx.Provider>
  );
}

function ToastItem({ toast, onClose }: { toast: Toast; onClose: () => void }) {
  const colors =
    toast.type === "success"
      ? "bg-emerald-600 ring-emerald-700"
      : toast.type === "error"
      ? "bg-red-600 ring-red-700"
      : "bg-slate-800 ring-slate-900";

  return (
    <div
      className={[
        "pointer-events-auto rounded-md px-4 py-3 text-white shadow-lg ring-1",
        "animate-[toast-in_180ms_ease-out] will-change-transform",
        colors,
      ].join(" ")}
      style={{
        // keyframe simples via inline para evitar dependÃªncia
        // @ts-ignore
        "--tw-animate": "translateY(-6px) scale(0.98)",
      }}
    >
      <div className="flex items-start gap-3">
        <span className="mt-0.5 text-sm leading-5">{toast.message}</span>
        <button
          className="ml-auto inline-flex h-6 w-6 shrink-0 items-center justify-center rounded-md bg-white/10 text-white/90 hover:bg-white/15 focus:outline-none focus:ring-2 focus:ring-white/40"
          onClick={onClose}
          aria-label="Fechar notificaÃ§Ã£o"
        >
          Ã—
        </button>
      </div>
    </div>
  );
}

export function useToast() {
  const ctx = useContext(ToastCtx);
  if (!ctx) throw new Error("useToast must be used inside <ToasterProvider>");
  return ctx;
}


----- END frontend\src\lib\toast.tsx -----


----- BEGIN frontend\src\lib\utils.ts -----

 import { type ClassValue, clsx } from "clsx"
 import { twMerge } from "tailwind-merge"

 export function cn(...inputs: ClassValue[]) {
   return twMerge(clsx(inputs))
}


----- END frontend\src\lib\utils.ts -----


----- BEGIN frontend\src\services\api.ts -----

// src/services/api.ts
import axios from "axios";

/** Tipos para o notificador (toast/alert) */
export type Type = "success" | "error" | "info"; // manter igual ao toast.tsx
export type Notifier = (type: Type, message: string) => void;

let notifier: Notifier | null = null;

/** O App (via <NotifyBridge />) pluga aqui a funÃ§Ã£o que mostra o toast */
export function bindNotifier(fn: Notifier) {
  notifier = fn;
}

/** Opcional: permitir disparar toasts de qualquer lugar do app */
export function notify(type: Type, message: string) {
  notifier?.(type, message);
}

/** Resolve a base da API:
 *  - VITE_API_URL (ex.: http://localhost:4010)
 *  - ou VITE_API_BASE (ex.: /api)
 *  - senÃ£o '/api'
 */
const BASE =
  import.meta.env.VITE_API_URL ??
  import.meta.env.VITE_API_BASE ??
  "/api";

/** Cliente axios base */
const api = axios.create({
  baseURL: BASE,
  // withCredentials: true, // habilite se usar cookie/sessÃ£o
});

/** Token JWT (se existir) vai no header */
api.interceptors.request.use((cfg) => {
  const token = localStorage.getItem("token");
  if (token) cfg.headers.Authorization = `Bearer ${token}`;
  return cfg;
});

/** Intercepta erros e joga pro toast */
api.interceptors.response.use(
  (res) => res,
  (err) => {
    const silent =
      err?.config?.headers?.["x-silent"] === "1" ||
      err?.config?.meta?.silent === true;

    if (!silent) {
      const msg =
        err?.response?.data?.message ??
        err?.response?.data?.error ??
        err?.message ??
        "Erro inesperado";
      notifier?.("error", msg);
    }
    return Promise.reject(err);
  }
);

export { api, BASE as API_BASE };
export default api;


----- END frontend\src\services\api.ts -----


----- BEGIN frontend\src\services\blocos.api.ts -----

import api from "./api";

/* ------------ Types ------------ */
export type BlocoStatus = "ABERTO" | "FECHADO";

export type Bloco = {
  id: number;
  codigo: string;
  status: BlocoStatus;
  cliente_id: number;
  cliente_nome?: string | null;
  aberto_em?: string | null;
  fechado_em?: string | null;
  observacao?: string | null;
};

export type SaldosResponse = {
  bloco_id: number;
  saldo_bloco: number;     // todas as movimentaÃ§Ãµes (ENTRADAâˆ’ / SAÃDA+)
  saldo_imediato: number;  // imediato (ignora bom_para)
  a_receber: number;       // tÃ­tulos ABERTO/PARCIAL
  saldo_financeiro: number;// imediato + baixados
};

/* ------------ Blocos ------------ */
export async function listarBlocos(params: {
  page?: number;
  limit?: number;
  status?: BlocoStatus;
  cliente_id?: number;
  cliente?: string;
  search?: string;
}) {
  const { data } = await api.get("/blocos", { params });
  const payload = data?.data ? data : { data };
  return {
    data: (payload.data ?? []) as Bloco[],
    page: Number(payload.page ?? params.page ?? 1),
    limit: Number(payload.limit ?? params.limit ?? 10),
    total: Number(payload.total ?? (payload.data?.length ?? 0)),
  };
}

export async function getBloco(id: number) {
  const { data } = await api.get(`/blocos/${id}`);
  return data as Bloco;
}

export async function fecharBloco(id: number) {
  const { data } = await api.post(`/blocos/${id}/fechar`);
  return data;
}

/* ------------ LanÃ§amentos ------------ */
export async function listarLancamentos(
  blocoId: number,
  params: { page?: number; limit?: number; status?: string; tipo?: string }
) {
  const { data } = await api.get(`/blocos/${blocoId}/lancamentos`, { params });
  return data as { data: any[]; page: number; limit: number; total: number };
}

export async function adicionarLancamento(blocoId: number, payload: any) {
  const { data } = await api.post(`/blocos/${blocoId}/lancamentos`, payload);
  return data;
}

export async function excluirLancamento(blocoId: number, lancId: number) {
  const { data } = await api.delete(`/blocos/${blocoId}/lancamentos/${lancId}`);
  return data;
}

/* ------------ Saldos ------------ */
export async function getSaldos(blocoId: number) {
  const { data } = await api.get(`/blocos/${blocoId}/saldos`);
  return data as SaldosResponse;
}


----- END frontend\src\services\blocos.api.ts -----


----- BEGIN frontend\src\services\financeiro.ts -----

import api from "./api";

export type Titulo = {
  id: number;
  cliente_id: number;
  cliente_nome?: string;
  tipo: "CHEQUE" | "BOLETO" | "PIX" | "DEPOSITO" | string;
  numero_doc?: string | null;
  bom_para: string;
  valor_bruto: number;
  valor_baixado: number;
  status: "ABERTO" | "PARCIAL" | "BAIXADO" | "DEVOLVIDO" | "CANCELADO";
  observacao?: string | null;
  bloco_id?: number | null;
};

export async function listarTitulos(params: {
  status?: string;  // ex "ABERTO,PARCIAL,BAIXADO"
  tipo?: string;    // "CHEQUE" | "BOLETO"
  from?: string;    // "YYYY-MM-DD"
  to?: string;      // "YYYY-MM-DD"
  q?: string;
  page?: number;
  pageSize?: number;
}) {
  const { data } = await api.get("/financeiro/titulos", { params });
  return data as { total: number; page: number; pageSize: number; data: Titulo[] };
}

export async function registrarBaixa(
  tituloId: number,
  payload: {
    valor_baixa: number;
    data_baixa?: string;
    forma_pagto?: string;
    obs?: string;
  }
) {
  const { data } = await api.post(`/financeiro/titulos/${tituloId}/baixas`, payload);
  return data;
}

export async function estornarTitulo(
  tituloId: number,
  payload?: { valor_estorno?: number; obs?: string }
) {
  const { data } = await api.post(`/financeiro/titulos/${tituloId}/estornos`, payload ?? {});
  return data;
}

// (mantidos abaixo â€“ ConferÃªncia)
export type OrigemConferencia = "BLOCO_LANC" | "TITULO" | "BAIXA";
export type StatusConferencia = "PENDENTE" | "CONFIRMADO" | "DIVERGENTE";

export type ConferenciaItem = {
  id: number;
  origem: OrigemConferencia;
  origem_id: number;
  data_evento: string;
  cliente_id: number;
  cliente_nome?: string | null;
  tipo: string;
  numero_doc?: string | null;
  bom_para?: string | null;
  valor: number;
  valor_baixado?: number;
  status_negocio?: string;
  status_conferencia?: StatusConferencia;
  comentario?: string | null;
  bloco_id?: number | null;
  titulo_id?: number | null;
};

export type ConferenciaResult = {
  data: string;
  total: number;
  resumo: Record<string, number>;
  itens: ConferenciaItem[];
};

export async function conferenciaDiaria(params: {
  data?: string;
  operador_id?: number;
  cliente_id?: number;
}) {
  const { data } = await api.get("/financeiro/conferencia", { params });
  return data as ConferenciaResult;
}

type ConferenciaUpsertPayload = {
  data?: string;
  status: StatusConferencia;
  comentario?: string;
  itens: Array<{ origem: OrigemConferencia; origem_id: number }>;
};

export async function conferenciaAtualizar(payload: ConferenciaUpsertPayload) {
  const { data } = await api.patch("/financeiro/conferencia", payload);
  return data;
}

export async function conferenciaConfirmar(args: {
  data?: string;
  itens: Array<{ origem: OrigemConferencia; origem_id: number }>;
}) {
  return conferenciaAtualizar({ status: "CONFIRMADO", itens: args.itens, data: args.data });
}

export async function conferenciaDivergir(args: {
  data?: string;
  comentario: string;
  itens: Array<{ origem: OrigemConferencia; origem_id: number }>;
}) {
  return conferenciaAtualizar({ status: "DIVERGENTE", comentario: args.comentario, itens: args.itens, data: args.data });
}

export async function conferenciaDesfazer(args: {
  data?: string;
  itens: Array<{ origem: OrigemConferencia; origem_id: number }>;
}) {
  return conferenciaAtualizar({ status: "PENDENTE", itens: args.itens, data: args.data });
}


----- END frontend\src\services\financeiro.ts -----


----- BEGIN frontend\src\utils\clientNameCache.ts -----

// src/utils/clientNameCache.ts
import api from "../services/api";

const cache = new Map<number, string>();

export async function ensureClientNames(ids: number[]) {
  const need = ids.filter((id) => id && !cache.has(id));
  if (need.length === 0) return;

  // tenta endpoint em lote: /clientes?ids=1,2,3
  try {
    const { data } = await api.get("/clientes", {
      params: { ids: need.join(",") },
      headers: { "x-silent": "1" },
    });
    const list = (data?.data ?? data ?? []) as { id: number; nome_fantasia?: string }[];
    list.forEach((c) => cache.set(Number(c.id), c.nome_fantasia || `#${c.id}`));
    // se ainda faltou alguÃ©m, cai no fallback
    const resolved = new Set(list.map((c) => Number(c.id)));
    const missing = need.filter((id) => !resolved.has(id));
    await Promise.all(
      missing.map(async (id) => {
        try {
          const { data } = await api.get(`/clientes/${id}`, { headers: { "x-silent": "1" } });
          cache.set(Number(id), data?.nome_fantasia || `#${id}`);
        } catch {
          cache.set(Number(id), `#${id}`);
        }
      })
    );
  } catch {
    // sem endpoint em lote? busca 1 a 1
    await Promise.all(
      need.map(async (id) => {
        try {
          const { data } = await api.get(`/clientes/${id}`, { headers: { "x-silent": "1" } });
          cache.set(Number(id), data?.nome_fantasia || `#${id}`);
        } catch {
          cache.set(Number(id), `#${id}`);
        }
      })
    );
  }
}

export function getClientName(id?: number | null, fallback?: string | null) {
  if (!id) return fallback ?? "â€”";
  return cache.get(Number(id)) || fallback || `#${id}`;
}


----- END frontend\src\utils\clientNameCache.ts -----


----- BEGIN frontend\src\App.css -----

@tailwind base;
@tailwind components;
@tailwind utilities;


----- END frontend\src\App.css -----


----- BEGIN frontend\src\App.tsx -----

// src/App.tsx
import "./index.css";
import type { ReactNode } from "react";
import { Routes, Route, NavLink, Navigate, Outlet } from "react-router-dom";

import ErrorBoundary from "./components/ErrorBoundary";

// pÃºblicas
import Login from "./components/Login";
import Register from "./components/Register";

// home (dashboard)
import Home from "./components/Home";

// clientes
import Clientes from "./components/Clientes";
import ClienteForm from "./components/ClienteForm";
import ClienteDetalhes from "./components/ClienteDetalhes";
import ClienteDocumentoForm from "./components/ClienteDocumentoForm";

// financeiro
import PagamentoForm from "./components/PagamentoForm";
import HistoricoPagamentos from "./components/HistoricoPagamentos";
import FormaPagamentoForm from "./components/PedidoParametrosPage";

// auxiliares
import TransportadoraForm from "./components/TransportadoraForm";
import Dominios from "./components/Dominios";
import DominioItens from "./components/DominioItens";
import DominioForm from "./components/DominioForm";

// blocos
import Blocos from "./components/ui/Blocos";
import BlocoDetalhe from "./components/ui/BlocoDetalhe";

// ui
import Button from "./components/ui/button";

// auth
import { useAuth } from "./contexts/AuthContext";

// toast bridge
import { NotifyBridge } from "./lib/notify-bridge";

// financeiro (novas telas)
import FinanceiroReceber from "./components/FinanceiroReceber";
import Conferencia from "./components/financeiro/Conferencia";
import { useState } from "react";

// const FEATURES = {
//   dominios: import.meta.env.VITE_FEATURE_DOMINIOS === "1",
//   pagamentos: import.meta.env.VITE_FEATURE_PAGAMENTOS === "1",
// };


/* ---------------- Layout ---------------- */
const Layout: React.FC<{ children: ReactNode }> = ({ children }) => {
  const { user, logout } = useAuth();
  const [open, setOpen] = useState(false);

  const navItems = [
    { to: "/", label: "InÃ­cio" },
    { to: "/blocos", label: "Blocos" },
    { to: "/clientes", label: "Clientes" },
    { to: "/formas-pagamento", label: "ParÃ¢metros do pedido" },
    { to: "/transportadoras", label: "Transportadoras" },
    // { to: "/dominios", label: "DomÃ­nios" },
    // { to: "/pagamentos", label: "Pagamentos" },
    { to: "/financeiro/receber", label: "Financeiro" },
    { to: "/financeiro/conferencia", label: "ConferÃªncia" },
    { to: "/historico-pagamentos", label: "HistÃ³rico" },
  ];

  return (
    <div className="min-h-dvh bg-slate-50">
      {/* Header */}
      <header className="sticky top-0 z-40 bg-white/70 backdrop-blur supports-[backdrop-filter]:bg-white/50">
        {/* hairline com â€œdegradÃªâ€ */}
        <div className="h-px w-full bg-gradient-to-r from-transparent via-slate-200 to-transparent" />
        <div className="mx-auto max-w-7xl px-4 sm:px-6">
          <div className="flex items-center justify-between py-3">
            {/* Brand + usuÃ¡rio */}
            <div className="flex items-center gap-3">
              <div className="h-9 w-9 rounded-xl bg-slate-900 text-white grid place-items-center shadow-sm">
                <span className="text-[11px] font-bold">MEGA</span>
              </div>
              <div className="leading-tight">
                <div className="text-sm text-slate-500">Bem-vindo</div>
                <div className="text-base font-semibold text-slate-900">{user?.nome}</div>
              </div>
            </div>

            {/* BotÃ£o mobile */}
            <button
              className="md:hidden inline-flex h-9 w-9 items-center justify-center rounded-lg border border-slate-200 bg-white hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-slate-300"
              onClick={() => setOpen((v) => !v)}
              aria-label="Abrir menu"
              aria-expanded={open}
            >
              <svg viewBox="0 0 24 24" fill="none" className="h-5 w-5">
                <path
                  d="M4 6h16M4 12h16M4 18h16"
                  stroke="currentColor"
                  strokeWidth="1.8"
                  strokeLinecap="round"
                />
              </svg>
            </button>

            {/* AÃ§Ãµes Ã  direita */}
            <div className="hidden md:block">
              <Button variant="destructive" size="sm" onClick={logout}>Sair</Button>
            </div>
          </div>
        </div>

        {/* Nav */}
        <nav className="mx-auto max-w-7xl px-4 sm:px-6 pb-3 md:pb-4">
          <div
            className={[
              "md:flex md:flex-wrap md:items-center md:gap-2",
              open ? "block" : "hidden md:block",
            ].join(" ")}
          >
            {/* scroller horizontal quando necessÃ¡rio */}
            <ul className="flex gap-2 overflow-x-auto no-scrollbar py-2 md:py-0">
              {navItems.map((item) => (
                <li key={item.to} className="shrink-0">
                  <NavLink
                    to={item.to}
                    onClick={() => setOpen(false)}
                    className={({ isActive }) =>
                      [
                        "inline-flex items-center rounded-xl px-3 py-1.5 text-sm transition-colors border",
                        "focus:outline-none focus:ring-2 focus:ring-slate-300",
                        isActive
                          ? "bg-slate-900 text-white border-slate-900 shadow-sm"
                          : "bg-white text-slate-700 border-slate-200 hover:bg-slate-50 hover:text-slate-900",
                      ].join(" ")
                    }
                  >
                    {item.label}
                  </NavLink>
                </li>
              ))}
              {/* botÃ£o sair visÃ­vel no mobile dentro do menu */}
              <li className="md:hidden ml-auto">
                <button
                  onClick={logout}
                  className="inline-flex items-center rounded-xl px-3 py-1.5 text-sm bg-red-600 text-white hover:bg-red-700"
                >
                  Sair
                </button>
              </li>
            </ul>
          </div>
        </nav>

        {/* sombra suave separando conteÃºdo */}
        <div className="h-[10px] w-full bg-gradient-to-b from-black/5 to-transparent pointer-events-none" />
      </header>

      {/* ConteÃºdo */}
      <main className="mx-auto max-w-7xl px-4 sm:px-6 py-6">{children}</main>
    </div>
  );
};

const ProtectedArea: React.FC = () => {
  const { isAuthenticated, loadingAuth } = useAuth();
  if (loadingAuth) return <div className="p-6">Carregandoâ€¦</div>;
  if (!isAuthenticated) return <Navigate to="/login" replace />;
  return (
    <Layout>
      <Outlet />
    </Layout>
  );
};

export default function App() {
  return (
    <ErrorBoundary>
      <NotifyBridge />

      <Routes>
        {/* pÃºblicas */}
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />

        {/* protegidas */}
        <Route element={<ProtectedArea />}>
          <Route path="/" element={<Home />} />

          {/* Blocos */}
          <Route path="/blocos" element={<Blocos />} />
          <Route path="/blocos/:id" element={<BlocoDetalhe />} />

          {/* Clientes */}
          <Route path="/clientes" element={<Clientes />} />
          <Route path="/clientes/novo" element={<ClienteForm />} />
          <Route path="/clientes/:id/editar" element={<ClienteForm />} />
          <Route path="/clientes/:id" element={<ClienteDetalhes />} />
          <Route path="/clientes/:id/documentos" element={<ClienteDocumentoForm />} />

          {/* DomÃ­nios */}
          <Route path="/dominios" element={<Dominios />} />
          <Route path="/dominios/novo" element={<DominioForm />} />
          <Route path="/dominios/:id/editar" element={<DominioForm />} />
          <Route path="/dominios/:id/itens" element={<DominioItens />} />

          {/* Financeiro/auxiliares */}
          <Route path="/pagamentos" element={<PagamentoForm />} />
          <Route path="/historico-pagamentos" element={<HistoricoPagamentos />} />
          <Route path="/formas-pagamento" element={<FormaPagamentoForm />} />
          <Route path="/transportadoras" element={<TransportadoraForm />} />

          {/* Financeiro */}
          <Route path="/financeiro/receber" element={<FinanceiroReceber />} />
          <Route path="/financeiro/conferencia" element={<Conferencia />} />
        </Route>

        {/* 404 */}
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </ErrorBoundary>
  );
}


----- END frontend\src\App.tsx -----


----- BEGIN frontend\src\index.css -----

@import "tailwindcss";

/* seus overrides opcionais */
:root { color-scheme: light; }
body { margin: 0; }


----- END frontend\src\index.css -----


----- BEGIN frontend\src\main.tsx -----

// src/main.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import App from "./App";
import "./index.css";
import { AuthProvider } from "./contexts/AuthContext";
import { ToasterProvider } from "./lib/toast";
import { bindNotifier } from "./services/api";
import { NotifyBridge } from "./lib/notify-bridge";

// liga o notify() global do axios aos toasts
bindNotifier(NotifyBridge);

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <ToasterProvider>
          <App />
        </ToasterProvider>
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);


----- END frontend\src\main.tsx -----


----- BEGIN frontend\src\vite-env.d.ts -----

/// <reference types="vite/client" />


----- END frontend\src\vite-env.d.ts -----


----- BEGIN frontend\.env -----

# VITE_API_URL=https://x3nbflkg-3333.brs.devtunnels.ms
# # VITE_API_URL=https://x3nbflkg-3333.brs.devtunnels.ms

# VITE_FEATURE_DOMINIOS=0
# VITE_FEATURE_PAGAMENTOS=0
VITE_API_BASE=http://localhost:4010


----- END frontend\.env -----


----- BEGIN frontend\dump_frontend_package.json -----

{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.11.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.8.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@tailwindcss/vite": "^4.1.13",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^5.0.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.13",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.39.1",
    "vite": "^7.1.2"
  }
}


----- END frontend\dump_frontend_package.json -----


----- BEGIN frontend\eslint.config.js -----

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])


----- END frontend\eslint.config.js -----


----- BEGIN frontend\index.html -----

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


----- END frontend\index.html -----


----- BEGIN frontend\package-lock.json -----

{
  "name": "frontend",
  "version": "0.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "frontend",
      "version": "0.0.0",
      "dependencies": {
        "axios": "^1.11.0",
        "react": "^19.1.1",
        "react-dom": "^19.1.1",
        "react-router-dom": "^7.8.2"
      },
      "devDependencies": {
        "@eslint/js": "^9.33.0",
        "@tailwindcss/vite": "^4.1.13",
        "@types/react": "^19.1.10",
        "@types/react-dom": "^19.1.7",
        "@vitejs/plugin-react": "^5.0.0",
        "autoprefixer": "^10.4.21",
        "eslint": "^9.33.0",
        "eslint-plugin-react-hooks": "^5.2.0",
        "eslint-plugin-react-refresh": "^0.4.20",
        "globals": "^16.3.0",
        "postcss": "^8.5.6",
        "tailwindcss": "^4.1.13",
        "typescript": "~5.8.3",
        "typescript-eslint": "^8.39.1",
        "vite": "^7.1.2"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.4.tgz",
      "integrity": "sha512-YsmSKC29MJwf0gF8Rjjrg5LQCmyh+j/nD8/eP7f+BeoQTKYqs9RoWbjGOdy0+1Ekr68RJZMUOPVQaQisnIo4Rw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.4.tgz",
      "integrity": "sha512-2BCOP7TN8M+gVDj7/ht3hsaO/B/n5oDbiAyyvnRlNOs+u1o+JWNYTQrmpuNp1/Wq2gcFrI01JAW+paEKDMx/CA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.28.3",
        "@babel/helpers": "^7.28.4",
        "@babel/parser": "^7.28.4",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.4",
        "@babel/types": "^7.28.4",
        "@jridgewell/remapping": "^2.3.5",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.3.tgz",
      "integrity": "sha512-3lSpxGgvnmZznmBkCRnVREPUFJv2wrv9iAoFDvADJc0ypmdOxdUtcLeBgBJ6zE0PMeTKnxeQzyk0xTBq4Ep7zw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.3",
        "@babel/types": "^7.28.2",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.28.3.tgz",
      "integrity": "sha512-gytXUbs8k2sXS9PnQptz5o0QnpLL51SwASIORY6XaBKF88nsOT0Zw9szLqlSGQDP/4TljBAD5y98p2U1fqkdsw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.28.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.4.tgz",
      "integrity": "sha512-HFN59MmQXGHVyYadKLVumYsA9dBFun/ldYxipEjzA4196jpLZd8UjEEBLkbEkvfYreDqJhZxYAWFPtrfhNpj4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.4"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.4.tgz",
      "integrity": "sha512-yZbBqeM6TkpP9du/I2pUZnJsRMGGvOuIrhjzC1AwHwW+6he4mni6Bp/m8ijn0iOuZuPI2BfkCoSRunpyjnrQKg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.4"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.4.tgz",
      "integrity": "sha512-YEzuboP2qvQavAcjgQNVgsvHIDv6ZpwXvcvjmyySP2DIMuByS/6ioU5G9pYrWHM6T2YDfc7xga9iNzYOs12CFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.4",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.4",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.4.tgz",
      "integrity": "sha512-bkFqkLhh3pMBUQQkpVgWDWq/lqzc2678eUyDlTBhRqhCHFguYYGM0Efga7tYk4TogG/3x0EEl66/OQ+WGbWB/Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.9.tgz",
      "integrity": "sha512-OaGtL73Jck6pBKjNIe24BnFE6agGl+6KxDtTfHhy1HmhthfKouEcOhqpSL64K4/0WCtbKFLOdzD/44cJ4k9opA==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.9.tgz",
      "integrity": "sha512-5WNI1DaMtxQ7t7B6xa572XMXpHAaI/9Hnhk8lcxF4zVN4xstUgTlvuGDorBguKEnZO70qwEcLpfifMLoxiPqHQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.9.tgz",
      "integrity": "sha512-IDrddSmpSv51ftWslJMvl3Q2ZT98fUSL2/rlUXuVqRXHCs5EUF1/f+jbjF5+NG9UffUDMCiTyh8iec7u8RlTLg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.9.tgz",
      "integrity": "sha512-I853iMZ1hWZdNllhVZKm34f4wErd4lMyeV7BLzEExGEIZYsOzqDWDf+y082izYUE8gtJnYHdeDpN/6tUdwvfiw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.9.tgz",
      "integrity": "sha512-XIpIDMAjOELi/9PB30vEbVMs3GV1v2zkkPnuyRRURbhqjyzIINwj+nbQATh4H9GxUgH1kFsEyQMxwiLFKUS6Rg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.9.tgz",
      "integrity": "sha512-jhHfBzjYTA1IQu8VyrjCX4ApJDnH+ez+IYVEoJHeqJm9VhG9Dh2BYaJritkYK3vMaXrf7Ogr/0MQ8/MeIefsPQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.9.tgz",
      "integrity": "sha512-z93DmbnY6fX9+KdD4Ue/H6sYs+bhFQJNCPZsi4XWJoYblUqT06MQUdBCpcSfuiN72AbqeBFu5LVQTjfXDE2A6Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.9.tgz",
      "integrity": "sha512-mrKX6H/vOyo5v71YfXWJxLVxgy1kyt1MQaD8wZJgJfG4gq4DpQGpgTB74e5yBeQdyMTbgxp0YtNj7NuHN0PoZg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.9.tgz",
      "integrity": "sha512-HBU2Xv78SMgaydBmdor38lg8YDnFKSARg1Q6AT0/y2ezUAKiZvc211RDFHlEZRFNRVhcMamiToo7bDx3VEOYQw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.9.tgz",
      "integrity": "sha512-BlB7bIcLT3G26urh5Dmse7fiLmLXnRlopw4s8DalgZ8ef79Jj4aUcYbk90g8iCa2467HX8SAIidbL7gsqXHdRw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.9.tgz",
      "integrity": "sha512-e7S3MOJPZGp2QW6AK6+Ly81rC7oOSerQ+P8L0ta4FhVi+/j/v2yZzx5CqqDaWjtPFfYz21Vi1S0auHrap3Ma3A==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.9.tgz",
      "integrity": "sha512-Sbe10Bnn0oUAB2AalYztvGcK+o6YFFA/9829PhOCUS9vkJElXGdphz0A3DbMdP8gmKkqPmPcMJmJOrI3VYB1JQ==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.9.tgz",
      "integrity": "sha512-YcM5br0mVyZw2jcQeLIkhWtKPeVfAerES5PvOzaDxVtIyZ2NUBZKNLjC5z3/fUlDgT6w89VsxP2qzNipOaaDyA==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.9.tgz",
      "integrity": "sha512-++0HQvasdo20JytyDpFvQtNrEsAgNG2CY1CLMwGXfFTKGBGQT3bOeLSYE2l1fYdvML5KUuwn9Z8L1EWe2tzs1w==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.9.tgz",
      "integrity": "sha512-uNIBa279Y3fkjV+2cUjx36xkx7eSjb8IvnL01eXUKXez/CBHNRw5ekCGMPM0BcmqBxBcdgUWuUXmVWwm4CH9kg==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.9.tgz",
      "integrity": "sha512-Mfiphvp3MjC/lctb+7D287Xw1DGzqJPb/J2aHHcHxflUo+8tmN/6d4k6I2yFR7BVo5/g7x2Monq4+Yew0EHRIA==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.9.tgz",
      "integrity": "sha512-iSwByxzRe48YVkmpbgoxVzn76BXjlYFXC7NvLYq+b+kDjyyk30J0JY47DIn8z1MO3K0oSl9fZoRmZPQI4Hklzg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-arm64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.9.tgz",
      "integrity": "sha512-9jNJl6FqaUG+COdQMjSCGW4QiMHH88xWbvZ+kRVblZsWrkXlABuGdFJ1E9L7HK+T0Yqd4akKNa/lO0+jDxQD4Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.9.tgz",
      "integrity": "sha512-RLLdkflmqRG8KanPGOU7Rpg829ZHu8nFy5Pqdi9U01VYtG9Y0zOG6Vr2z4/S+/3zIyOxiK6cCeYNWOFR9QP87g==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-arm64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.9.tgz",
      "integrity": "sha512-YaFBlPGeDasft5IIM+CQAhJAqS3St3nJzDEgsgFixcfZeyGPCd6eJBWzke5piZuZ7CtL656eOSYKk4Ls2C0FRQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.9.tgz",
      "integrity": "sha512-1MkgTCuvMGWuqVtAvkpkXFmtL8XhWy+j4jaSO2wxfJtilVCi0ZE37b8uOdMItIHz4I6z1bWWtEX4CJwcKYLcuA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openharmony-arm64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/openharmony-arm64/-/openharmony-arm64-0.25.9.tgz",
      "integrity": "sha512-4Xd0xNiMVXKh6Fa7HEJQbrpP3m3DDn43jKxMjxLLRjWnRsfxjORYJlXPO4JNcXtOyfajXorRKY9NkOpTHptErg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openharmony"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.9.tgz",
      "integrity": "sha512-WjH4s6hzo00nNezhp3wFIAfmGZ8U7KtrJNlFMRKxiI9mxEK1scOMAaa9i4crUtu+tBr+0IN6JCuAcSBJZfnphw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.9.tgz",
      "integrity": "sha512-mGFrVJHmZiRqmP8xFOc6b84/7xa5y5YvR1x8djzXpJBSv/UsNK6aqec+6JDjConTgvvQefdGhFDAs2DLAds6gQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.9.tgz",
      "integrity": "sha512-b33gLVU2k11nVx1OhX3C8QQP6UHQK4ZtN56oFWvVXvz2VkDoe6fbG8TOgHFxEvqeqohmRnIHe5A1+HADk4OQww==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.9.tgz",
      "integrity": "sha512-PPOl1mi6lpLNQxnGoyAfschAodRFYXJ+9fs6WHXz7CSWKbOqiMZsubC+BQsVKuul+3vKLuwTHsS2c2y9EoKwxQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.9.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.9.0.tgz",
      "integrity": "sha512-ayVFHdtZ+hsq1t2Dy24wCmGXGe4q9Gu3smhLYALJrr473ZH27MsnSL+LKUlimp4BWJqMDMLmPpx/Q9R3OAlL4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.21.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.21.0.tgz",
      "integrity": "sha512-ENIdc4iLu0d93HeYirvKmrzshzofPw6VkZRKQGe9Nv46ZnWUzcF1xV01dcvEg/1wXUR61OmmlSfyeyO7EvjLxQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.6",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/config-helpers": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.3.1.tgz",
      "integrity": "sha512-xR93k9WhrDYpXHORXpxVL5oHj3Era7wo6k/Wd8/IsQNnZUTzkGS29lyn3nAT05v6ltUuTFVCCYDEGfy2Or/sPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.15.2",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.15.2.tgz",
      "integrity": "sha512-78Md3/Rrxh83gCxoUc0EiciuOHsIITzLy53m3d9UyiW8y9Dj2D29FeETqyKA+BRK76tnTp6RXWb3pCay8Oyomg==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.35.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.35.0.tgz",
      "integrity": "sha512-30iXE9whjlILfWobBkNerJo+TXYsgVM5ERQwMcMKCHckHflCmf7wXDAHlARoWnh0s1U72WqlbeyE7iAcCzuCPw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.3.5.tgz",
      "integrity": "sha512-Z5kJ+wU3oA7MMIqVR9tyZRtjYPr4OC004Q4Rw7pgOKUOKkJfZ3O24nz3WYfGRpMDNmcOi3TwQOmgm7B7Tpii0w==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.15.2",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.7",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.7.tgz",
      "integrity": "sha512-/zUx+yOsIrG4Y43Eh2peDeKCxlRt/gET6aHfaKpuq267qXdYDFViVHfMaLyygZOnl0kGWxFIgsBy8QFuTLUXEQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanfs/core": "^0.19.1",
        "@humanwhocodes/retry": "^0.4.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.4.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.3.tgz",
      "integrity": "sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@isaacs/fs-minipass": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/@isaacs/fs-minipass/-/fs-minipass-4.0.1.tgz",
      "integrity": "sha512-wgm9Ehl2jpeqP3zw/7mo3kRHFp5MEDhqAdwy1fTGkHAwnkGOVsgpvQhL8B5n1qlb01jV3n/bI0ZfZp5lWA1k4w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "minipass": "^7.0.4"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.13",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz",
      "integrity": "sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/remapping": {
      "version": "2.3.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/remapping/-/remapping-2.3.5.tgz",
      "integrity": "sha512-LI9u/+laYG4Ds1TDKSJW2YPrIlcVYOwi2fUC6xB43lueCjgxV4lffOCZCtYFiH6TNOX+tQKXx97T4IKHbhyHEQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
      "integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.30",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.30.tgz",
      "integrity": "sha512-GQ7Nw5G2lTu/BtHTKfXhKHok2WGetd4XYcVKGx00SjAk8GMwgJM3zr6zORiPGuOE+/vkc90KtTosSSvaCjKb2Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@rolldown/pluginutils": {
      "version": "1.0.0-beta.34",
      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.34.tgz",
      "integrity": "sha512-LyAREkZHP5pMom7c24meKmJCdhf2hEyvam2q0unr3or9ydwDL+DJ8chTF6Av/RFPb3rH8UFBdMzO5MxTZW97oA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.50.1.tgz",
      "integrity": "sha512-HJXwzoZN4eYTdD8bVV22DN8gsPCAj3V20NHKOs8ezfXanGpmVPR7kalUHd+Y31IJp9stdB87VKPFbsGY3H/2ag==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.50.1.tgz",
      "integrity": "sha512-PZlsJVcjHfcH53mOImyt3bc97Ep3FJDXRpk9sMdGX0qgLmY0EIWxCag6EigerGhLVuL8lDVYNnSo8qnTElO4xw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.50.1.tgz",
      "integrity": "sha512-xc6i2AuWh++oGi4ylOFPmzJOEeAa2lJeGUGb4MudOtgfyyjr4UPNK+eEWTPLvmPJIY/pgw6ssFIox23SyrkkJw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.50.1.tgz",
      "integrity": "sha512-2ofU89lEpDYhdLAbRdeyz/kX3Y2lpYc6ShRnDjY35bZhd2ipuDMDi6ZTQ9NIag94K28nFMofdnKeHR7BT0CATw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.50.1.tgz",
      "integrity": "sha512-wOsE6H2u6PxsHY/BeFHA4VGQN3KUJFZp7QJBmDYI983fgxq5Th8FDkVuERb2l9vDMs1D5XhOrhBrnqcEY6l8ZA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.50.1.tgz",
      "integrity": "sha512-A/xeqaHTlKbQggxCqispFAcNjycpUEHP52mwMQZUNqDUJFFYtPHCXS1VAG29uMlDzIVr+i00tSFWFLivMcoIBQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.50.1.tgz",
      "integrity": "sha512-54v4okehwl5TaSIkpp97rAHGp7t3ghinRd/vyC1iXqXMfjYUTm7TfYmCzXDoHUPTTf36L8pr0E7YsD3CfB3ZDg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.50.1.tgz",
      "integrity": "sha512-p/LaFyajPN/0PUHjv8TNyxLiA7RwmDoVY3flXHPSzqrGcIp/c2FjwPPP5++u87DGHtw+5kSH5bCJz0mvXngYxw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.50.1.tgz",
      "integrity": "sha512-2AbMhFFkTo6Ptna1zO7kAXXDLi7H9fGTbVaIq2AAYO7yzcAsuTNWPHhb2aTA6GPiP+JXh85Y8CiS54iZoj4opw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.50.1.tgz",
      "integrity": "sha512-Cgef+5aZwuvesQNw9eX7g19FfKX5/pQRIyhoXLCiBOrWopjo7ycfB292TX9MDcDijiuIJlx1IzJz3IoCPfqs9w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.50.1.tgz",
      "integrity": "sha512-RPhTwWMzpYYrHrJAS7CmpdtHNKtt2Ueo+BlLBjfZEhYBhK00OsEqM08/7f+eohiF6poe0YRDDd8nAvwtE/Y62Q==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-ppc64-gnu": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.50.1.tgz",
      "integrity": "sha512-eSGMVQw9iekut62O7eBdbiccRguuDgiPMsw++BVUg+1K7WjZXHOg/YOT9SWMzPZA+w98G+Fa1VqJgHZOHHnY0Q==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.50.1.tgz",
      "integrity": "sha512-S208ojx8a4ciIPrLgazF6AgdcNJzQE4+S9rsmOmDJkusvctii+ZvEuIC4v/xFqzbuP8yDjn73oBlNDgF6YGSXQ==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.50.1.tgz",
      "integrity": "sha512-3Ag8Ls1ggqkGUvSZWYcdgFwriy2lWo+0QlYgEFra/5JGtAd6C5Hw59oojx1DeqcA2Wds2ayRgvJ4qxVTzCHgzg==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.50.1.tgz",
      "integrity": "sha512-t9YrKfaxCYe7l7ldFERE1BRg/4TATxIg+YieHQ966jwvo7ddHJxPj9cNFWLAzhkVsbBvNA4qTbPVNsZKBO4NSg==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.50.1.tgz",
      "integrity": "sha512-MCgtFB2+SVNuQmmjHf+wfI4CMxy3Tk8XjA5Z//A0AKD7QXUYFMQcns91K6dEHBvZPCnhJSyDWLApk40Iq/H3tA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.50.1.tgz",
      "integrity": "sha512-nEvqG+0jeRmqaUMuwzlfMKwcIVffy/9KGbAGyoa26iu6eSngAYQ512bMXuqqPrlTyfqdlB9FVINs93j534UJrg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-openharmony-arm64": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-openharmony-arm64/-/rollup-openharmony-arm64-4.50.1.tgz",
      "integrity": "sha512-RDsLm+phmT3MJd9SNxA9MNuEAO/J2fhW8GXk62G/B4G7sLVumNFbRwDL6v5NrESb48k+QMqdGbHgEtfU0LCpbA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openharmony"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.50.1.tgz",
      "integrity": "sha512-hpZB/TImk2FlAFAIsoElM3tLzq57uxnGYwplg6WDyAxbYczSi8O2eQ+H2Lx74504rwKtZ3N2g4bCUkiamzS6TQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.50.1.tgz",
      "integrity": "sha512-SXjv8JlbzKM0fTJidX4eVsH+Wmnp0/WcD8gJxIZyR6Gay5Qcsmdbi9zVtnbkGPG8v2vMR1AD06lGWy5FLMcG7A==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.50.1.tgz",
      "integrity": "sha512-StxAO/8ts62KZVRAm4JZYq9+NqNsV7RvimNK+YM7ry//zebEH6meuugqW/P5OFUCjyQgui+9fUxT6d5NShvMvA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@tailwindcss/node": {
      "version": "4.1.13",
      "resolved": "https://registry.npmjs.org/@tailwindcss/node/-/node-4.1.13.tgz",
      "integrity": "sha512-eq3ouolC1oEFOAvOMOBAmfCIqZBJuvWvvYWh5h5iOYfe1HFC6+GZ6EIL0JdM3/niGRJmnrOc+8gl9/HGUaaptw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/remapping": "^2.3.4",
        "enhanced-resolve": "^5.18.3",
        "jiti": "^2.5.1",
        "lightningcss": "1.30.1",
        "magic-string": "^0.30.18",
        "source-map-js": "^1.2.1",
        "tailwindcss": "4.1.13"
      }
    },
    "node_modules/@tailwindcss/oxide": {
      "version": "4.1.13",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide/-/oxide-4.1.13.tgz",
      "integrity": "sha512-CPgsM1IpGRa880sMbYmG1s4xhAy3xEt1QULgTJGQmZUeNgXFR7s1YxYygmJyBGtou4SyEosGAGEeYqY7R53bIA==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "detect-libc": "^2.0.4",
        "tar": "^7.4.3"
      },
      "engines": {
        "node": ">= 10"
      },
      "optionalDependencies": {
        "@tailwindcss/oxide-android-arm64": "4.1.13",
        "@tailwindcss/oxide-darwin-arm64": "4.1.13",
        "@tailwindcss/oxide-darwin-x64": "4.1.13",
        "@tailwindcss/oxide-freebsd-x64": "4.1.13",
        "@tailwindcss/oxide-linux-arm-gnueabihf": "4.1.13",
        "@tailwindcss/oxide-linux-arm64-gnu": "4.1.13",
        "@tailwindcss/oxide-linux-arm64-musl": "4.1.13",
        "@tailwindcss/oxide-linux-x64-gnu": "4.1.13",
        "@tailwindcss/oxide-linux-x64-musl": "4.1.13",
        "@tailwindcss/oxide-wasm32-wasi": "4.1.13",
        "@tailwindcss/oxide-win32-arm64-msvc": "4.1.13",
        "@tailwindcss/oxide-win32-x64-msvc": "4.1.13"
      }
    },
    "node_modules/@tailwindcss/oxide-android-arm64": {
      "version": "4.1.13",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-android-arm64/-/oxide-android-arm64-4.1.13.tgz",
      "integrity": "sha512-BrpTrVYyejbgGo57yc8ieE+D6VT9GOgnNdmh5Sac6+t0m+v+sKQevpFVpwX3pBrM2qKrQwJ0c5eDbtjouY/+ew==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-darwin-arm64": {
      "version": "4.1.13",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-darwin-arm64/-/oxide-darwin-arm64-4.1.13.tgz",
      "integrity": "sha512-YP+Jksc4U0KHcu76UhRDHq9bx4qtBftp9ShK/7UGfq0wpaP96YVnnjFnj3ZFrUAjc5iECzODl/Ts0AN7ZPOANQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-darwin-x64": {
      "version": "4.1.13",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-darwin-x64/-/oxide-darwin-x64-4.1.13.tgz",
      "integrity": "sha512-aAJ3bbwrn/PQHDxCto9sxwQfT30PzyYJFG0u/BWZGeVXi5Hx6uuUOQEI2Fa43qvmUjTRQNZnGqe9t0Zntexeuw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-freebsd-x64": {
      "version": "4.1.13",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-freebsd-x64/-/oxide-freebsd-x64-4.1.13.tgz",
      "integrity": "sha512-Wt8KvASHwSXhKE/dJLCCWcTSVmBj3xhVhp/aF3RpAhGeZ3sVo7+NTfgiN8Vey/Fi8prRClDs6/f0KXPDTZE6nQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-linux-arm-gnueabihf": {
      "version": "4.1.13",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm-gnueabihf/-/oxide-linux-arm-gnueabihf-4.1.13.tgz",
      "integrity": "sha512-mbVbcAsW3Gkm2MGwA93eLtWrwajz91aXZCNSkGTx/R5eb6KpKD5q8Ueckkh9YNboU8RH7jiv+ol/I7ZyQ9H7Bw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-linux-arm64-gnu": {
      "version": "4.1.13",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm64-gnu/-/oxide-linux-arm64-gnu-4.1.13.tgz",
      "integrity": "sha512-wdtfkmpXiwej/yoAkrCP2DNzRXCALq9NVLgLELgLim1QpSfhQM5+ZxQQF8fkOiEpuNoKLp4nKZ6RC4kmeFH0HQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-linux-arm64-musl": {
      "version": "4.1.13",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm64-musl/-/oxide-linux-arm64-musl-4.1.13.tgz",
      "integrity": "sha512-hZQrmtLdhyqzXHB7mkXfq0IYbxegaqTmfa1p9MBj72WPoDD3oNOh1Lnxf6xZLY9C3OV6qiCYkO1i/LrzEdW2mg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-linux-x64-gnu": {
      "version": "4.1.13",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-x64-gnu/-/oxide-linux-x64-gnu-4.1.13.tgz",
      "integrity": "sha512-uaZTYWxSXyMWDJZNY1Ul7XkJTCBRFZ5Fo6wtjrgBKzZLoJNrG+WderJwAjPzuNZOnmdrVg260DKwXCFtJ/hWRQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-linux-x64-musl": {
      "version": "4.1.13",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-x64-musl/-/oxide-linux-x64-musl-4.1.13.tgz",
      "integrity": "sha512-oXiPj5mi4Hdn50v5RdnuuIms0PVPI/EG4fxAfFiIKQh5TgQgX7oSuDWntHW7WNIi/yVLAiS+CRGW4RkoGSSgVQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-wasm32-wasi": {
      "version": "4.1.13",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-wasm32-wasi/-/oxide-wasm32-wasi-4.1.13.tgz",
      "integrity": "sha512-+LC2nNtPovtrDwBc/nqnIKYh/W2+R69FA0hgoeOn64BdCX522u19ryLh3Vf3F8W49XBcMIxSe665kwy21FkhvA==",
      "bundleDependencies": [
        "@napi-rs/wasm-runtime",
        "@emnapi/core",
        "@emnapi/runtime",
        "@tybys/wasm-util",
        "@emnapi/wasi-threads",
        "tslib"
      ],
      "cpu": [
        "wasm32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@emnapi/core": "^1.4.5",
        "@emnapi/runtime": "^1.4.5",
        "@emnapi/wasi-threads": "^1.0.4",
        "@napi-rs/wasm-runtime": "^0.2.12",
        "@tybys/wasm-util": "^0.10.0",
        "tslib": "^2.8.0"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@tailwindcss/oxide-win32-arm64-msvc": {
      "version": "4.1.13",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-win32-arm64-msvc/-/oxide-win32-arm64-msvc-4.1.13.tgz",
      "integrity": "sha512-dziTNeQXtoQ2KBXmrjCxsuPk3F3CQ/yb7ZNZNA+UkNTeiTGgfeh+gH5Pi7mRncVgcPD2xgHvkFCh/MhZWSgyQg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-win32-x64-msvc": {
      "version": "4.1.13",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-win32-x64-msvc/-/oxide-win32-x64-msvc-4.1.13.tgz",
      "integrity": "sha512-3+LKesjXydTkHk5zXX01b5KMzLV1xl2mcktBJkje7rhFUpUlYJy7IMOLqjIRQncLTa1WZZiFY/foAeB5nmaiTw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/vite": {
      "version": "4.1.13",
      "resolved": "https://registry.npmjs.org/@tailwindcss/vite/-/vite-4.1.13.tgz",
      "integrity": "sha512-0PmqLQ010N58SbMTJ7BVJ4I2xopiQn/5i6nlb4JmxzQf8zcS5+m2Cv6tqh+sfDwtIdjoEnOvwsGQ1hkUi8QEHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@tailwindcss/node": "4.1.13",
        "@tailwindcss/oxide": "4.1.13",
        "tailwindcss": "4.1.13"
      },
      "peerDependencies": {
        "vite": "^5.2.0 || ^6 || ^7"
      }
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.28.0.tgz",
      "integrity": "sha512-8PvcXf70gTDZBgt9ptxJ8elBeBjcLOAcOtoO/mPJjtji1+CdGbHgm77om1GrsPxsiE+uXIpNSK64UYaIwQXd4Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.2"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "19.1.12",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.12.tgz",
      "integrity": "sha512-cMoR+FoAf/Jyq6+Df2/Z41jISvGZZ2eTlnsaJRptmZ76Caldwy1odD4xTr/gNV9VLj0AWgg/nmkevIyUfIIq5w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "19.1.9",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.1.9.tgz",
      "integrity": "sha512-qXRuZaOsAdXKFyOhRBg6Lqqc0yay13vN7KrIg4L7N4aaHN68ma9OK3NE1BoDFgFOTfM7zg+3/8+2n8rLUH3OKQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^19.0.0"
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.43.0.tgz",
      "integrity": "sha512-8tg+gt7ENL7KewsKMKDHXR1vm8tt9eMxjJBYINf6swonlWgkYn5NwyIgXpbbDxTNU5DgpDFfj95prcTq2clIQQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/regexpp": "^4.10.0",
        "@typescript-eslint/scope-manager": "8.43.0",
        "@typescript-eslint/type-utils": "8.43.0",
        "@typescript-eslint/utils": "8.43.0",
        "@typescript-eslint/visitor-keys": "8.43.0",
        "graphemer": "^1.4.0",
        "ignore": "^7.0.0",
        "natural-compare": "^1.4.0",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^8.43.0",
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin/node_modules/ignore": {
      "version": "7.0.5",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-7.0.5.tgz",
      "integrity": "sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.43.0.tgz",
      "integrity": "sha512-B7RIQiTsCBBmY+yW4+ILd6mF5h1FUwJsVvpqkrgpszYifetQ2Ke+Z4u6aZh0CblkUGIdR59iYVyXqqZGkZ3aBw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/scope-manager": "8.43.0",
        "@typescript-eslint/types": "8.43.0",
        "@typescript-eslint/typescript-estree": "8.43.0",
        "@typescript-eslint/visitor-keys": "8.43.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/project-service": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/project-service/-/project-service-8.43.0.tgz",
      "integrity": "sha512-htB/+D/BIGoNTQYffZw4uM4NzzuolCoaA/BusuSIcC8YjmBYQioew5VUZAYdAETPjeed0hqCaW7EHg+Robq8uw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/tsconfig-utils": "^8.43.0",
        "@typescript-eslint/types": "^8.43.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.43.0.tgz",
      "integrity": "sha512-daSWlQ87ZhsjrbMLvpuuMAt3y4ba57AuvadcR7f3nl8eS3BjRc8L9VLxFLk92RL5xdXOg6IQ+qKjjqNEimGuAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.43.0",
        "@typescript-eslint/visitor-keys": "8.43.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/tsconfig-utils": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/tsconfig-utils/-/tsconfig-utils-8.43.0.tgz",
      "integrity": "sha512-ALC2prjZcj2YqqL5X/bwWQmHA2em6/94GcbB/KKu5SX3EBDOsqztmmX1kMkvAJHzxk7TazKzJfFiEIagNV3qEA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.43.0.tgz",
      "integrity": "sha512-qaH1uLBpBuBBuRf8c1mLJ6swOfzCXryhKND04Igr4pckzSEW9JX5Aw9AgW00kwfjWJF0kk0ps9ExKTfvXfw4Qg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.43.0",
        "@typescript-eslint/typescript-estree": "8.43.0",
        "@typescript-eslint/utils": "8.43.0",
        "debug": "^4.3.4",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.43.0.tgz",
      "integrity": "sha512-vQ2FZaxJpydjSZJKiSW/LJsabFFvV7KgLC5DiLhkBcykhQj8iK9BOaDmQt74nnKdLvceM5xmhaTF+pLekrxEkw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.43.0.tgz",
      "integrity": "sha512-7Vv6zlAhPb+cvEpP06WXXy/ZByph9iL6BQRBDj4kmBsW98AqEeQHlj/13X+sZOrKSo9/rNKH4Ul4f6EICREFdw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/project-service": "8.43.0",
        "@typescript-eslint/tsconfig-utils": "8.43.0",
        "@typescript-eslint/types": "8.43.0",
        "@typescript-eslint/visitor-keys": "8.43.0",
        "debug": "^4.3.4",
        "fast-glob": "^3.3.2",
        "is-glob": "^4.0.3",
        "minimatch": "^9.0.4",
        "semver": "^7.6.0",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.43.0.tgz",
      "integrity": "sha512-S1/tEmkUeeswxd0GGcnwuVQPFWo8NzZTOMxCvw8BX7OMxnNae+i8Tm7REQen/SwUIPoPqfKn7EaZ+YLpiB3k9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.7.0",
        "@typescript-eslint/scope-manager": "8.43.0",
        "@typescript-eslint/types": "8.43.0",
        "@typescript-eslint/typescript-estree": "8.43.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.43.0.tgz",
      "integrity": "sha512-T+S1KqRD4sg/bHfLwrpF/K3gQLBM1n7Rp7OjjikjTEssI2YJzQpi5WXoynOaQ93ERIuq3O8RBTOUYDKszUCEHw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.43.0",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-5.0.2.tgz",
      "integrity": "sha512-tmyFgixPZCx2+e6VO9TNITWcCQl8+Nl/E8YbAyPVv85QCc7/A3JrdfG2A8gIzvVhWuzMOVrFW1aReaNxrI6tbw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.28.3",
        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
        "@rolldown/pluginutils": "1.0.0-beta.34",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^20.19.0 || >=22.12.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/autoprefixer": {
      "version": "10.4.21",
      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.21.tgz",
      "integrity": "sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.24.4",
        "caniuse-lite": "^1.0.30001702",
        "fraction.js": "^4.3.7",
        "normalize-range": "^0.1.2",
        "picocolors": "^1.1.1",
        "postcss-value-parser": "^4.2.0"
      },
      "bin": {
        "autoprefixer": "bin/autoprefixer"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/axios": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.11.0.tgz",
      "integrity": "sha512-1Lx3WLFQWm3ooKDYZD1eXmoGO9fxYQjrycfHFC8P0sCfQVXyROp0p9PFWBehewBOdCwHc+f/b8I0fMto5eSfwA==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.4",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.4",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.4.tgz",
      "integrity": "sha512-4jYpcjabC606xJ3kw2QwGEZKX0Aw7sgQdZCvIK9dhVSPh76BKo+C+btT1RRofH7B+8iNpEbgGNVWiLki5q93yg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001737",
        "electron-to-chromium": "^1.5.211",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001741",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001741.tgz",
      "integrity": "sha512-QGUGitqsc8ARjLdgAfxETDhRbJ0REsP6O3I96TAth/mVjh2cYzN2u+3AzPP3aVSm2FehEItaJw1xd+IGBXWeSw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/chownr": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-3.0.0.tgz",
      "integrity": "sha512-+IxzY9BZOQd/XuYPRmrvEVjF/nqj5kgT4kEq7VofrDoM1MxoRjEWkrCC3EtLi59TVawxTAn+orJwFQcrqEN1+g==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cookie": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-1.0.2.tgz",
      "integrity": "sha512-9Kr/j4O16ISv8zBBhJoi4bXOYNTkFLOqSL3UDB0njXxCXNezjeyVrJyGOWtgfs/q2km1gwBcfH8q1yEGoMYunA==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
      "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.215",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.215.tgz",
      "integrity": "sha512-TIvGp57UpeNetj/wV/xpFNpWGb0b/ROw372lHPx5Aafx02gjTBtWnEEcaSX3W2dLM3OSdGGyHX/cHl01JQsLaQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/enhanced-resolve": {
      "version": "5.18.3",
      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.18.3.tgz",
      "integrity": "sha512-d4lC8xfavMeBjzGr2vECC3fsGXziXZQyJxD868h2M/mBI3PwAuODxAkLkq5HYuvrPYcUtiLzsTo8U3PgX3Ocww==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.4",
        "tapable": "^2.2.0"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/esbuild": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.9.tgz",
      "integrity": "sha512-CRbODhYyQx3qp7ZEwzxOk4JBqmD/seJrzPa/cGjY1VtIn5E09Oi9/dB4JwctnfZ8Q8iT7rioVv5k/FNT/uf54g==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.25.9",
        "@esbuild/android-arm": "0.25.9",
        "@esbuild/android-arm64": "0.25.9",
        "@esbuild/android-x64": "0.25.9",
        "@esbuild/darwin-arm64": "0.25.9",
        "@esbuild/darwin-x64": "0.25.9",
        "@esbuild/freebsd-arm64": "0.25.9",
        "@esbuild/freebsd-x64": "0.25.9",
        "@esbuild/linux-arm": "0.25.9",
        "@esbuild/linux-arm64": "0.25.9",
        "@esbuild/linux-ia32": "0.25.9",
        "@esbuild/linux-loong64": "0.25.9",
        "@esbuild/linux-mips64el": "0.25.9",
        "@esbuild/linux-ppc64": "0.25.9",
        "@esbuild/linux-riscv64": "0.25.9",
        "@esbuild/linux-s390x": "0.25.9",
        "@esbuild/linux-x64": "0.25.9",
        "@esbuild/netbsd-arm64": "0.25.9",
        "@esbuild/netbsd-x64": "0.25.9",
        "@esbuild/openbsd-arm64": "0.25.9",
        "@esbuild/openbsd-x64": "0.25.9",
        "@esbuild/openharmony-arm64": "0.25.9",
        "@esbuild/sunos-x64": "0.25.9",
        "@esbuild/win32-arm64": "0.25.9",
        "@esbuild/win32-ia32": "0.25.9",
        "@esbuild/win32-x64": "0.25.9"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "9.35.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.35.0.tgz",
      "integrity": "sha512-QePbBFMJFjgmlE+cXAlbHZbHpdFVS2E/6vzCy7aKlebddvl1vadiC4JFV5u/wqTkNUwEV8WrQi257jf5f06hrg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.8.0",
        "@eslint-community/regexpp": "^4.12.1",
        "@eslint/config-array": "^0.21.0",
        "@eslint/config-helpers": "^0.3.1",
        "@eslint/core": "^0.15.2",
        "@eslint/eslintrc": "^3.3.1",
        "@eslint/js": "9.35.0",
        "@eslint/plugin-kit": "^0.3.5",
        "@humanfs/node": "^0.16.6",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.4.2",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.6",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.4.0",
        "eslint-visitor-keys": "^4.2.1",
        "espree": "^10.4.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.2.0.tgz",
      "integrity": "sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
      }
    },
    "node_modules/eslint-plugin-react-refresh": {
      "version": "0.4.20",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.20.tgz",
      "integrity": "sha512-XpbHQ2q5gUF8BGOX4dHe+71qoirYMhApEPZ7sfhF/dNnOF1UXnCMGZf79SFTBO7Bz5YEIT4TMieSlJBWhP9WBA==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "eslint": ">=8.40"
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.4.0.tgz",
      "integrity": "sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz",
      "integrity": "sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "10.4.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.4.0.tgz",
      "integrity": "sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.15.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-glob": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.8"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-glob/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fastq": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/follow-redirects": {
      "version": "1.15.11",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.11.tgz",
      "integrity": "sha512-deG2P0JfjrTxl50XGCDyfI97ZGVCxIpfKYmfyrQ54n5FO/0gfIES8C/Psl6kWVDolizcaaxZJnTS0QSMxvnsBQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.4.tgz",
      "integrity": "sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fraction.js": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
      "integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "*"
      },
      "funding": {
        "type": "patreon",
        "url": "https://github.com/sponsors/rawify"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "16.3.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-16.3.0.tgz",
      "integrity": "sha512-bqWEnJ1Nt3neqx2q5SFfGS8r/ahumIakg3HcwtNlrVlwXIeNumWn/c7Pn/wKzGhf6SaW6H6uWXLqC30STCMchQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/jiti": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/jiti/-/jiti-2.5.1.tgz",
      "integrity": "sha512-twQoecYPiVA5K/h6SxtORw/Bs3ar+mLUtoPSc7iMXzQzK8d7eJ/R09wmTwAjiamETn1cXYPGfNnu7DMoHgu12w==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jiti": "lib/jiti-cli.mjs"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/lightningcss": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss/-/lightningcss-1.30.1.tgz",
      "integrity": "sha512-xi6IyHML+c9+Q3W0S4fCQJOym42pyurFiJUHEcEyHS0CeKzia4yZDEsLlqOFykxOdHpNy0NmvVO31vcSqAxJCg==",
      "dev": true,
      "license": "MPL-2.0",
      "dependencies": {
        "detect-libc": "^2.0.3"
      },
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      },
      "optionalDependencies": {
        "lightningcss-darwin-arm64": "1.30.1",
        "lightningcss-darwin-x64": "1.30.1",
        "lightningcss-freebsd-x64": "1.30.1",
        "lightningcss-linux-arm-gnueabihf": "1.30.1",
        "lightningcss-linux-arm64-gnu": "1.30.1",
        "lightningcss-linux-arm64-musl": "1.30.1",
        "lightningcss-linux-x64-gnu": "1.30.1",
        "lightningcss-linux-x64-musl": "1.30.1",
        "lightningcss-win32-arm64-msvc": "1.30.1",
        "lightningcss-win32-x64-msvc": "1.30.1"
      }
    },
    "node_modules/lightningcss-darwin-arm64": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-darwin-arm64/-/lightningcss-darwin-arm64-1.30.1.tgz",
      "integrity": "sha512-c8JK7hyE65X1MHMN+Viq9n11RRC7hgin3HhYKhrMyaXflk5GVplZ60IxyoVtzILeKr+xAJwg6zK6sjTBJ0FKYQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-darwin-x64": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-darwin-x64/-/lightningcss-darwin-x64-1.30.1.tgz",
      "integrity": "sha512-k1EvjakfumAQoTfcXUcHQZhSpLlkAuEkdMBsI/ivWw9hL+7FtilQc0Cy3hrx0AAQrVtQAbMI7YjCgYgvn37PzA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-freebsd-x64": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-freebsd-x64/-/lightningcss-freebsd-x64-1.30.1.tgz",
      "integrity": "sha512-kmW6UGCGg2PcyUE59K5r0kWfKPAVy4SltVeut+umLCFoJ53RdCUWxcRDzO1eTaxf/7Q2H7LTquFHPL5R+Gjyig==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-linux-arm-gnueabihf": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm-gnueabihf/-/lightningcss-linux-arm-gnueabihf-1.30.1.tgz",
      "integrity": "sha512-MjxUShl1v8pit+6D/zSPq9S9dQ2NPFSQwGvxBCYaBYLPlCWuPh9/t1MRS8iUaR8i+a6w7aps+B4N0S1TYP/R+Q==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-linux-arm64-gnu": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm64-gnu/-/lightningcss-linux-arm64-gnu-1.30.1.tgz",
      "integrity": "sha512-gB72maP8rmrKsnKYy8XUuXi/4OctJiuQjcuqWNlJQ6jZiWqtPvqFziskH3hnajfvKB27ynbVCucKSm2rkQp4Bw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-linux-arm64-musl": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm64-musl/-/lightningcss-linux-arm64-musl-1.30.1.tgz",
      "integrity": "sha512-jmUQVx4331m6LIX+0wUhBbmMX7TCfjF5FoOH6SD1CttzuYlGNVpA7QnrmLxrsub43ClTINfGSYyHe2HWeLl5CQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-linux-x64-gnu": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-linux-x64-gnu/-/lightningcss-linux-x64-gnu-1.30.1.tgz",
      "integrity": "sha512-piWx3z4wN8J8z3+O5kO74+yr6ze/dKmPnI7vLqfSqI8bccaTGY5xiSGVIJBDd5K5BHlvVLpUB3S2YCfelyJ1bw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-linux-x64-musl": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-linux-x64-musl/-/lightningcss-linux-x64-musl-1.30.1.tgz",
      "integrity": "sha512-rRomAK7eIkL+tHY0YPxbc5Dra2gXlI63HL+v1Pdi1a3sC+tJTcFrHX+E86sulgAXeI7rSzDYhPSeHHjqFhqfeQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-win32-arm64-msvc": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-win32-arm64-msvc/-/lightningcss-win32-arm64-msvc-1.30.1.tgz",
      "integrity": "sha512-mSL4rqPi4iXq5YVqzSsJgMVFENoa4nGTT/GjO2c0Yl9OuQfPsIfncvLrEW6RbbB24WtZ3xP/2CCmI3tNkNV4oA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-win32-x64-msvc": {
      "version": "1.30.1",
      "resolved": "https://registry.npmjs.org/lightningcss-win32-x64-msvc/-/lightningcss-win32-x64-msvc-1.30.1.tgz",
      "integrity": "sha512-PVqXh48wh4T53F/1CCu8PIPCxLzWyCnn/9T5W1Jpmdy5h9Cwd+0YQS6/LwhHXSafuc61/xg9Lv5OrCby6a++jg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/magic-string": {
      "version": "0.30.19",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.19.tgz",
      "integrity": "sha512-2N21sPY9Ws53PZvsEpVtNuSW+ScYbQdp4b9qUaL+9QkHUrGFKo56Lg9Emg5s9V/qrtNBmiR01sYhUOwu3H+VOw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.5"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/minizlib": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-3.0.2.tgz",
      "integrity": "sha512-oG62iEk+CYt5Xj2YqI5Xi9xWUeZhDI8jjQmC5oThVH5JGCTgIjr7ciJDzC7MBzYd//WvR1OTmP5Q38Q8ShQtVA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "minipass": "^7.1.2"
      },
      "engines": {
        "node": ">= 18"
      }
    },
    "node_modules/mkdirp": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-3.0.1.tgz",
      "integrity": "sha512-+NsyUUAZDmo6YVHzL/stxSu3t9YS1iljliy3BSDrXJ/dkn1KYdmtZODGGjLcc9XLgVVpH4KshHB8XmZgMhaBXg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "mkdirp": "dist/cjs/src/bin.js"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-releases": {
      "version": "2.0.20",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.20.tgz",
      "integrity": "sha512-7gK6zSXEH6neM212JgfYFXe+GmZQM+fia5SsusuBIUgnPheLFBmIPhtFoAQRj8/7wASYQnbDlHPVwY0BefoFgA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/normalize-range": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/react": {
      "version": "19.1.1",
      "resolved": "https://registry.npmjs.org/react/-/react-19.1.1.tgz",
      "integrity": "sha512-w8nqGImo45dmMIfljjMwOGtbmC/mk4CMYhWIicdSflH91J9TyCyczcPFXJzrZ/ZXcgGRFeP6BU0BEJTw6tZdfQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "19.1.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.1.tgz",
      "integrity": "sha512-Dlq/5LAZgF0Gaz6yiqZCf6VCcZs1ghAJyrsu84Q/GT0gV+mCxbfmKNoGRKBYMJ8IEdGPqu49YWXD02GCknEDkw==",
      "license": "MIT",
      "dependencies": {
        "scheduler": "^0.26.0"
      },
      "peerDependencies": {
        "react": "^19.1.1"
      }
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "7.8.2",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-7.8.2.tgz",
      "integrity": "sha512-7M2fR1JbIZ/jFWqelpvSZx+7vd7UlBTfdZqf6OSdF9g6+sfdqJDAWcak6ervbHph200ePlu+7G8LdoiC3ReyAQ==",
      "license": "MIT",
      "dependencies": {
        "cookie": "^1.0.1",
        "set-cookie-parser": "^2.6.0"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "react": ">=18",
        "react-dom": ">=18"
      },
      "peerDependenciesMeta": {
        "react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/react-router-dom": {
      "version": "7.8.2",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-7.8.2.tgz",
      "integrity": "sha512-Z4VM5mKDipal2jQ385H6UBhiiEDlnJPx6jyWsTYoZQdl5TrjxEV2a9yl3Fi60NBJxYzOTGTTHXPi0pdizvTwow==",
      "license": "MIT",
      "dependencies": {
        "react-router": "7.8.2"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "react": ">=18",
        "react-dom": ">=18"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rollup": {
      "version": "4.50.1",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.50.1.tgz",
      "integrity": "sha512-78E9voJHwnXQMiQdiqswVLZwJIzdBKJ1GdI5Zx6XwoFKUIk09/sSrr+05QFzvYb8q6Y9pPV45zzDuYa3907TZA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.50.1",
        "@rollup/rollup-android-arm64": "4.50.1",
        "@rollup/rollup-darwin-arm64": "4.50.1",
        "@rollup/rollup-darwin-x64": "4.50.1",
        "@rollup/rollup-freebsd-arm64": "4.50.1",
        "@rollup/rollup-freebsd-x64": "4.50.1",
        "@rollup/rollup-linux-arm-gnueabihf": "4.50.1",
        "@rollup/rollup-linux-arm-musleabihf": "4.50.1",
        "@rollup/rollup-linux-arm64-gnu": "4.50.1",
        "@rollup/rollup-linux-arm64-musl": "4.50.1",
        "@rollup/rollup-linux-loongarch64-gnu": "4.50.1",
        "@rollup/rollup-linux-ppc64-gnu": "4.50.1",
        "@rollup/rollup-linux-riscv64-gnu": "4.50.1",
        "@rollup/rollup-linux-riscv64-musl": "4.50.1",
        "@rollup/rollup-linux-s390x-gnu": "4.50.1",
        "@rollup/rollup-linux-x64-gnu": "4.50.1",
        "@rollup/rollup-linux-x64-musl": "4.50.1",
        "@rollup/rollup-openharmony-arm64": "4.50.1",
        "@rollup/rollup-win32-arm64-msvc": "4.50.1",
        "@rollup/rollup-win32-ia32-msvc": "4.50.1",
        "@rollup/rollup-win32-x64-msvc": "4.50.1",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/scheduler": {
      "version": "0.26.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/set-cookie-parser": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/set-cookie-parser/-/set-cookie-parser-2.7.1.tgz",
      "integrity": "sha512-IOc8uWeOZgnb3ptbCURJWNjWUPcO3ZnTTdzsurqERrP6nPyv+paC55vJM0LpOlT2ne+Ix+9+CRG1MNLlyZ4GjQ==",
      "license": "MIT"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tailwindcss": {
      "version": "4.1.13",
      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-4.1.13.tgz",
      "integrity": "sha512-i+zidfmTqtwquj4hMEwdjshYYgMbOrPzb9a0M3ZgNa0JMoZeFC6bxZvO8yr8ozS6ix2SDz0+mvryPeBs2TFE+w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tapable": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.3.tgz",
      "integrity": "sha512-ZL6DDuAlRlLGghwcfmSn9sK3Hr6ArtyudlSAiCqQ6IfE+b+HHbydbYDIG15IfS5do+7XQQBdBiubF/cV2dnDzg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/tar": {
      "version": "7.4.3",
      "resolved": "https://registry.npmjs.org/tar/-/tar-7.4.3.tgz",
      "integrity": "sha512-5S7Va8hKfV7W5U6g3aYxXmlPoZVAwUMy9AOKyF2fVuZa2UD3qZjg578OrLRt8PcNN1PleVaL/5/yYATNL0ICUw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@isaacs/fs-minipass": "^4.0.0",
        "chownr": "^3.0.0",
        "minipass": "^7.1.2",
        "minizlib": "^3.0.1",
        "mkdirp": "^3.0.1",
        "yallist": "^5.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/tar/node_modules/yallist": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-5.0.0.tgz",
      "integrity": "sha512-YgvUTfwqyc7UXVMrB+SImsVYSmTS8X/tSrtdNZMImM+n7+QTriRXyXim0mBrTXNeqzVF0KWGgHPeiyViFFrNDw==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/tinyglobby": {
      "version": "0.2.15",
      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.15.tgz",
      "integrity": "sha512-j2Zq4NyQYG5XMST4cbs02Ak8iJUdxRM0XI5QyxXuZOzKOINmWurp3smXu3y5wDcJrptwpSjgXHzIQxR0omXljQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fdir": "^6.5.0",
        "picomatch": "^4.0.3"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/SuperchupuDev"
      }
    },
    "node_modules/tinyglobby/node_modules/fdir": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.5.0.tgz",
      "integrity": "sha512-tIbYtZbucOs0BRGqPJkshJUYdL+SDH7dVM8gjy+ERp3WAUjLEFJE+02kanyHtwjWOnwrKYBiwAmM0p4kLJAnXg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/tinyglobby/node_modules/picomatch": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/ts-api-utils": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-2.1.0.tgz",
      "integrity": "sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18.12"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4"
      }
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/typescript": {
      "version": "5.8.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
      "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/typescript-eslint": {
      "version": "8.43.0",
      "resolved": "https://registry.npmjs.org/typescript-eslint/-/typescript-eslint-8.43.0.tgz",
      "integrity": "sha512-FyRGJKUGvcFekRRcBKFBlAhnp4Ng8rhe8tuvvkR9OiU0gfd4vyvTRQHEckO6VDlH57jbeUQem2IpqPq9kLJH+w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/eslint-plugin": "8.43.0",
        "@typescript-eslint/parser": "8.43.0",
        "@typescript-eslint/typescript-estree": "8.43.0",
        "@typescript-eslint/utils": "8.43.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/vite": {
      "version": "7.1.5",
      "resolved": "https://registry.npmjs.org/vite/-/vite-7.1.5.tgz",
      "integrity": "sha512-4cKBO9wR75r0BeIWWWId9XK9Lj6La5X846Zw9dFfzMRw38IlTk2iCcUt6hsyiDRcPidc55ZParFYDXi0nXOeLQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.25.0",
        "fdir": "^6.5.0",
        "picomatch": "^4.0.3",
        "postcss": "^8.5.6",
        "rollup": "^4.43.0",
        "tinyglobby": "^0.2.15"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^20.19.0 || >=22.12.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^20.19.0 || >=22.12.0",
        "jiti": ">=1.21.0",
        "less": "^4.0.0",
        "lightningcss": "^1.21.0",
        "sass": "^1.70.0",
        "sass-embedded": "^1.70.0",
        "stylus": ">=0.54.8",
        "sugarss": "^5.0.0",
        "terser": "^5.16.0",
        "tsx": "^4.8.1",
        "yaml": "^2.4.2"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "jiti": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        },
        "tsx": {
          "optional": true
        },
        "yaml": {
          "optional": true
        }
      }
    },
    "node_modules/vite/node_modules/fdir": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.5.0.tgz",
      "integrity": "sha512-tIbYtZbucOs0BRGqPJkshJUYdL+SDH7dVM8gjy+ERp3WAUjLEFJE+02kanyHtwjWOnwrKYBiwAmM0p4kLJAnXg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/vite/node_modules/picomatch": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}


----- END frontend\package-lock.json -----


----- BEGIN frontend\package.json -----

{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.11.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.8.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@tailwindcss/vite": "^4.1.13",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^5.0.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.13",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.39.1",
    "vite": "^7.1.2"
  }
}


----- END frontend\package.json -----


----- BEGIN frontend\README.md -----

# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```


----- END frontend\README.md -----


----- BEGIN frontend\tailwind.config.js -----

module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        'mega-blue': '#007bff',
        'mega-green': '#28a745',
        'mega-red': '#dc3545',
        'mega-yellow': '#ffc107',
        'mega-gray': '#6c757d',
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
  ],
}


----- END frontend\tailwind.config.js -----


----- BEGIN frontend\tsconfig.app.json -----

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Import alias */
    "baseUrl": "./src",
    "paths": {
      "@/*": ["*"]
    },

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}


----- END frontend\tsconfig.app.json -----


----- BEGIN frontend\tsconfig.json -----

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}


----- END frontend\tsconfig.json -----


----- BEGIN frontend\tsconfig.node.json -----

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}


----- END frontend\tsconfig.node.json -----


----- BEGIN frontend\vite.config.ts -----

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import tailwindcss from "@tailwindcss/vite"; // â¬…ï¸ ADICIONE

export default defineConfig({
  plugins: [react(), tailwindcss()],        // â¬…ï¸ ADICIONE
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
      react: path.resolve(__dirname, "./node_modules/react"),
    },
  },
});


----- END frontend\vite.config.ts -----


----- BEGIN package-lock.json -----

{
  "name": "MEGA",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "dependencies": {
        "recharts": "^3.3.0"
      }
    },
    "node_modules/@reduxjs/toolkit": {
      "version": "2.9.1",
      "resolved": "https://registry.npmjs.org/@reduxjs/toolkit/-/toolkit-2.9.1.tgz",
      "integrity": "sha512-sETJ3qO72y7L7WiR5K54UFLT3jRzAtqeBPVO15xC3bGA6kDqCH8m/v7BKCPH4czydXzz/1lPEGLvew7GjOO3Qw==",
      "license": "MIT",
      "dependencies": {
        "@standard-schema/spec": "^1.0.0",
        "@standard-schema/utils": "^0.3.0",
        "immer": "^10.0.3",
        "redux": "^5.0.1",
        "redux-thunk": "^3.1.0",
        "reselect": "^5.1.0"
      },
      "peerDependencies": {
        "react": "^16.9.0 || ^17.0.0 || ^18 || ^19",
        "react-redux": "^7.2.1 || ^8.1.3 || ^9.0.0"
      },
      "peerDependenciesMeta": {
        "react": {
          "optional": true
        },
        "react-redux": {
          "optional": true
        }
      }
    },
    "node_modules/@standard-schema/spec": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@standard-schema/spec/-/spec-1.0.0.tgz",
      "integrity": "sha512-m2bOd0f2RT9k8QJx1JN85cZYyH1RqFBdlwtkSlf4tBDYLCiiZnv1fIIwacK6cqwXavOydf0NPToMQgpKq+dVlA==",
      "license": "MIT"
    },
    "node_modules/@standard-schema/utils": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/@standard-schema/utils/-/utils-0.3.0.tgz",
      "integrity": "sha512-e7Mew686owMaPJVNNLs55PUvgz371nKgwsc4vxE49zsODpJEnxgxRo2y/OKrqueavXgZNMDVj3DdHFlaSAeU8g==",
      "license": "MIT"
    },
    "node_modules/@types/d3-array": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/@types/d3-array/-/d3-array-3.2.2.tgz",
      "integrity": "sha512-hOLWVbm7uRza0BYXpIIW5pxfrKe0W+D5lrFiAEYR+pb6w3N2SwSMaJbXdUfSEv+dT4MfHBLtn5js0LAWaO6otw==",
      "license": "MIT"
    },
    "node_modules/@types/d3-color": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/@types/d3-color/-/d3-color-3.1.3.tgz",
      "integrity": "sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==",
      "license": "MIT"
    },
    "node_modules/@types/d3-ease": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-ease/-/d3-ease-3.0.2.tgz",
      "integrity": "sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==",
      "license": "MIT"
    },
    "node_modules/@types/d3-interpolate": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-interpolate/-/d3-interpolate-3.0.4.tgz",
      "integrity": "sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-color": "*"
      }
    },
    "node_modules/@types/d3-path": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/@types/d3-path/-/d3-path-3.1.1.tgz",
      "integrity": "sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-scale": {
      "version": "4.0.9",
      "resolved": "https://registry.npmjs.org/@types/d3-scale/-/d3-scale-4.0.9.tgz",
      "integrity": "sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-time": "*"
      }
    },
    "node_modules/@types/d3-shape": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/@types/d3-shape/-/d3-shape-3.1.7.tgz",
      "integrity": "sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-path": "*"
      }
    },
    "node_modules/@types/d3-time": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-time/-/d3-time-3.0.4.tgz",
      "integrity": "sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==",
      "license": "MIT"
    },
    "node_modules/@types/d3-timer": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-timer/-/d3-timer-3.0.2.tgz",
      "integrity": "sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==",
      "license": "MIT"
    },
    "node_modules/@types/use-sync-external-store": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/@types/use-sync-external-store/-/use-sync-external-store-0.0.6.tgz",
      "integrity": "sha512-zFDAD+tlpf2r4asuHEj0XH6pY6i0g5NeAHPn+15wk3BV6JA69eERFXC1gyGThDkVa1zCyKr5jox1+2LbV/AMLg==",
      "license": "MIT"
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/d3-array": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
      "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
      "license": "ISC",
      "dependencies": {
        "internmap": "1 - 2"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-color": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-ease": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-format": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-interpolate": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
      "license": "ISC",
      "dependencies": {
        "d3-color": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-path": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-scale": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2.10.0 - 3",
        "d3-format": "1 - 3",
        "d3-interpolate": "1.2.0 - 3",
        "d3-time": "2.1.1 - 3",
        "d3-time-format": "2 - 4"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-shape": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
      "license": "ISC",
      "dependencies": {
        "d3-path": "^3.1.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time-format": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
      "license": "ISC",
      "dependencies": {
        "d3-time": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-timer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/decimal.js-light": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==",
      "license": "MIT"
    },
    "node_modules/es-toolkit": {
      "version": "1.40.0",
      "resolved": "https://registry.npmjs.org/es-toolkit/-/es-toolkit-1.40.0.tgz",
      "integrity": "sha512-8o6w0KFmU0CiIl0/Q/BCEOabF2IJaELM1T2PWj6e8KqzHv1gdx+7JtFnDwOx1kJH/isJ5NwlDG1nCr1HrRF94Q==",
      "license": "MIT",
      "workspaces": [
        "docs",
        "benchmarks"
      ]
    },
    "node_modules/eventemitter3": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-5.0.1.tgz",
      "integrity": "sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==",
      "license": "MIT"
    },
    "node_modules/immer": {
      "version": "10.1.3",
      "resolved": "https://registry.npmjs.org/immer/-/immer-10.1.3.tgz",
      "integrity": "sha512-tmjF/k8QDKydUlm3mZU+tjM6zeq9/fFpPqH9SzWmBnVVKsPBg/V66qsMwb3/Bo90cgUN+ghdVBess+hPsxUyRw==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/immer"
      }
    },
    "node_modules/internmap": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/react": {
      "version": "19.2.0",
      "resolved": "https://registry.npmjs.org/react/-/react-19.2.0.tgz",
      "integrity": "sha512-tmbWg6W31tQLeB5cdIBOicJDJRR2KzXsV7uSK9iNfLWQ5bIZfxuPEHp7M8wiHyHnn0DD1i7w3Zmin0FtkrwoCQ==",
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "19.2.0",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.2.0.tgz",
      "integrity": "sha512-UlbRu4cAiGaIewkPyiRGJk0imDN2T3JjieT6spoL2UeSf5od4n5LB/mQ4ejmxhCFT1tYe8IvaFulzynWovsEFQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "scheduler": "^0.27.0"
      },
      "peerDependencies": {
        "react": "^19.2.0"
      }
    },
    "node_modules/react-is": {
      "version": "19.2.0",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-19.2.0.tgz",
      "integrity": "sha512-x3Ax3kNSMIIkyVYhWPyO09bu0uttcAIoecO/um/rKGQ4EltYWVYtyiGkS/3xMynrbVQdS69Jhlv8FXUEZehlzA==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/react-redux": {
      "version": "9.2.0",
      "resolved": "https://registry.npmjs.org/react-redux/-/react-redux-9.2.0.tgz",
      "integrity": "sha512-ROY9fvHhwOD9ySfrF0wmvu//bKCQ6AeZZq1nJNtbDC+kk5DuSuNX/n6YWYF/SYy7bSba4D4FSz8DJeKY/S/r+g==",
      "license": "MIT",
      "dependencies": {
        "@types/use-sync-external-store": "^0.0.6",
        "use-sync-external-store": "^1.4.0"
      },
      "peerDependencies": {
        "@types/react": "^18.2.25 || ^19",
        "react": "^18.0 || ^19",
        "redux": "^5.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "redux": {
          "optional": true
        }
      }
    },
    "node_modules/recharts": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/recharts/-/recharts-3.3.0.tgz",
      "integrity": "sha512-Vi0qmTB0iz1+/Cz9o5B7irVyUjX2ynvEgImbgMt/3sKRREcUM07QiYjS1QpAVrkmVlXqy5gykq4nGWMz9AS4Rg==",
      "license": "MIT",
      "dependencies": {
        "@reduxjs/toolkit": "1.x.x || 2.x.x",
        "clsx": "^2.1.1",
        "decimal.js-light": "^2.5.1",
        "es-toolkit": "^1.39.3",
        "eventemitter3": "^5.0.1",
        "immer": "^10.1.1",
        "react-redux": "8.x.x || 9.x.x",
        "reselect": "5.1.1",
        "tiny-invariant": "^1.3.3",
        "use-sync-external-store": "^1.2.2",
        "victory-vendor": "^37.0.2"
      },
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-is": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/redux": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/redux/-/redux-5.0.1.tgz",
      "integrity": "sha512-M9/ELqF6fy8FwmkpnF0S3YKOqMyoWJ4+CS5Efg2ct3oY9daQvd/Pc71FpGZsVsbl3Cpb+IIcjBDUnnyBdQbq4w==",
      "license": "MIT"
    },
    "node_modules/redux-thunk": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/redux-thunk/-/redux-thunk-3.1.0.tgz",
      "integrity": "sha512-NW2r5T6ksUKXCabzhL9z+h206HQw/NJkcLm1GPImRQ8IzfXwRGqjVhKJGauHirT0DAuyy6hjdnMZaRoAcy0Klw==",
      "license": "MIT",
      "peerDependencies": {
        "redux": "^5.0.0"
      }
    },
    "node_modules/reselect": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/reselect/-/reselect-5.1.1.tgz",
      "integrity": "sha512-K/BG6eIky/SBpzfHZv/dd+9JBFiS4SWV7FIujVyJRux6e45+73RaUHXLmIR1f7WOMaQ0U1km6qwklRQxpJJY0w==",
      "license": "MIT"
    },
    "node_modules/scheduler": {
      "version": "0.27.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.27.0.tgz",
      "integrity": "sha512-eNv+WrVbKu1f3vbYJT/xtiF5syA5HPIMtf9IgY/nKg0sWqzAUEvqY/xm7OcZc/qafLx/iO9FgOmeSAp4v5ti/Q==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/tiny-invariant": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/tiny-invariant/-/tiny-invariant-1.3.3.tgz",
      "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
      "license": "MIT"
    },
    "node_modules/use-sync-external-store": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/use-sync-external-store/-/use-sync-external-store-1.6.0.tgz",
      "integrity": "sha512-Pp6GSwGP/NrPIrxVFAIkOQeyw8lFenOHijQWkUTrDvrF4ALqylP2C/KCkeS9dpUM3KvYRQhna5vt7IL95+ZQ9w==",
      "license": "MIT",
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/victory-vendor": {
      "version": "37.3.6",
      "resolved": "https://registry.npmjs.org/victory-vendor/-/victory-vendor-37.3.6.tgz",
      "integrity": "sha512-SbPDPdDBYp+5MJHhBCAyI7wKM3d5ivekigc2Dk2s7pgbZ9wIgIBYGVw4zGHBml/qTFbexrofXW6Gu4noGxrOwQ==",
      "license": "MIT AND ISC",
      "dependencies": {
        "@types/d3-array": "^3.0.3",
        "@types/d3-ease": "^3.0.0",
        "@types/d3-interpolate": "^3.0.1",
        "@types/d3-scale": "^4.0.2",
        "@types/d3-shape": "^3.1.0",
        "@types/d3-time": "^3.0.0",
        "@types/d3-timer": "^3.0.0",
        "d3-array": "^3.1.6",
        "d3-ease": "^3.0.1",
        "d3-interpolate": "^3.0.1",
        "d3-scale": "^4.0.2",
        "d3-shape": "^3.1.0",
        "d3-time": "^3.0.0",
        "d3-timer": "^3.0.1"
      }
    }
  }
}


----- END package-lock.json -----


----- BEGIN package.json -----

{
  "dependencies": {
    "recharts": "^3.3.0"
  }
}


----- END package.json -----

